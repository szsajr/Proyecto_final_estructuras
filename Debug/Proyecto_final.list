
Proyecto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000efc  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800646c  0800646c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  0800646c  0800646c  0000746c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006474  08006474  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006474  08006474  00007474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006478  08006478  00007478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800647c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  2000005c  080064d8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  080064d8  0000879c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f38a  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003282  00000000  00000000  00027416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0002a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002104  00000000  00000000  0002b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c37  00000000  00000000  0002d584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d74  00000000  00000000  000561bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fed4a  00000000  00000000  00076f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175c79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003028  00000000  00000000  00175cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000feeb  00000000  00000000  00178ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00188bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005558 	.word	0x08005558

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005558 	.word	0x08005558

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <Keypad_Get_Char>:
                         {'4','5','6','B'},
                         {'7','8','9','C'},
                         {'*','0','#','D'}};

char Keypad_Get_Char(void)
{
 8000d4c:	b538      	push	{r3, r4, r5, lr}
	val_key = 0;
 8000d4e:	4cd6      	ldr	r4, [pc, #856]	@ (80010a8 <Keypad_Get_Char+0x35c>)
 8000d50:	2200      	movs	r2, #0

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000d52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	val_key = 0;
 8000d5a:	7022      	strb	r2, [r4, #0]
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000d5c:	f001 ff38 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000d60:	48d2      	ldr	r0, [pc, #840]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	2108      	movs	r1, #8
 8000d66:	f001 ff33 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000d6a:	48d0      	ldr	r0, [pc, #832]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2120      	movs	r1, #32
 8000d70:	f001 ff2e 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000d74:	48cd      	ldr	r0, [pc, #820]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000d76:	2110      	movs	r1, #16
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f001 ff29 	bl	8002bd0 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000d7e:	48cb      	ldr	r0, [pc, #812]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000d80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d84:	f001 ff1e 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	f000 80be 	beq.w	8000f0a <Keypad_Get_Char+0x1be>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
		HAL_Delay(4);
		val_key = keys[0][0];
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000d8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f001 ff15 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	f000 80ce 	beq.w	8000f3c <Keypad_Get_Char+0x1f0>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
		HAL_Delay(4);
		val_key = keys[0][1];
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000da0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da8:	f001 ff0c 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	f000 80de 	beq.w	8000f6e <Keypad_Get_Char+0x222>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
		HAL_Delay(4);
		val_key = keys[0][2];
	}
	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000db2:	48bf      	ldr	r0, [pc, #764]	@ (80010b0 <Keypad_Get_Char+0x364>)
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	f001 ff05 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	f000 80ee 	beq.w	8000f9c <Keypad_Get_Char+0x250>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
		HAL_Delay(4);
		val_key = keys[0][3];
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dca:	f001 ff01 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000dce:	48b7      	ldr	r0, [pc, #732]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	f001 fefc 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000dd8:	48b4      	ldr	r0, [pc, #720]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2120      	movs	r1, #32
 8000dde:	f001 fef7 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000de2:	48b2      	ldr	r0, [pc, #712]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000de4:	2110      	movs	r1, #16
 8000de6:	2201      	movs	r2, #1
 8000de8:	f001 fef2 	bl	8002bd0 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000dec:	48af      	ldr	r0, [pc, #700]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000dee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df2:	f001 fee7 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000df6:	2800      	cmp	r0, #0
 8000df8:	f000 819f 	beq.w	800113a <Keypad_Get_Char+0x3ee>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
		HAL_Delay(4);
		val_key = keys[1][0];
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e04:	f001 fede 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	f000 8185 	beq.w	8001118 <Keypad_Get_Char+0x3cc>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
		HAL_Delay(4);
		val_key = keys[1][1];
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e16:	f001 fed5 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	f000 816b 	beq.w	80010f6 <Keypad_Get_Char+0x3aa>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
		HAL_Delay(4);
		val_key = keys[1][2];
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000e20:	48a3      	ldr	r0, [pc, #652]	@ (80010b0 <Keypad_Get_Char+0x364>)
 8000e22:	2180      	movs	r1, #128	@ 0x80
 8000e24:	f001 fece 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	f000 8154 	beq.w	80010d6 <Keypad_Get_Char+0x38a>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
		HAL_Delay(4);
		val_key = keys[1][3];
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e38:	f001 feca 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000e3c:	489b      	ldr	r0, [pc, #620]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2108      	movs	r1, #8
 8000e42:	f001 fec5 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 8000e46:	4899      	ldr	r0, [pc, #612]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	f001 fec0 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000e50:	4896      	ldr	r0, [pc, #600]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000e52:	2110      	movs	r1, #16
 8000e54:	2201      	movs	r2, #1
 8000e56:	f001 febb 	bl	8002bd0 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000e5a:	4894      	ldr	r0, [pc, #592]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000e5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e60:	f001 feb0 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	f000 8125 	beq.w	80010b4 <Keypad_Get_Char+0x368>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
		HAL_Delay(4);
		val_key = keys[2][0];
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000e6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e72:	f001 fea7 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	f000 8104 	beq.w	8001084 <Keypad_Get_Char+0x338>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
		HAL_Delay(4);
		val_key = keys[2][1];
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000e7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f001 fe9e 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	f000 80ea 	beq.w	8001062 <Keypad_Get_Char+0x316>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
		HAL_Delay(4);
		val_key = keys[2][2];
	}
	if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 8000e8e:	4888      	ldr	r0, [pc, #544]	@ (80010b0 <Keypad_Get_Char+0x364>)
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	f001 fe97 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	f000 80d3 	beq.w	8001042 <Keypad_Get_Char+0x2f6>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
		HAL_Delay(4);
		val_key = keys[2][3];
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea6:	f001 fe93 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000eaa:	4880      	ldr	r0, [pc, #512]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	2108      	movs	r1, #8
 8000eb0:	f001 fe8e 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000eb4:	487d      	ldr	r0, [pc, #500]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2120      	movs	r1, #32
 8000eba:	f001 fe89 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000ebe:	487b      	ldr	r0, [pc, #492]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000ec0:	2110      	movs	r1, #16
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f001 fe84 	bl	8002bd0 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000ec8:	4878      	ldr	r0, [pc, #480]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000eca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ece:	f001 fe79 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	f000 80a4 	beq.w	8001020 <Keypad_Get_Char+0x2d4>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
		HAL_Delay(4);
		val_key = keys[3][0];
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000ed8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee0:	f001 fe70 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	f000 808a 	beq.w	8000ffe <Keypad_Get_Char+0x2b2>
		HAL_Delay(4);
		while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
		HAL_Delay(4);
		val_key = keys[3][1];
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef2:	f001 fe67 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	d070      	beq.n	8000fdc <Keypad_Get_Char+0x290>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
		HAL_Delay(4);
		val_key = keys[3][2];
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000efa:	486d      	ldr	r0, [pc, #436]	@ (80010b0 <Keypad_Get_Char+0x364>)
 8000efc:	2180      	movs	r1, #128	@ 0x80
 8000efe:	f001 fe61 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d05a      	beq.n	8000fbc <Keypad_Get_Char+0x270>
		HAL_Delay(4);
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
		HAL_Delay(4);
		val_key = keys[3][3];
	}
	return val_key;
 8000f06:	7820      	ldrb	r0, [r4, #0]
}
 8000f08:	bd38      	pop	{r3, r4, r5, pc}
		HAL_Delay(4);
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f000 ffd8 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 8000f10:	4d66      	ldr	r5, [pc, #408]	@ (80010ac <Keypad_Get_Char+0x360>)
 8000f12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f16:	4628      	mov	r0, r5
 8000f18:	f001 fe54 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d0f8      	beq.n	8000f12 <Keypad_Get_Char+0x1c6>
		HAL_Delay(4);
 8000f20:	2004      	movs	r0, #4
 8000f22:	f000 ffcd 	bl	8001ec0 <HAL_Delay>
		val_key = keys[0][0];
 8000f26:	2331      	movs	r3, #49	@ 0x31
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000f28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		val_key = keys[0][0];
 8000f30:	7023      	strb	r3, [r4, #0]
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000f32:	f001 fe47 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	f47f af32 	bne.w	8000da0 <Keypad_Get_Char+0x54>
		HAL_Delay(4);
 8000f3c:	2004      	movs	r0, #4
 8000f3e:	f000 ffbf 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4a:	f001 fe3b 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d0f7      	beq.n	8000f42 <Keypad_Get_Char+0x1f6>
		HAL_Delay(4);
 8000f52:	2004      	movs	r0, #4
 8000f54:	f000 ffb4 	bl	8001ec0 <HAL_Delay>
		val_key = keys[0][1];
 8000f58:	2332      	movs	r3, #50	@ 0x32
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000f5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		val_key = keys[0][1];
 8000f62:	7023      	strb	r3, [r4, #0]
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000f64:	f001 fe2e 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	f47f af22 	bne.w	8000db2 <Keypad_Get_Char+0x66>
		HAL_Delay(4);
 8000f6e:	2004      	movs	r0, #4
 8000f70:	f000 ffa6 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000f74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7c:	f001 fe22 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0f7      	beq.n	8000f74 <Keypad_Get_Char+0x228>
		HAL_Delay(4);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f000 ff9b 	bl	8001ec0 <HAL_Delay>
		val_key = keys[0][2];
 8000f8a:	2333      	movs	r3, #51	@ 0x33
	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000f8c:	4848      	ldr	r0, [pc, #288]	@ (80010b0 <Keypad_Get_Char+0x364>)
		val_key = keys[0][2];
 8000f8e:	7023      	strb	r3, [r4, #0]
	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	f001 fe17 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000f96:	2800      	cmp	r0, #0
 8000f98:	f47f af12 	bne.w	8000dc0 <Keypad_Get_Char+0x74>
		HAL_Delay(4);
 8000f9c:	2004      	movs	r0, #4
 8000f9e:	f000 ff8f 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000fa2:	4d43      	ldr	r5, [pc, #268]	@ (80010b0 <Keypad_Get_Char+0x364>)
 8000fa4:	2180      	movs	r1, #128	@ 0x80
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f001 fe0c 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d0f9      	beq.n	8000fa4 <Keypad_Get_Char+0x258>
		HAL_Delay(4);
 8000fb0:	2004      	movs	r0, #4
 8000fb2:	f000 ff85 	bl	8001ec0 <HAL_Delay>
		val_key = keys[0][3];
 8000fb6:	2341      	movs	r3, #65	@ 0x41
 8000fb8:	7023      	strb	r3, [r4, #0]
 8000fba:	e701      	b.n	8000dc0 <Keypad_Get_Char+0x74>
		HAL_Delay(4);
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	f000 ff7f 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000fc2:	4d3b      	ldr	r5, [pc, #236]	@ (80010b0 <Keypad_Get_Char+0x364>)
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f001 fdfc 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d0f9      	beq.n	8000fc4 <Keypad_Get_Char+0x278>
		HAL_Delay(4);
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	f000 ff75 	bl	8001ec0 <HAL_Delay>
		val_key = keys[3][3];
 8000fd6:	2044      	movs	r0, #68	@ 0x44
 8000fd8:	7020      	strb	r0, [r4, #0]
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
		HAL_Delay(4);
 8000fdc:	2004      	movs	r0, #4
 8000fde:	f000 ff6f 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000fe2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fea:	f001 fdeb 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d0f7      	beq.n	8000fe2 <Keypad_Get_Char+0x296>
		HAL_Delay(4);
 8000ff2:	2004      	movs	r0, #4
 8000ff4:	f000 ff64 	bl	8001ec0 <HAL_Delay>
		val_key = keys[3][2];
 8000ff8:	2323      	movs	r3, #35	@ 0x23
 8000ffa:	7023      	strb	r3, [r4, #0]
 8000ffc:	e77d      	b.n	8000efa <Keypad_Get_Char+0x1ae>
		HAL_Delay(4);
 8000ffe:	2004      	movs	r0, #4
 8001000:	f000 ff5e 	bl	8001ec0 <HAL_Delay>
		while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8001004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f001 fdda 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001010:	2800      	cmp	r0, #0
 8001012:	d0f7      	beq.n	8001004 <Keypad_Get_Char+0x2b8>
		HAL_Delay(4);
 8001014:	2004      	movs	r0, #4
 8001016:	f000 ff53 	bl	8001ec0 <HAL_Delay>
		val_key = keys[3][1];
 800101a:	2330      	movs	r3, #48	@ 0x30
 800101c:	7023      	strb	r3, [r4, #0]
 800101e:	e764      	b.n	8000eea <Keypad_Get_Char+0x19e>
		HAL_Delay(4);
 8001020:	2004      	movs	r0, #4
 8001022:	f000 ff4d 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001026:	4d21      	ldr	r5, [pc, #132]	@ (80010ac <Keypad_Get_Char+0x360>)
 8001028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800102c:	4628      	mov	r0, r5
 800102e:	f001 fdc9 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001032:	2800      	cmp	r0, #0
 8001034:	d0f8      	beq.n	8001028 <Keypad_Get_Char+0x2dc>
		HAL_Delay(4);
 8001036:	2004      	movs	r0, #4
 8001038:	f000 ff42 	bl	8001ec0 <HAL_Delay>
		val_key = keys[3][0];
 800103c:	232a      	movs	r3, #42	@ 0x2a
 800103e:	7023      	strb	r3, [r4, #0]
 8001040:	e74a      	b.n	8000ed8 <Keypad_Get_Char+0x18c>
		HAL_Delay(4);
 8001042:	2004      	movs	r0, #4
 8001044:	f000 ff3c 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8001048:	4d19      	ldr	r5, [pc, #100]	@ (80010b0 <Keypad_Get_Char+0x364>)
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	4628      	mov	r0, r5
 800104e:	f001 fdb9 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001052:	2800      	cmp	r0, #0
 8001054:	d0f9      	beq.n	800104a <Keypad_Get_Char+0x2fe>
		HAL_Delay(4);
 8001056:	2004      	movs	r0, #4
 8001058:	f000 ff32 	bl	8001ec0 <HAL_Delay>
		val_key = keys[2][3];
 800105c:	2343      	movs	r3, #67	@ 0x43
 800105e:	7023      	strb	r3, [r4, #0]
 8001060:	e71c      	b.n	8000e9c <Keypad_Get_Char+0x150>
		HAL_Delay(4);
 8001062:	2004      	movs	r0, #4
 8001064:	f000 ff2c 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001070:	f001 fda8 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001074:	2800      	cmp	r0, #0
 8001076:	d0f7      	beq.n	8001068 <Keypad_Get_Char+0x31c>
		HAL_Delay(4);
 8001078:	2004      	movs	r0, #4
 800107a:	f000 ff21 	bl	8001ec0 <HAL_Delay>
		val_key = keys[2][2];
 800107e:	2339      	movs	r3, #57	@ 0x39
 8001080:	7023      	strb	r3, [r4, #0]
 8001082:	e704      	b.n	8000e8e <Keypad_Get_Char+0x142>
		HAL_Delay(4);
 8001084:	2004      	movs	r0, #4
 8001086:	f000 ff1b 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800108a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800108e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001092:	f001 fd97 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001096:	2800      	cmp	r0, #0
 8001098:	d0f7      	beq.n	800108a <Keypad_Get_Char+0x33e>
		HAL_Delay(4);
 800109a:	2004      	movs	r0, #4
 800109c:	f000 ff10 	bl	8001ec0 <HAL_Delay>
		val_key = keys[2][1];
 80010a0:	2338      	movs	r3, #56	@ 0x38
 80010a2:	7023      	strb	r3, [r4, #0]
 80010a4:	e6ea      	b.n	8000e7c <Keypad_Get_Char+0x130>
 80010a6:	bf00      	nop
 80010a8:	20000078 	.word	0x20000078
 80010ac:	48000400 	.word	0x48000400
 80010b0:	48000800 	.word	0x48000800
		HAL_Delay(4);
 80010b4:	2004      	movs	r0, #4
 80010b6:	f000 ff03 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80010ba:	4d28      	ldr	r5, [pc, #160]	@ (800115c <Keypad_Get_Char+0x410>)
 80010bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c0:	4628      	mov	r0, r5
 80010c2:	f001 fd7f 	bl	8002bc4 <HAL_GPIO_ReadPin>
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d0f8      	beq.n	80010bc <Keypad_Get_Char+0x370>
		HAL_Delay(4);
 80010ca:	2004      	movs	r0, #4
 80010cc:	f000 fef8 	bl	8001ec0 <HAL_Delay>
		val_key = keys[2][0];
 80010d0:	2337      	movs	r3, #55	@ 0x37
 80010d2:	7023      	strb	r3, [r4, #0]
 80010d4:	e6c9      	b.n	8000e6a <Keypad_Get_Char+0x11e>
		HAL_Delay(4);
 80010d6:	2004      	movs	r0, #4
 80010d8:	f000 fef2 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80010dc:	4d20      	ldr	r5, [pc, #128]	@ (8001160 <Keypad_Get_Char+0x414>)
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	4628      	mov	r0, r5
 80010e2:	f001 fd6f 	bl	8002bc4 <HAL_GPIO_ReadPin>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d0f9      	beq.n	80010de <Keypad_Get_Char+0x392>
		HAL_Delay(4);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f000 fee8 	bl	8001ec0 <HAL_Delay>
		val_key = keys[1][3];
 80010f0:	2342      	movs	r3, #66	@ 0x42
 80010f2:	7023      	strb	r3, [r4, #0]
 80010f4:	e69b      	b.n	8000e2e <Keypad_Get_Char+0xe2>
		HAL_Delay(4);
 80010f6:	2004      	movs	r0, #4
 80010f8:	f000 fee2 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80010fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001104:	f001 fd5e 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001108:	2800      	cmp	r0, #0
 800110a:	d0f7      	beq.n	80010fc <Keypad_Get_Char+0x3b0>
		HAL_Delay(4);
 800110c:	2004      	movs	r0, #4
 800110e:	f000 fed7 	bl	8001ec0 <HAL_Delay>
		val_key = keys[1][2];
 8001112:	2336      	movs	r3, #54	@ 0x36
 8001114:	7023      	strb	r3, [r4, #0]
 8001116:	e683      	b.n	8000e20 <Keypad_Get_Char+0xd4>
		HAL_Delay(4);
 8001118:	2004      	movs	r0, #4
 800111a:	f000 fed1 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800111e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001122:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001126:	f001 fd4d 	bl	8002bc4 <HAL_GPIO_ReadPin>
 800112a:	2800      	cmp	r0, #0
 800112c:	d0f7      	beq.n	800111e <Keypad_Get_Char+0x3d2>
		HAL_Delay(4);
 800112e:	2004      	movs	r0, #4
 8001130:	f000 fec6 	bl	8001ec0 <HAL_Delay>
		val_key = keys[1][1];
 8001134:	2335      	movs	r3, #53	@ 0x35
 8001136:	7023      	strb	r3, [r4, #0]
 8001138:	e669      	b.n	8000e0e <Keypad_Get_Char+0xc2>
		HAL_Delay(4);
 800113a:	2004      	movs	r0, #4
 800113c:	f000 fec0 	bl	8001ec0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001140:	4d06      	ldr	r5, [pc, #24]	@ (800115c <Keypad_Get_Char+0x410>)
 8001142:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001146:	4628      	mov	r0, r5
 8001148:	f001 fd3c 	bl	8002bc4 <HAL_GPIO_ReadPin>
 800114c:	2800      	cmp	r0, #0
 800114e:	d0f8      	beq.n	8001142 <Keypad_Get_Char+0x3f6>
		HAL_Delay(4);
 8001150:	2004      	movs	r0, #4
 8001152:	f000 feb5 	bl	8001ec0 <HAL_Delay>
		val_key = keys[1][0];
 8001156:	2334      	movs	r3, #52	@ 0x34
 8001158:	7023      	strb	r3, [r4, #0]
 800115a:	e64f      	b.n	8000dfc <Keypad_Get_Char+0xb0>
 800115c:	48000400 	.word	0x48000400
 8001160:	48000800 	.word	0x48000800
 8001164:	00000000 	.word	0x00000000

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b510      	push	{r4, lr}
 800116a:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116c:	2244      	movs	r2, #68	@ 0x44
 800116e:	2100      	movs	r1, #0
 8001170:	a806      	add	r0, sp, #24
 8001172:	f003 fe39 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001176:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001178:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001180:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001184:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001186:	f002 f9ab 	bl	80034e0 <HAL_PWREx_ControlVoltageScaling>
 800118a:	b108      	cbz	r0, 8001190 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118e:	e7fe      	b.n	800118e <SystemClock_Config+0x26>
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001190:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80011e8 <SystemClock_Config+0x80>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001198:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a2:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 9;
 80011a4:	2209      	movs	r2, #9
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a6:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011aa:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ac:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011ae:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011b2:	9112      	str	r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 9;
 80011b4:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	f002 fa73 	bl	80036a0 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b108      	cbz	r0, 80011c2 <SystemClock_Config+0x5a>
 80011be:	b672      	cpsid	i
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <SystemClock_Config+0x58>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c2:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c8:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011d6:	f002 fd43 	bl	8003c60 <HAL_RCC_ClockConfig>
 80011da:	b108      	cbz	r0, 80011e0 <SystemClock_Config+0x78>
 80011dc:	b672      	cpsid	i
  while (1)
 80011de:	e7fe      	b.n	80011de <SystemClock_Config+0x76>
}
 80011e0:	b018      	add	sp, #96	@ 0x60
 80011e2:	bd10      	pop	{r4, pc}
 80011e4:	f3af 8000 	nop.w
 80011e8:	00000007 	.word	0x00000007
 80011ec:	00000002 	.word	0x00000002

080011f0 <main>:
{
 80011f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	2400      	movs	r4, #0
{
 80011f6:	b091      	sub	sp, #68	@ 0x44
  HAL_Init(); // INICIALIZA LA LIBRERIA HAL
 80011f8:	f000 fe38 	bl	8001e6c <HAL_Init>
  SystemClock_Config();
 80011fc:	f7ff ffb4 	bl	8001168 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8001204:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001208:	4bad      	ldr	r3, [pc, #692]	@ (80014c0 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800120e:	f042 0204 	orr.w	r2, r2, #4
 8001212:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001214:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001216:	f002 0204 	and.w	r2, r2, #4
 800121a:	9203      	str	r2, [sp, #12]
 800121c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001220:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001224:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001228:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800122c:	9204      	str	r2, [sp, #16]
 800122e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001238:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800123a:	f002 0201 	and.w	r2, r2, #1
 800123e:	9205      	str	r2, [sp, #20]
 8001240:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001244:	f042 0202 	orr.w	r2, r2, #2
 8001248:	64da      	str	r2, [r3, #76]	@ 0x4c
 800124a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|R1_Pin, GPIO_PIN_RESET);
 8001250:	f240 4122 	movw	r1, #1058	@ 0x422
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|R1_Pin, GPIO_PIN_RESET);
 8001256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|R1_Pin, GPIO_PIN_RESET);
 800125e:	f001 fcb7 	bl	8002bd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, R2_Pin|R4_Pin|R3_Pin, GPIO_PIN_RESET);
 8001262:	4622      	mov	r2, r4
 8001264:	4897      	ldr	r0, [pc, #604]	@ (80014c4 <main+0x2d4>)
 8001266:	2138      	movs	r1, #56	@ 0x38
 8001268:	f001 fcb2 	bl	8002bd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126c:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
 8001270:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001274:	4894      	ldr	r0, [pc, #592]	@ (80014c8 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001278:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127a:	e9cd 530a 	strd	r5, r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800127e:	f001 fb7d 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|R1_Pin;
 8001284:	f240 4322 	movw	r3, #1058	@ 0x422
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	a90a      	add	r1, sp, #40	@ 0x28
 800128a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|R1_Pin;
 800128e:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f001 fb71 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = C1_Pin;
 800129a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 800129e:	4889      	ldr	r0, [pc, #548]	@ (80014c4 <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a0:	950c      	str	r5, [sp, #48]	@ 0x30
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 80012a2:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f001 fb68 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = C4_Pin;
 80012ac:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 80012ae:	4886      	ldr	r0, [pc, #536]	@ (80014c8 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b0:	950c      	str	r5, [sp, #48]	@ 0x30
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 80012b2:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f001 fb60 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = C2_Pin|C3_Pin;
 80012bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	a90a      	add	r1, sp, #40	@ 0x28
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ca:	950c      	str	r5, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f001 fb56 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R2_Pin|R4_Pin|R3_Pin;
 80012d0:	2338      	movs	r3, #56	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	487c      	ldr	r0, [pc, #496]	@ (80014c4 <main+0x2d4>)
 80012d4:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f001 fb4d 	bl	800297c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80012e2:	487a      	ldr	r0, [pc, #488]	@ (80014cc <main+0x2dc>)
  huart2.Init.BaudRate = 115200;
 80012e4:	4b7a      	ldr	r3, [pc, #488]	@ (80014d0 <main+0x2e0>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e6:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 80012e8:	f44f 37e1 	mov.w	r7, #115200	@ 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ec:	260c      	movs	r6, #12
  huart2.Init.BaudRate = 115200;
 80012ee:	e9c0 3700 	strd	r3, r7, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fa:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012fe:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001300:	f003 fbd0 	bl	8004aa4 <HAL_UART_Init>
 8001304:	b108      	cbz	r0, 800130a <main+0x11a>
 8001306:	b672      	cpsid	i
  while (1)
 8001308:	e7fe      	b.n	8001308 <main+0x118>
  hadc1.Instance = ADC1;
 800130a:	4c72      	ldr	r4, [pc, #456]	@ (80014d4 <main+0x2e4>)
 800130c:	4b72      	ldr	r3, [pc, #456]	@ (80014d8 <main+0x2e8>)
  ADC_MultiModeTypeDef multimode = {0};
 800130e:	9007      	str	r0, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001310:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8001314:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8001318:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  ADC_MultiModeTypeDef multimode = {0};
 800131c:	e9cd 0008 	strd	r0, r0, [sp, #32]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001320:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001324:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001328:	e9c4 000a 	strd	r0, r0, [r4, #40]	@ 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800132c:	8320      	strh	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132e:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001332:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001336:	6360      	str	r0, [r4, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001338:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133c:	f04f 0804 	mov.w	r8, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001340:	4620      	mov	r0, r4
  hadc1.Init.NbrOfConversion = 1;
 8001342:	61e5      	str	r5, [r4, #28]
  hadc1.Instance = ADC1;
 8001344:	6023      	str	r3, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001346:	f8c4 8014 	str.w	r8, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134a:	f000 fdcb 	bl	8001ee4 <HAL_ADC_Init>
 800134e:	b108      	cbz	r0, 8001354 <main+0x164>
 8001350:	b672      	cpsid	i
  while (1)
 8001352:	e7fe      	b.n	8001352 <main+0x162>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001354:	9007      	str	r0, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001356:	a907      	add	r1, sp, #28
 8001358:	4620      	mov	r0, r4
 800135a:	f001 fa39 	bl	80027d0 <HAL_ADCEx_MultiModeConfigChannel>
 800135e:	b108      	cbz	r0, 8001364 <main+0x174>
 8001360:	b672      	cpsid	i
  while (1)
 8001362:	e7fe      	b.n	8001362 <main+0x172>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001364:	495d      	ldr	r1, [pc, #372]	@ (80014dc <main+0x2ec>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001366:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001368:	2306      	movs	r3, #6
 800136a:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 800136e:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001370:	237f      	movs	r3, #127	@ 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001372:	a90a      	add	r1, sp, #40	@ 0x28
 8001374:	4620      	mov	r0, r4
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001376:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800137a:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	f000 ff0c 	bl	8002198 <HAL_ADC_ConfigChannel>
 8001380:	b9a0      	cbnz	r0, 80013ac <main+0x1bc>
  hi2c1.Instance = I2C1;
 8001382:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 80014f4 <main+0x304>
  hi2c1.Init.Timing = 0x10C18DCC;
 8001386:	4a56      	ldr	r2, [pc, #344]	@ (80014e0 <main+0x2f0>)
 8001388:	4b56      	ldr	r3, [pc, #344]	@ (80014e4 <main+0x2f4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138a:	f8c8 0020 	str.w	r0, [r8, #32]
  hi2c1.Init.OwnAddress1 = 0;
 800138e:	e9c8 0502 	strd	r0, r5, [r8, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	e9c8 0004 	strd	r0, r0, [r8, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001396:	e9c8 0006 	strd	r0, r0, [r8, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800139a:	4640      	mov	r0, r8
  hi2c1.Init.Timing = 0x10C18DCC;
 800139c:	e9c8 2300 	strd	r2, r3, [r8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a0:	f001 feea 	bl	8003178 <HAL_I2C_Init>
 80013a4:	4601      	mov	r1, r0
 80013a6:	b118      	cbz	r0, 80013b0 <main+0x1c0>
 80013a8:	b672      	cpsid	i
  while (1)
 80013aa:	e7fe      	b.n	80013aa <main+0x1ba>
 80013ac:	b672      	cpsid	i
 80013ae:	e7fe      	b.n	80013ae <main+0x1be>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013b0:	4640      	mov	r0, r8
 80013b2:	f002 f837 	bl	8003424 <HAL_I2CEx_ConfigAnalogFilter>
 80013b6:	4601      	mov	r1, r0
 80013b8:	b108      	cbz	r0, 80013be <main+0x1ce>
 80013ba:	b672      	cpsid	i
  while (1)
 80013bc:	e7fe      	b.n	80013bc <main+0x1cc>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013be:	4640      	mov	r0, r8
 80013c0:	f002 f85a 	bl	8003478 <HAL_I2CEx_ConfigDigitalFilter>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b108      	cbz	r0, 80013cc <main+0x1dc>
 80013c8:	b672      	cpsid	i
  while (1)
 80013ca:	e7fe      	b.n	80013ca <main+0x1da>
  huart3.Instance = USART3;
 80013cc:	4846      	ldr	r0, [pc, #280]	@ (80014e8 <main+0x2f8>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013da:	6103      	str	r3, [r0, #16]
  huart3.Instance = USART3;
 80013dc:	4b43      	ldr	r3, [pc, #268]	@ (80014ec <main+0x2fc>)
  huart3.Init.BaudRate = 115200;
 80013de:	6047      	str	r7, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e0:	6146      	str	r6, [r0, #20]
  huart3.Instance = USART3;
 80013e2:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013e4:	f003 fb5e 	bl	8004aa4 <HAL_UART_Init>
 80013e8:	4605      	mov	r5, r0
 80013ea:	b108      	cbz	r0, 80013f0 <main+0x200>
 80013ec:	b672      	cpsid	i
  while (1)
 80013ee:	e7fe      	b.n	80013ee <main+0x1fe>
  ssd1306_Init();   // INICIALIZA LA PANTALLA OLED
 80013f0:	f000 f8e0 	bl	80015b4 <ssd1306_Init>
	  raw = HAL_ADC_GetValue(&hadc1)*0.07; // ESCALA EL DATO LEIDO EN EL SENSOR
 80013f4:	f20f 0bc0 	addw	fp, pc, #192	@ 0xc0
 80013f8:	e9db ab00 	ldrd	sl, fp, [fp]
 80013fc:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 80014f8 <main+0x308>
	  sprintf(msg, "%hu\r\n", raw);//IMPRIME EL MENSAJE LEIDO
 8001400:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 80014fc <main+0x30c>
 8001404:	af10      	add	r7, sp, #64	@ 0x40
 8001406:	e037      	b.n	8001478 <main+0x288>
	  HAL_ADC_Start(&hadc1); //INICIALIZACION DEL COVERTIDOR
 8001408:	4620      	mov	r0, r4
 800140a:	f001 f975 	bl	80026f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); //ESPERA A QUE ADC COMPLETE LA CONVERSIÓN
 800140e:	f04f 31ff 	mov.w	r1, #4294967295
 8001412:	4620      	mov	r0, r4
 8001414:	f000 fe42 	bl	800209c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1)*0.07; // ESCALA EL DATO LEIDO EN EL SENSOR
 8001418:	4620      	mov	r0, r4
 800141a:	f000 feb9 	bl	8002190 <HAL_ADC_GetValue>
 800141e:	f7ff f871 	bl	8000504 <__aeabi_ui2d>
 8001422:	465b      	mov	r3, fp
 8001424:	4652      	mov	r2, sl
 8001426:	f7ff f8e7 	bl	80005f8 <__aeabi_dmul>
 800142a:	f7ff faf7 	bl	8000a1c <__aeabi_d2uiz>
	  sprintf(msg, "%hu\r\n", raw);//IMPRIME EL MENSAJE LEIDO
 800142e:	b286      	uxth	r6, r0
 8001430:	4632      	mov	r2, r6
 8001432:	4641      	mov	r1, r8
 8001434:	a80a      	add	r0, sp, #40	@ 0x28
 8001436:	f003 fc9d 	bl	8004d74 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);//TRANSMITE EL MENSAJE LEIDO POR USART3
 800143a:	a80a      	add	r0, sp, #40	@ 0x28
 800143c:	f7fe fec8 	bl	80001d0 <strlen>
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	b282      	uxth	r2, r0
 8001446:	a90a      	add	r1, sp, #40	@ 0x28
 8001448:	4827      	ldr	r0, [pc, #156]	@ (80014e8 <main+0x2f8>)
 800144a:	f003 f817 	bl	800447c <HAL_UART_Transmit>
	  ssd1306_Fill(Black);      // RELLENA LA PANTALLA CON NEGRO
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f858 	bl	8001504 <ssd1306_Fill>
	  ssd1306_SetCursor(10, 20); // POSICIONA EL CURSOR EN (10,20)
 8001454:	2114      	movs	r1, #20
 8001456:	200a      	movs	r0, #10
 8001458:	f000 fb36 	bl	8001ac8 <ssd1306_SetCursor>
	  sprintf(msg, "%hu\r\n", raw);// IMPRIME EL VALOR DE LA VARIABLE
 800145c:	4632      	mov	r2, r6
 800145e:	4641      	mov	r1, r8
 8001460:	a80a      	add	r0, sp, #40	@ 0x28
 8001462:	f003 fc87 	bl	8004d74 <siprintf>
	  ssd1306_WriteString(msg, Font_11x18, White);  // ESCRIBE EL MENSAJE EN PANTALLA
 8001466:	2301      	movs	r3, #1
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	a80a      	add	r0, sp, #40	@ 0x28
 800146c:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8001470:	f000 fb0c 	bl	8001a8c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();    // ACTUALIZA LA PANTALLA PARA MOSTRAR EL CONTENIDO
 8001474:	f000 f852 	bl	800151c <ssd1306_UpdateScreen>
	  tecla = Keypad_Get_Char();
 8001478:	f7ff fc68 	bl	8000d4c <Keypad_Get_Char>
 800147c:	4a1c      	ldr	r2, [pc, #112]	@ (80014f0 <main+0x300>)
 800147e:	4603      	mov	r3, r0
 8001480:	7013      	strb	r3, [r2, #0]
	  	 		if (atoi(clave) == 123) { //VERIFICA QUE CLAVE SEA IGUAL A 123, ATOI CONVIERTE LA CADENA A NUMEROS
 8001482:	a807      	add	r0, sp, #28
	  	 	if (tecla != 0) {
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0bf      	beq.n	8001408 <main+0x218>
	  	 		if (indice < sizeof(clave)) { // VERIFICA QUE INDICE SEA MENOR QUE CLAVE
 8001488:	2d03      	cmp	r5, #3
 800148a:	dc09      	bgt.n	80014a0 <main+0x2b0>
	  	 		        indice++;                       // INCREMENRTA EL INDICE
 800148c:	3501      	adds	r5, #1
	  	 		        clave[indice] = tecla;         // ALMACENA LA TECLA EN LA CADENA
 800148e:	f807 3c24 	strb.w	r3, [r7, #-36]
	  	 		        clave[indice] = '\0';          // TTERMINA LA CADENA CON UN NULO
 8001492:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8001496:	eb0d 0703 	add.w	r7, sp, r3
 800149a:	2300      	movs	r3, #0
 800149c:	f807 3c24 	strb.w	r3, [r7, #-36]
	  	 		if (atoi(clave) == 123) { //VERIFICA QUE CLAVE SEA IGUAL A 123, ATOI CONVIERTE LA CADENA A NUMEROS
 80014a0:	f003 fb32 	bl	8004b08 <atoi>
 80014a4:	287b      	cmp	r0, #123	@ 0x7b
 80014a6:	d1af      	bne.n	8001408 <main+0x218>
	  	 				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //ENCIENDE EL LED VERDE AL INGRESAR LA CLAVE CORRECTA
 80014a8:	2120      	movs	r1, #32
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ae:	f001 fb95 	bl	8002bdc <HAL_GPIO_TogglePin>
 80014b2:	e7a9      	b.n	8001408 <main+0x218>
 80014b4:	f3af 8000 	nop.w
 80014b8:	1eb851ec 	.word	0x1eb851ec
 80014bc:	3fb1eb85 	.word	0x3fb1eb85
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000400 	.word	0x48000400
 80014c8:	48000800 	.word	0x48000800
 80014cc:	20000104 	.word	0x20000104
 80014d0:	40004400 	.word	0x40004400
 80014d4:	200001e0 	.word	0x200001e0
 80014d8:	50040000 	.word	0x50040000
 80014dc:	14f00020 	.word	0x14f00020
 80014e0:	40005400 	.word	0x40005400
 80014e4:	10c18dcc 	.word	0x10c18dcc
 80014e8:	2000007c 	.word	0x2000007c
 80014ec:	40004800 	.word	0x40004800
 80014f0:	20000079 	.word	0x20000079
 80014f4:	2000018c 	.word	0x2000018c
 80014f8:	08005578 	.word	0x08005578
 80014fc:	08005570 	.word	0x08005570

08001500 <Error_Handler>:
 8001500:	b672      	cpsid	i
  while (1)
 8001502:	e7fe      	b.n	8001502 <Error_Handler+0x2>

08001504 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001504:	2800      	cmp	r0, #0
 8001506:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150a:	4803      	ldr	r0, [pc, #12]	@ (8001518 <ssd1306_Fill+0x14>)
 800150c:	bf14      	ite	ne
 800150e:	21ff      	movne	r1, #255	@ 0xff
 8001510:	2100      	moveq	r1, #0
 8001512:	f003 bc69 	b.w	8004de8 <memset>
 8001516:	bf00      	nop
 8001518:	2000024c 	.word	0x2000024c

0800151c <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800151c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001520:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80015b0 <ssd1306_UpdateScreen+0x94>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001524:	4f21      	ldr	r7, [pc, #132]	@ (80015ac <ssd1306_UpdateScreen+0x90>)
void ssd1306_UpdateScreen(void) {
 8001526:	b086      	sub	sp, #24
 8001528:	25b0      	movs	r5, #176	@ 0xb0
 800152a:	f10d 0817 	add.w	r8, sp, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800152e:	f04f 0a00 	mov.w	sl, #0
 8001532:	2401      	movs	r4, #1
 8001534:	f04f 36ff 	mov.w	r6, #4294967295
 8001538:	4623      	mov	r3, r4
 800153a:	2200      	movs	r2, #0
 800153c:	2178      	movs	r1, #120	@ 0x78
 800153e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001542:	f8cd 8000 	str.w	r8, [sp]
 8001546:	4638      	mov	r0, r7
 8001548:	f88d 5017 	strb.w	r5, [sp, #23]
 800154c:	f001 fe6e 	bl	800322c <HAL_I2C_Mem_Write>
 8001550:	4623      	mov	r3, r4
 8001552:	2200      	movs	r2, #0
 8001554:	2178      	movs	r1, #120	@ 0x78
 8001556:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800155a:	f8cd 8000 	str.w	r8, [sp]
 800155e:	4638      	mov	r0, r7
 8001560:	f88d a017 	strb.w	sl, [sp, #23]
 8001564:	f001 fe62 	bl	800322c <HAL_I2C_Mem_Write>
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001568:	f04f 0c10 	mov.w	ip, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800156c:	4623      	mov	r3, r4
 800156e:	2200      	movs	r2, #0
 8001570:	2178      	movs	r1, #120	@ 0x78
 8001572:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001576:	f8cd 8000 	str.w	r8, [sp]
 800157a:	4638      	mov	r0, r7
 800157c:	f88d c017 	strb.w	ip, [sp, #23]
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001580:	4425      	add	r5, r4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001582:	f001 fe53 	bl	800322c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800158c:	f8cd 9000 	str.w	r9, [sp]
 8001590:	4623      	mov	r3, r4
 8001592:	2240      	movs	r2, #64	@ 0x40
 8001594:	2178      	movs	r1, #120	@ 0x78
 8001596:	4638      	mov	r0, r7
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001598:	b2ed      	uxtb	r5, r5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800159a:	f001 fe47 	bl	800322c <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800159e:	2db8      	cmp	r5, #184	@ 0xb8
 80015a0:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 80015a4:	d1c5      	bne.n	8001532 <ssd1306_UpdateScreen+0x16>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 80015a6:	b006      	add	sp, #24
 80015a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ac:	2000018c 	.word	0x2000018c
 80015b0:	2000024c 	.word	0x2000024c

080015b4 <ssd1306_Init>:
void ssd1306_Init(void) {
 80015b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    HAL_Delay(100);
 80015b8:	2064      	movs	r0, #100	@ 0x64
void ssd1306_Init(void) {
 80015ba:	b086      	sub	sp, #24
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015bc:	4fc2      	ldr	r7, [pc, #776]	@ (80018c8 <ssd1306_Init+0x314>)
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
 80015be:	f8df 9310 	ldr.w	r9, [pc, #784]	@ 80018d0 <ssd1306_Init+0x31c>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015c2:	2401      	movs	r4, #1
        SSD1306.DisplayOn = 0;
 80015c4:	2500      	movs	r5, #0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015c6:	f04f 36ff 	mov.w	r6, #4294967295
 80015ca:	f10d 0817 	add.w	r8, sp, #23
    HAL_Delay(100);
 80015ce:	f000 fc77 	bl	8001ec0 <HAL_Delay>
        SSD1306.DisplayOn = 0;
 80015d2:	20ae      	movs	r0, #174	@ 0xae
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015d4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015d8:	f8cd 8000 	str.w	r8, [sp]
 80015dc:	4623      	mov	r3, r4
 80015de:	462a      	mov	r2, r5
 80015e0:	f88d 0017 	strb.w	r0, [sp, #23]
        SSD1306.DisplayOn = 0;
 80015e4:	f889 5005 	strb.w	r5, [r9, #5]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015e8:	2178      	movs	r1, #120	@ 0x78
 80015ea:	4638      	mov	r0, r7
 80015ec:	f001 fe1e 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80015f0:	f04f 0a20 	mov.w	sl, #32
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015f4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015f8:	4623      	mov	r3, r4
 80015fa:	462a      	mov	r2, r5
 80015fc:	f8cd 8000 	str.w	r8, [sp]
 8001600:	2178      	movs	r1, #120	@ 0x78
 8001602:	4638      	mov	r0, r7
 8001604:	f88d a017 	strb.w	sl, [sp, #23]
 8001608:	f001 fe10 	bl	800322c <HAL_I2C_Mem_Write>
 800160c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001610:	4623      	mov	r3, r4
 8001612:	462a      	mov	r2, r5
 8001614:	f8cd 8000 	str.w	r8, [sp]
 8001618:	2178      	movs	r1, #120	@ 0x78
 800161a:	4638      	mov	r0, r7
 800161c:	f88d 5017 	strb.w	r5, [sp, #23]
 8001620:	f001 fe04 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001624:	20b0      	movs	r0, #176	@ 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001626:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800162a:	4623      	mov	r3, r4
 800162c:	462a      	mov	r2, r5
 800162e:	f88d 0017 	strb.w	r0, [sp, #23]
 8001632:	f8cd 8000 	str.w	r8, [sp]
 8001636:	2178      	movs	r1, #120	@ 0x78
 8001638:	4638      	mov	r0, r7
 800163a:	f001 fdf7 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800163e:	20c8      	movs	r0, #200	@ 0xc8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001640:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001644:	4623      	mov	r3, r4
 8001646:	462a      	mov	r2, r5
 8001648:	f88d 0017 	strb.w	r0, [sp, #23]
 800164c:	f8cd 8000 	str.w	r8, [sp]
 8001650:	2178      	movs	r1, #120	@ 0x78
 8001652:	4638      	mov	r0, r7
 8001654:	f001 fdea 	bl	800322c <HAL_I2C_Mem_Write>
 8001658:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800165c:	4623      	mov	r3, r4
 800165e:	462a      	mov	r2, r5
 8001660:	f8cd 8000 	str.w	r8, [sp]
 8001664:	2178      	movs	r1, #120	@ 0x78
 8001666:	4638      	mov	r0, r7
 8001668:	f88d 5017 	strb.w	r5, [sp, #23]
 800166c:	f001 fdde 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001670:	2010      	movs	r0, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001672:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001676:	4623      	mov	r3, r4
 8001678:	462a      	mov	r2, r5
 800167a:	f88d 0017 	strb.w	r0, [sp, #23]
 800167e:	f8cd 8000 	str.w	r8, [sp]
 8001682:	2178      	movs	r1, #120	@ 0x78
 8001684:	4638      	mov	r0, r7
 8001686:	f001 fdd1 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800168a:	2040      	movs	r0, #64	@ 0x40
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800168c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001690:	4623      	mov	r3, r4
 8001692:	462a      	mov	r2, r5
 8001694:	f88d 0017 	strb.w	r0, [sp, #23]
 8001698:	f8cd 8000 	str.w	r8, [sp]
 800169c:	2178      	movs	r1, #120	@ 0x78
 800169e:	4638      	mov	r0, r7
 80016a0:	f001 fdc4 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80016a4:	2081      	movs	r0, #129	@ 0x81
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016a6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016aa:	4623      	mov	r3, r4
 80016ac:	462a      	mov	r2, r5
 80016ae:	f88d 0017 	strb.w	r0, [sp, #23]
 80016b2:	f8cd 8000 	str.w	r8, [sp]
 80016b6:	2178      	movs	r1, #120	@ 0x78
 80016b8:	4638      	mov	r0, r7
 80016ba:	f001 fdb7 	bl	800322c <HAL_I2C_Mem_Write>
 80016be:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016c2:	4623      	mov	r3, r4
 80016c4:	462a      	mov	r2, r5
 80016c6:	f8cd 8000 	str.w	r8, [sp]
 80016ca:	2178      	movs	r1, #120	@ 0x78
 80016cc:	4638      	mov	r0, r7
 80016ce:	f88d 6017 	strb.w	r6, [sp, #23]
 80016d2:	f001 fdab 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80016d6:	20a1      	movs	r0, #161	@ 0xa1
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016d8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016dc:	4623      	mov	r3, r4
 80016de:	462a      	mov	r2, r5
 80016e0:	f88d 0017 	strb.w	r0, [sp, #23]
 80016e4:	f8cd 8000 	str.w	r8, [sp]
 80016e8:	2178      	movs	r1, #120	@ 0x78
 80016ea:	4638      	mov	r0, r7
 80016ec:	f001 fd9e 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA6); //--set normal color
 80016f0:	20a6      	movs	r0, #166	@ 0xa6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016f2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016f6:	4623      	mov	r3, r4
 80016f8:	462a      	mov	r2, r5
 80016fa:	f88d 0017 	strb.w	r0, [sp, #23]
 80016fe:	f8cd 8000 	str.w	r8, [sp]
 8001702:	2178      	movs	r1, #120	@ 0x78
 8001704:	4638      	mov	r0, r7
 8001706:	f001 fd91 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800170a:	20a8      	movs	r0, #168	@ 0xa8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800170c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001710:	4623      	mov	r3, r4
 8001712:	462a      	mov	r2, r5
 8001714:	f88d 0017 	strb.w	r0, [sp, #23]
 8001718:	f8cd 8000 	str.w	r8, [sp]
 800171c:	2178      	movs	r1, #120	@ 0x78
 800171e:	4638      	mov	r0, r7
 8001720:	f001 fd84 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x3F); //
 8001724:	203f      	movs	r0, #63	@ 0x3f
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001726:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800172a:	4623      	mov	r3, r4
 800172c:	462a      	mov	r2, r5
 800172e:	f88d 0017 	strb.w	r0, [sp, #23]
 8001732:	f8cd 8000 	str.w	r8, [sp]
 8001736:	2178      	movs	r1, #120	@ 0x78
 8001738:	4638      	mov	r0, r7
 800173a:	f001 fd77 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800173e:	20a4      	movs	r0, #164	@ 0xa4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001740:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001744:	4623      	mov	r3, r4
 8001746:	462a      	mov	r2, r5
 8001748:	f88d 0017 	strb.w	r0, [sp, #23]
 800174c:	f8cd 8000 	str.w	r8, [sp]
 8001750:	2178      	movs	r1, #120	@ 0x78
 8001752:	4638      	mov	r0, r7
 8001754:	f001 fd6a 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001758:	20d3      	movs	r0, #211	@ 0xd3
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800175a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800175e:	4623      	mov	r3, r4
 8001760:	462a      	mov	r2, r5
 8001762:	f88d 0017 	strb.w	r0, [sp, #23]
 8001766:	f8cd 8000 	str.w	r8, [sp]
 800176a:	2178      	movs	r1, #120	@ 0x78
 800176c:	4638      	mov	r0, r7
 800176e:	f001 fd5d 	bl	800322c <HAL_I2C_Mem_Write>
 8001772:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001776:	4623      	mov	r3, r4
 8001778:	462a      	mov	r2, r5
 800177a:	f8cd 8000 	str.w	r8, [sp]
 800177e:	2178      	movs	r1, #120	@ 0x78
 8001780:	4638      	mov	r0, r7
 8001782:	f88d 5017 	strb.w	r5, [sp, #23]
 8001786:	f001 fd51 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800178a:	20d5      	movs	r0, #213	@ 0xd5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800178c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001790:	4623      	mov	r3, r4
 8001792:	462a      	mov	r2, r5
 8001794:	f88d 0017 	strb.w	r0, [sp, #23]
 8001798:	f8cd 8000 	str.w	r8, [sp]
 800179c:	2178      	movs	r1, #120	@ 0x78
 800179e:	4638      	mov	r0, r7
 80017a0:	f001 fd44 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017a4:	20f0      	movs	r0, #240	@ 0xf0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80017a6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80017aa:	4623      	mov	r3, r4
 80017ac:	462a      	mov	r2, r5
 80017ae:	f88d 0017 	strb.w	r0, [sp, #23]
 80017b2:	f8cd 8000 	str.w	r8, [sp]
 80017b6:	2178      	movs	r1, #120	@ 0x78
 80017b8:	4638      	mov	r0, r7
 80017ba:	f001 fd37 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017be:	20d9      	movs	r0, #217	@ 0xd9
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80017c0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80017c4:	4623      	mov	r3, r4
 80017c6:	462a      	mov	r2, r5
 80017c8:	f88d 0017 	strb.w	r0, [sp, #23]
 80017cc:	f8cd 8000 	str.w	r8, [sp]
 80017d0:	2178      	movs	r1, #120	@ 0x78
 80017d2:	4638      	mov	r0, r7
 80017d4:	f001 fd2a 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x22); //
 80017d8:	2022      	movs	r0, #34	@ 0x22
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80017da:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80017de:	4623      	mov	r3, r4
 80017e0:	462a      	mov	r2, r5
 80017e2:	f88d 0017 	strb.w	r0, [sp, #23]
 80017e6:	f8cd 8000 	str.w	r8, [sp]
 80017ea:	2178      	movs	r1, #120	@ 0x78
 80017ec:	4638      	mov	r0, r7
 80017ee:	f001 fd1d 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017f2:	20da      	movs	r0, #218	@ 0xda
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80017f4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80017f8:	4623      	mov	r3, r4
 80017fa:	462a      	mov	r2, r5
 80017fc:	f88d 0017 	strb.w	r0, [sp, #23]
 8001800:	f8cd 8000 	str.w	r8, [sp]
 8001804:	2178      	movs	r1, #120	@ 0x78
 8001806:	4638      	mov	r0, r7
 8001808:	f001 fd10 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x12);
 800180c:	2012      	movs	r0, #18
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800180e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001812:	4623      	mov	r3, r4
 8001814:	462a      	mov	r2, r5
 8001816:	f88d 0017 	strb.w	r0, [sp, #23]
 800181a:	f8cd 8000 	str.w	r8, [sp]
 800181e:	2178      	movs	r1, #120	@ 0x78
 8001820:	4638      	mov	r0, r7
 8001822:	f001 fd03 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001826:	20db      	movs	r0, #219	@ 0xdb
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001828:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800182c:	4623      	mov	r3, r4
 800182e:	462a      	mov	r2, r5
 8001830:	f88d 0017 	strb.w	r0, [sp, #23]
 8001834:	f8cd 8000 	str.w	r8, [sp]
 8001838:	2178      	movs	r1, #120	@ 0x78
 800183a:	4638      	mov	r0, r7
 800183c:	f001 fcf6 	bl	800322c <HAL_I2C_Mem_Write>
 8001840:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001844:	4623      	mov	r3, r4
 8001846:	462a      	mov	r2, r5
 8001848:	f8cd 8000 	str.w	r8, [sp]
 800184c:	2178      	movs	r1, #120	@ 0x78
 800184e:	4638      	mov	r0, r7
 8001850:	f88d a017 	strb.w	sl, [sp, #23]
 8001854:	f001 fcea 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001858:	208d      	movs	r0, #141	@ 0x8d
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800185a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800185e:	4623      	mov	r3, r4
 8001860:	462a      	mov	r2, r5
 8001862:	f88d 0017 	strb.w	r0, [sp, #23]
 8001866:	f8cd 8000 	str.w	r8, [sp]
 800186a:	2178      	movs	r1, #120	@ 0x78
 800186c:	4638      	mov	r0, r7
 800186e:	f001 fcdd 	bl	800322c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x14); //
 8001872:	2014      	movs	r0, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001874:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001878:	4623      	mov	r3, r4
 800187a:	462a      	mov	r2, r5
 800187c:	f88d 0017 	strb.w	r0, [sp, #23]
 8001880:	f8cd 8000 	str.w	r8, [sp]
 8001884:	2178      	movs	r1, #120	@ 0x78
 8001886:	4638      	mov	r0, r7
 8001888:	f001 fcd0 	bl	800322c <HAL_I2C_Mem_Write>
 800188c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001890:	4623      	mov	r3, r4
 8001892:	f8cd 8000 	str.w	r8, [sp]
 8001896:	462a      	mov	r2, r5
 8001898:	4638      	mov	r0, r7
        SSD1306.DisplayOn = 1;
 800189a:	f889 4005 	strb.w	r4, [r9, #5]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800189e:	2178      	movs	r1, #120	@ 0x78
 80018a0:	26af      	movs	r6, #175	@ 0xaf
 80018a2:	f88d 6017 	strb.w	r6, [sp, #23]
 80018a6:	f001 fcc1 	bl	800322c <HAL_I2C_Mem_Write>
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018ae:	4629      	mov	r1, r5
 80018b0:	4806      	ldr	r0, [pc, #24]	@ (80018cc <ssd1306_Init+0x318>)
 80018b2:	f003 fa99 	bl	8004de8 <memset>
    ssd1306_UpdateScreen();
 80018b6:	f7ff fe31 	bl	800151c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 80018ba:	f8c9 5000 	str.w	r5, [r9]
    SSD1306.Initialized = 1;
 80018be:	f889 4004 	strb.w	r4, [r9, #4]
}
 80018c2:	b006      	add	sp, #24
 80018c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c8:	2000018c 	.word	0x2000018c
 80018cc:	2000024c 	.word	0x2000024c
 80018d0:	20000244 	.word	0x20000244

080018d4 <ssd1306_WriteChar>:
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80018d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d8:	b089      	sub	sp, #36	@ 0x24
    if (ch < 32 || ch > 126)
 80018da:	f1a0 0520 	sub.w	r5, r0, #32
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80018de:	ac08      	add	r4, sp, #32
 80018e0:	e904 000e 	stmdb	r4, {r1, r2, r3}
    if (ch < 32 || ch > 126)
 80018e4:	b2eb      	uxtb	r3, r5
 80018e6:	2b5e      	cmp	r3, #94	@ 0x5e
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80018e8:	f89d 9048 	ldrb.w	r9, [sp, #72]	@ 0x48
    if (ch < 32 || ch > 126)
 80018ec:	d870      	bhi.n	80019d0 <ssd1306_WriteChar+0xfc>
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80018ee:	4965      	ldr	r1, [pc, #404]	@ (8001a84 <ssd1306_WriteChar+0x1b0>)
 80018f0:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80018f4:	f8b1 e000 	ldrh.w	lr, [r1]
 80018f8:	eb0e 0304 	add.w	r3, lr, r4
 80018fc:	2b80      	cmp	r3, #128	@ 0x80
 80018fe:	dc67      	bgt.n	80019d0 <ssd1306_WriteChar+0xfc>
 8001900:	f89d 2015 	ldrb.w	r2, [sp, #21]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001904:	8849      	ldrh	r1, [r1, #2]
 8001906:	188b      	adds	r3, r1, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001908:	2b40      	cmp	r3, #64	@ 0x40
 800190a:	dc61      	bgt.n	80019d0 <ssd1306_WriteChar+0xfc>
 800190c:	9b07      	ldr	r3, [sp, #28]
    for(i = 0; i < Font.height; i++) {
 800190e:	2a00      	cmp	r2, #0
 8001910:	d053      	beq.n	80019ba <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001912:	fb02 f605 	mul.w	r6, r2, r5
 8001916:	4432      	add	r2, r6
 8001918:	9d06      	ldr	r5, [sp, #24]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800191a:	f8cd e010 	str.w	lr, [sp, #16]
 800191e:	f106 4600 	add.w	r6, r6, #2147483648	@ 0x80000000
 8001922:	3e01      	subs	r6, #1
 8001924:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8001928:	3d02      	subs	r5, #2
 800192a:	eb05 0b42 	add.w	fp, r5, r2, lsl #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800192e:	4d56      	ldr	r5, [pc, #344]	@ (8001a88 <ssd1306_WriteChar+0x1b4>)
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001930:	f8cd b004 	str.w	fp, [sp, #4]
 8001934:	b2c9      	uxtb	r1, r1
 8001936:	fa5f fa8e 	uxtb.w	sl, lr
 800193a:	461a      	mov	r2, r3
 800193c:	4680      	mov	r8, r0
        b = Font.data[(ch - 32) * Font.height + i];
 800193e:	f836 0f02 	ldrh.w	r0, [r6, #2]!
        for(j = 0; j < Font.width; j++) {
 8001942:	b38c      	cbz	r4, 80019a8 <ssd1306_WriteChar+0xd4>
 8001944:	293f      	cmp	r1, #63	@ 0x3f
 8001946:	4696      	mov	lr, r2
 8001948:	d82d      	bhi.n	80019a6 <ssd1306_WriteChar+0xd2>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800194a:	2301      	movs	r3, #1
 800194c:	f001 0c07 	and.w	ip, r1, #7
 8001950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001954:	ea6f 030c 	mvn.w	r3, ip
 8001958:	08ca      	lsrs	r2, r1, #3
 800195a:	f1b9 0f01 	cmp.w	r9, #1
 800195e:	fa5f fb83 	uxtb.w	fp, r3
 8001962:	ea4f 12c2 	mov.w	r2, r2, lsl #7
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001966:	4653      	mov	r3, sl
 8001968:	d036      	beq.n	80019d8 <ssd1306_WriteChar+0x104>
 800196a:	f1b9 0f00 	cmp.w	r9, #0
 800196e:	d066      	beq.n	8001a3e <ssd1306_WriteChar+0x16a>
        for(j = 0; j < Font.width; j++) {
 8001970:	2700      	movs	r7, #0
 8001972:	9602      	str	r6, [sp, #8]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001974:	0618      	lsls	r0, r3, #24
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001976:	eb03 0602 	add.w	r6, r3, r2
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800197a:	d405      	bmi.n	8001988 <ssd1306_WriteChar+0xb4>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800197c:	f815 c006 	ldrb.w	ip, [r5, r6]
 8001980:	ea0b 0c0c 	and.w	ip, fp, ip
 8001984:	f805 c006 	strb.w	ip, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8001988:	3701      	adds	r7, #1
 800198a:	3301      	adds	r3, #1
 800198c:	42bc      	cmp	r4, r7
 800198e:	b2db      	uxtb	r3, r3
 8001990:	d1f0      	bne.n	8001974 <ssd1306_WriteChar+0xa0>
 8001992:	9e02      	ldr	r6, [sp, #8]
    for(i = 0; i < Font.height; i++) {
 8001994:	9b01      	ldr	r3, [sp, #4]
 8001996:	3101      	adds	r1, #1
 8001998:	42b3      	cmp	r3, r6
 800199a:	b2c9      	uxtb	r1, r1
 800199c:	d04a      	beq.n	8001a34 <ssd1306_WriteChar+0x160>
        b = Font.data[(ch - 32) * Font.height + i];
 800199e:	293f      	cmp	r1, #63	@ 0x3f
 80019a0:	f836 0f02 	ldrh.w	r0, [r6, #2]!
        for(j = 0; j < Font.width; j++) {
 80019a4:	d9d1      	bls.n	800194a <ssd1306_WriteChar+0x76>
 80019a6:	4672      	mov	r2, lr
    for(i = 0; i < Font.height; i++) {
 80019a8:	9b01      	ldr	r3, [sp, #4]
 80019aa:	3101      	adds	r1, #1
 80019ac:	429e      	cmp	r6, r3
 80019ae:	b2c9      	uxtb	r1, r1
 80019b0:	d1c5      	bne.n	800193e <ssd1306_WriteChar+0x6a>
 80019b2:	f8dd e010 	ldr.w	lr, [sp, #16]
 80019b6:	4613      	mov	r3, r2
 80019b8:	4640      	mov	r0, r8
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80019ba:	b113      	cbz	r3, 80019c2 <ssd1306_WriteChar+0xee>
 80019bc:	4403      	add	r3, r0
 80019be:	f813 4c20 	ldrb.w	r4, [r3, #-32]
 80019c2:	4b30      	ldr	r3, [pc, #192]	@ (8001a84 <ssd1306_WriteChar+0x1b0>)
 80019c4:	44a6      	add	lr, r4
 80019c6:	f8a3 e000 	strh.w	lr, [r3]
}
 80019ca:	b009      	add	sp, #36	@ 0x24
 80019cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 80019d0:	2000      	movs	r0, #0
}
 80019d2:	b009      	add	sp, #36	@ 0x24
 80019d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.width; j++) {
 80019d8:	e9cd 6e02 	strd	r6, lr, [sp, #8]
 80019dc:	2700      	movs	r7, #0
 80019de:	e00d      	b.n	80019fc <ssd1306_WriteChar+0x128>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80019e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80019e4:	d105      	bne.n	80019f2 <ssd1306_WriteChar+0x11e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019e6:	f815 e006 	ldrb.w	lr, [r5, r6]
 80019ea:	ea4e 0e0c 	orr.w	lr, lr, ip
 80019ee:	f805 e006 	strb.w	lr, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 80019f2:	3701      	adds	r7, #1
 80019f4:	3301      	adds	r3, #1
 80019f6:	42bc      	cmp	r4, r7
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	d014      	beq.n	8001a26 <ssd1306_WriteChar+0x152>
            if((b << j) & 0x8000)  {
 80019fc:	fa00 f607 	lsl.w	r6, r0, r7
 8001a00:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a04:	eb03 0602 	add.w	r6, r3, r2
            if((b << j) & 0x8000)  {
 8001a08:	d1ea      	bne.n	80019e0 <ssd1306_WriteChar+0x10c>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a0e:	d1f0      	bne.n	80019f2 <ssd1306_WriteChar+0x11e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a10:	f815 e006 	ldrb.w	lr, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8001a14:	3701      	adds	r7, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a16:	ea0b 0e0e 	and.w	lr, fp, lr
        for(j = 0; j < Font.width; j++) {
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	42bc      	cmp	r4, r7
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a1e:	f805 e006 	strb.w	lr, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	d1ea      	bne.n	80019fc <ssd1306_WriteChar+0x128>
 8001a26:	e9dd 6e02 	ldrd	r6, lr, [sp, #8]
    for(i = 0; i < Font.height; i++) {
 8001a2a:	9b01      	ldr	r3, [sp, #4]
 8001a2c:	3101      	adds	r1, #1
 8001a2e:	42b3      	cmp	r3, r6
 8001a30:	b2c9      	uxtb	r1, r1
 8001a32:	d1b4      	bne.n	800199e <ssd1306_WriteChar+0xca>
 8001a34:	4673      	mov	r3, lr
 8001a36:	4640      	mov	r0, r8
 8001a38:	f8dd e010 	ldr.w	lr, [sp, #16]
 8001a3c:	e7bd      	b.n	80019ba <ssd1306_WriteChar+0xe6>
        for(j = 0; j < Font.width; j++) {
 8001a3e:	e9cd 6e02 	strd	r6, lr, [sp, #8]
 8001a42:	464f      	mov	r7, r9
 8001a44:	e00d      	b.n	8001a62 <ssd1306_WriteChar+0x18e>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a4a:	d105      	bne.n	8001a58 <ssd1306_WriteChar+0x184>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a4c:	f815 e006 	ldrb.w	lr, [r5, r6]
 8001a50:	ea0b 0e0e 	and.w	lr, fp, lr
 8001a54:	f805 e006 	strb.w	lr, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8001a58:	3701      	adds	r7, #1
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	42a7      	cmp	r7, r4
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	d0e1      	beq.n	8001a26 <ssd1306_WriteChar+0x152>
            if((b << j) & 0x8000)  {
 8001a62:	fa00 f607 	lsl.w	r6, r0, r7
 8001a66:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a6a:	eb03 0602 	add.w	r6, r3, r2
            if((b << j) & 0x8000)  {
 8001a6e:	d1ea      	bne.n	8001a46 <ssd1306_WriteChar+0x172>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a74:	d1f0      	bne.n	8001a58 <ssd1306_WriteChar+0x184>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a76:	f815 e006 	ldrb.w	lr, [r5, r6]
 8001a7a:	ea4e 0e0c 	orr.w	lr, lr, ip
 8001a7e:	f805 e006 	strb.w	lr, [r5, r6]
 8001a82:	e7e9      	b.n	8001a58 <ssd1306_WriteChar+0x184>
 8001a84:	20000244 	.word	0x20000244
 8001a88:	2000024c 	.word	0x2000024c

08001a8c <ssd1306_WriteString>:
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	4605      	mov	r5, r0
 8001a90:	b086      	sub	sp, #24
    while (*str) {
 8001a92:	7800      	ldrb	r0, [r0, #0]
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a94:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
 8001a98:	ac03      	add	r4, sp, #12
 8001a9a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    while (*str) {
 8001a9e:	b918      	cbnz	r0, 8001aa8 <ssd1306_WriteString+0x1c>
 8001aa0:	e00d      	b.n	8001abe <ssd1306_WriteString+0x32>
 8001aa2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001aa6:	b150      	cbz	r0, 8001abe <ssd1306_WriteString+0x32>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001aa8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001aac:	9600      	str	r6, [sp, #0]
 8001aae:	f7ff ff11 	bl	80018d4 <ssd1306_WriteChar>
 8001ab2:	782b      	ldrb	r3, [r5, #0]
 8001ab4:	4298      	cmp	r0, r3
 8001ab6:	d0f4      	beq.n	8001aa2 <ssd1306_WriteString+0x16>
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	b006      	add	sp, #24
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
    return *str;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	b006      	add	sp, #24
 8001ac4:	bd70      	pop	{r4, r5, r6, pc}
 8001ac6:	bf00      	nop

08001ac8 <ssd1306_SetCursor>:
    SSD1306.CurrentX = x;
 8001ac8:	4b01      	ldr	r3, [pc, #4]	@ (8001ad0 <ssd1306_SetCursor+0x8>)
 8001aca:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8001acc:	8059      	strh	r1, [r3, #2]
}
 8001ace:	4770      	bx	lr
 8001ad0:	20000244 	.word	0x20000244

08001ad4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_MspInit+0x2c>)
 8001ad6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	661a      	str	r2, [r3, #96]	@ 0x60
 8001ade:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8001ae0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	f002 0201 	and.w	r2, r2, #1
 8001ae6:	9200      	str	r2, [sp, #0]
 8001ae8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001aec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001af0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afc:	b002      	add	sp, #8
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000
 8001b04:	00000000 	.word	0x00000000

08001b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b10:	2288      	movs	r2, #136	@ 0x88
 8001b12:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001b18:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001b1c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b1e:	f003 f963 	bl	8004de8 <memset>
  if(hadc->Instance==ADC1)
 8001b22:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <HAL_ADC_MspInit+0xa8>)
 8001b24:	6822      	ldr	r2, [r4, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b2a:	b02a      	add	sp, #168	@ 0xa8
 8001b2c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b36:	2302      	movs	r3, #2
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b38:	9108      	str	r1, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b3a:	9226      	str	r2, [sp, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b3c:	2101      	movs	r1, #1
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b3e:	2208      	movs	r2, #8
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b40:	e9cd 3109 	strd	r3, r1, [sp, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b44:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b46:	2107      	movs	r1, #7
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4c:	a808      	add	r0, sp, #32
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b4e:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b52:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b56:	f002 fa6b 	bl	8004030 <HAL_RCCEx_PeriphCLKConfig>
 8001b5a:	b9f8      	cbnz	r0, 8001b9c <HAL_ADC_MspInit+0x94>
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b5c:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_ADC_MspInit+0xac>)
 8001b5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b64:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b68:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001b6c:	9200      	str	r2, [sp, #0]
 8001b6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b7a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8001ba8 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b8c:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f000 fef2 	bl	800297c <HAL_GPIO_Init>
}
 8001b98:	b02a      	add	sp, #168	@ 0xa8
 8001b9a:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001b9c:	f7ff fcb0 	bl	8001500 <Error_Handler>
 8001ba0:	e7dc      	b.n	8001b5c <HAL_ADC_MspInit+0x54>
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	00000001 	.word	0x00000001
 8001bac:	0000000b 	.word	0x0000000b
 8001bb0:	50040000 	.word	0x50040000
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	4604      	mov	r4, r0
 8001bbc:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	2288      	movs	r2, #136	@ 0x88
 8001bc2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001bc8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001bcc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bce:	f003 f90b 	bl	8004de8 <memset>
  if(hi2c->Instance==I2C1)
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_I2C_MspInit+0x80>)
 8001bd4:	6822      	ldr	r2, [r4, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bda:	b02a      	add	sp, #168	@ 0xa8
 8001bdc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bde:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001be2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f002 fa24 	bl	8004030 <HAL_RCCEx_PeriphCLKConfig>
 8001be8:	bb18      	cbnz	r0, 8001c32 <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4c14      	ldr	r4, [pc, #80]	@ (8001c3c <HAL_I2C_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	4814      	ldr	r0, [pc, #80]	@ (8001c40 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001bf6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bfe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001c02:	2312      	movs	r3, #18
 8001c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c12:	2304      	movs	r3, #4
 8001c14:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f000 feb0 	bl	800297c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c22:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001c24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	9b01      	ldr	r3, [sp, #4]
}
 8001c2e:	b02a      	add	sp, #168	@ 0xa8
 8001c30:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001c32:	f7ff fc65 	bl	8001500 <Error_Handler>
 8001c36:	e7d8      	b.n	8001bea <HAL_I2C_MspInit+0x32>
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	48000400 	.word	0x48000400
 8001c44:	00000000 	.word	0x00000000

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	b0ac      	sub	sp, #176	@ 0xb0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c50:	2288      	movs	r2, #136	@ 0x88
 8001c52:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001c58:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001c5c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5e:	f003 f8c3 	bl	8004de8 <memset>
  if(huart->Instance==USART2)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <HAL_UART_MspInit+0xf8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d004      	beq.n	8001c74 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001c6a:	4a36      	ldr	r2, [pc, #216]	@ (8001d44 <HAL_UART_MspInit+0xfc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d02c      	beq.n	8001cca <HAL_UART_MspInit+0x82>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c70:	b02c      	add	sp, #176	@ 0xb0
 8001c72:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c74:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c76:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c78:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7a:	f002 f9d9 	bl	8004030 <HAL_RCCEx_PeriphCLKConfig>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d14c      	bne.n	8001d1c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c82:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <HAL_UART_MspInit+0x100>)
 8001c84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c86:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001c8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c8e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001c92:	9200      	str	r2, [sp, #0]
 8001c94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c98:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8001d28 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ca4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001ca8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8001d30 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cba:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f000 fe5b 	bl	800297c <HAL_GPIO_Init>
}
 8001cc6:	b02c      	add	sp, #176	@ 0xb0
 8001cc8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cca:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ccc:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cce:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd0:	f002 f9ae 	bl	8004030 <HAL_RCCEx_PeriphCLKConfig>
 8001cd4:	bb28      	cbnz	r0, 8001d22 <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <HAL_UART_MspInit+0x100>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	481c      	ldr	r0, [pc, #112]	@ (8001d4c <HAL_UART_MspInit+0x104>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cda:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cdc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001ce0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ce2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ce4:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001ce8:	9202      	str	r2, [sp, #8]
 8001cea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cee:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8001d38 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	f042 0204 	orr.w	r2, r2, #4
 8001cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001cfe:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8001d30 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d0a:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d0c:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d10:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d12:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	f000 fe32 	bl	800297c <HAL_GPIO_Init>
}
 8001d18:	b02c      	add	sp, #176	@ 0xb0
 8001d1a:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001d1c:	f7ff fbf0 	bl	8001500 <Error_Handler>
 8001d20:	e7af      	b.n	8001c82 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001d22:	f7ff fbed 	bl	8001500 <Error_Handler>
 8001d26:	e7d6      	b.n	8001cd6 <HAL_UART_MspInit+0x8e>
 8001d28:	0000000c 	.word	0x0000000c
 8001d2c:	00000002 	.word	0x00000002
 8001d30:	00000000 	.word	0x00000000
 8001d34:	00000003 	.word	0x00000003
 8001d38:	00000030 	.word	0x00000030
 8001d3c:	00000002 	.word	0x00000002
 8001d40:	40004400 	.word	0x40004400
 8001d44:	40004800 	.word	0x40004800
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	48000800 	.word	0x48000800

08001d50 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler>
 8001d52:	bf00      	nop

08001d54 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <HardFault_Handler>
 8001d56:	bf00      	nop

08001d58 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <MemManage_Handler>
 8001d5a:	bf00      	nop

08001d5c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <BusFault_Handler>
 8001d5e:	bf00      	nop

08001d60 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <UsageFault_Handler>
 8001d62:	bf00      	nop

08001d64 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop

08001d6c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d70:	f000 b894 	b.w	8001e9c <HAL_IncTick>

08001d74 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d76:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001d78:	680b      	ldr	r3, [r1, #0]
{
 8001d7a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4c0c      	ldr	r4, [pc, #48]	@ (8001db0 <_sbrk+0x3c>)
 8001d7e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001d80:	b12b      	cbz	r3, 8001d8e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4418      	add	r0, r3
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d807      	bhi.n	8001d98 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d88:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <_sbrk+0x40>)
 8001d90:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4418      	add	r0, r3
 8001d94:	4290      	cmp	r0, r2
 8001d96:	d9f7      	bls.n	8001d88 <_sbrk+0x14>
    errno = ENOMEM;
 8001d98:	f003 f83e 	bl	8004e18 <__errno>
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd10      	pop	{r4, pc}
 8001da8:	2000064c 	.word	0x2000064c
 8001dac:	20018000 	.word	0x20018000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	200007a0 	.word	0x200007a0

08001db8 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001db8:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <SystemInit+0x10>)
 8001dba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001dbe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd0:	f7ff fff2 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dd6:	490d      	ldr	r1, [pc, #52]	@ (8001e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <LoopForever+0xe>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dec:	4c0a      	ldr	r4, [pc, #40]	@ (8001e18 <LoopForever+0x16>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f003 f813 	bl	8004e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dfe:	f7ff f9f7 	bl	80011f0 <main>

08001e02 <LoopForever>:

LoopForever:
    b LoopForever
 8001e02:	e7fe      	b.n	8001e02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e10:	0800647c 	.word	0x0800647c
  ldr r2, =_sbss
 8001e14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e18:	2000079c 	.word	0x2000079c

08001e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC1_2_IRQHandler>
	...

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e22:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <HAL_InitTick+0x40>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b90b      	cbnz	r3, 8001e2c <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e28:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e2c:	490d      	ldr	r1, [pc, #52]	@ (8001e64 <HAL_InitTick+0x44>)
 8001e2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e32:	4605      	mov	r5, r0
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	6808      	ldr	r0, [r1, #0]
 8001e3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e3e:	f000 fd83 	bl	8002948 <HAL_SYSTICK_Config>
 8001e42:	4604      	mov	r4, r0
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d1ef      	bne.n	8001e28 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e48:	2d0f      	cmp	r5, #15
 8001e4a:	d8ed      	bhi.n	8001e28 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f000 fd3c 	bl	80028d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <HAL_InitTick+0x48>)
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	601d      	str	r5, [r3, #0]
}
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}
 8001e60:	20000004 	.word	0x20000004
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000008 	.word	0x20000008

08001e6c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <HAL_Init+0x2c>)
 8001e6e:	6813      	ldr	r3, [r2, #0]
 8001e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8001e74:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e76:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7a:	f000 fd17 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff ffce 	bl	8001e20 <HAL_InitTick>
 8001e84:	b110      	cbz	r0, 8001e8c <HAL_Init+0x20>
    status = HAL_ERROR;
 8001e86:	2401      	movs	r4, #1
}
 8001e88:	4620      	mov	r0, r4
 8001e8a:	bd10      	pop	{r4, pc}
 8001e8c:	4604      	mov	r4, r0
    HAL_MspInit();
 8001e8e:	f7ff fe21 	bl	8001ad4 <HAL_MspInit>
}
 8001e92:	4620      	mov	r0, r4
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e9c:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <HAL_IncTick+0x10>)
 8001e9e:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <HAL_IncTick+0x14>)
 8001ea0:	6811      	ldr	r1, [r2, #0]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	440b      	add	r3, r1
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000650 	.word	0x20000650
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001eb4:	4b01      	ldr	r3, [pc, #4]	@ (8001ebc <HAL_GetTick+0x8>)
 8001eb6:	6818      	ldr	r0, [r3, #0]
}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000650 	.word	0x20000650

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff fff6 	bl	8001eb4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001eca:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001ecc:	d002      	beq.n	8001ed4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001ece:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <HAL_Delay+0x20>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	1b40      	subs	r0, r0, r5
 8001eda:	42a0      	cmp	r0, r4
 8001edc:	d3fa      	bcc.n	8001ed4 <HAL_Delay+0x14>
  {
  }
}
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee4:	b530      	push	{r4, r5, lr}
 8001ee6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001eec:	2800      	cmp	r0, #0
 8001eee:	f000 809d 	beq.w	800202c <HAL_ADC_Init+0x148>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef2:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	2d00      	cmp	r5, #0
 8001ef8:	f000 809d 	beq.w	8002036 <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001efc:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001efe:	6893      	ldr	r3, [r2, #8]
 8001f00:	009d      	lsls	r5, r3, #2
 8001f02:	d505      	bpl.n	8001f10 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f04:	6893      	ldr	r3, [r2, #8]
 8001f06:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f0e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f10:	6893      	ldr	r3, [r2, #8]
 8001f12:	00d8      	lsls	r0, r3, #3
 8001f14:	d419      	bmi.n	8001f4a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f16:	4b5a      	ldr	r3, [pc, #360]	@ (8002080 <HAL_ADC_Init+0x19c>)
 8001f18:	485a      	ldr	r0, [pc, #360]	@ (8002084 <HAL_ADC_Init+0x1a0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001f1c:	6891      	ldr	r1, [r2, #8]
 8001f1e:	099b      	lsrs	r3, r3, #6
 8001f20:	fba0 0303 	umull	r0, r3, r0, r3
 8001f24:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001f36:	6091      	str	r1, [r2, #8]
 8001f38:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001f3a:	9b01      	ldr	r3, [sp, #4]
 8001f3c:	b12b      	cbz	r3, 8001f4a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8001f3e:	9b01      	ldr	r3, [sp, #4]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001f44:	9b01      	ldr	r3, [sp, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f4a:	6893      	ldr	r3, [r2, #8]
 8001f4c:	00d9      	lsls	r1, r3, #3
 8001f4e:	d470      	bmi.n	8002032 <HAL_ADC_Init+0x14e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f52:	f043 0310 	orr.w	r3, r3, #16
 8001f56:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f58:	6da3      	ldr	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f5a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	4303      	orrs	r3, r0
 8001f5e:	65a3      	str	r3, [r4, #88]	@ 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f60:	6893      	ldr	r3, [r2, #8]
 8001f62:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f68:	d15c      	bne.n	8002024 <HAL_ADC_Init+0x140>
 8001f6a:	06db      	lsls	r3, r3, #27
 8001f6c:	d45a      	bmi.n	8002024 <HAL_ADC_Init+0x140>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f70:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f7a:	6893      	ldr	r3, [r2, #8]
 8001f7c:	07dd      	lsls	r5, r3, #31
 8001f7e:	d410      	bmi.n	8001fa2 <HAL_ADC_Init+0xbe>
 8001f80:	4941      	ldr	r1, [pc, #260]	@ (8002088 <HAL_ADC_Init+0x1a4>)
 8001f82:	4b42      	ldr	r3, [pc, #264]	@ (800208c <HAL_ADC_Init+0x1a8>)
 8001f84:	6889      	ldr	r1, [r1, #8]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	4941      	ldr	r1, [pc, #260]	@ (8002090 <HAL_ADC_Init+0x1ac>)
 8001f8c:	6889      	ldr	r1, [r1, #8]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	07d9      	lsls	r1, r3, #31
 8001f92:	d406      	bmi.n	8001fa2 <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f94:	493f      	ldr	r1, [pc, #252]	@ (8002094 <HAL_ADC_Init+0x1b0>)
 8001f96:	6865      	ldr	r5, [r4, #4]
 8001f98:	688b      	ldr	r3, [r1, #8]
 8001f9a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001f9e:	432b      	orrs	r3, r5
 8001fa0:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8001fa2:	68e5      	ldr	r5, [r4, #12]
 8001fa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fa6:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8001faa:	432b      	orrs	r3, r5
 8001fac:	68a5      	ldr	r5, [r4, #8]
 8001fae:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb0:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb2:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8001fb4:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fbc:	d049      	beq.n	8002052 <HAL_ADC_Init+0x16e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fbe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001fc0:	b121      	cbz	r1, 8001fcc <HAL_ADC_Init+0xe8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8001fc2:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fc4:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fc8:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fca:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fcc:	68d5      	ldr	r5, [r2, #12]
 8001fce:	4932      	ldr	r1, [pc, #200]	@ (8002098 <HAL_ADC_Init+0x1b4>)
 8001fd0:	4029      	ands	r1, r5
 8001fd2:	4319      	orrs	r1, r3
 8001fd4:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fd6:	6893      	ldr	r3, [r2, #8]
 8001fd8:	071b      	lsls	r3, r3, #28
 8001fda:	d414      	bmi.n	8002006 <HAL_ADC_Init+0x122>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fdc:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fde:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fe2:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fe4:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fe8:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fea:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fee:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ff6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d02e      	beq.n	800205c <HAL_ADC_Init+0x178>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ffe:	6913      	ldr	r3, [r2, #16]
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002006:	6923      	ldr	r3, [r4, #16]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d01a      	beq.n	8002042 <HAL_ADC_Init+0x15e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800200c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800200e:	f023 030f 	bic.w	r3, r3, #15
 8002012:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002014:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002016:	f023 0303 	bic.w	r3, r3, #3
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002020:	b003      	add	sp, #12
 8002022:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002024:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 800202c:	2001      	movs	r0, #1
}
 800202e:	b003      	add	sp, #12
 8002030:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2000      	movs	r0, #0
 8002034:	e794      	b.n	8001f60 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8002036:	f7ff fd67 	bl	8001b08 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800203a:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800203c:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002040:	e75c      	b.n	8001efc <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002042:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002044:	69e3      	ldr	r3, [r4, #28]
 8002046:	f021 010f 	bic.w	r1, r1, #15
 800204a:	3b01      	subs	r3, #1
 800204c:	430b      	orrs	r3, r1
 800204e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002050:	e7e0      	b.n	8002014 <HAL_ADC_Init+0x130>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002052:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002054:	3901      	subs	r1, #1
 8002056:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800205a:	e7b0      	b.n	8001fbe <HAL_ADC_Init+0xda>
        MODIFY_REG(hadc->Instance->CFGR2,
 800205c:	6911      	ldr	r1, [r2, #16]
 800205e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002060:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8002062:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8002066:	f021 0104 	bic.w	r1, r1, #4
 800206a:	432b      	orrs	r3, r5
 800206c:	430b      	orrs	r3, r1
 800206e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002070:	430b      	orrs	r3, r1
 8002072:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002074:	430b      	orrs	r3, r1
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6113      	str	r3, [r2, #16]
 800207c:	e7c3      	b.n	8002006 <HAL_ADC_Init+0x122>
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000
 8002084:	053e2d63 	.word	0x053e2d63
 8002088:	50040000 	.word	0x50040000
 800208c:	50040100 	.word	0x50040100
 8002090:	50040200 	.word	0x50040200
 8002094:	50040300 	.word	0x50040300
 8002098:	fff0c007 	.word	0xfff0c007

0800209c <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800209c:	4a39      	ldr	r2, [pc, #228]	@ (8002184 <HAL_ADC_PollForConversion+0xe8>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800209e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020a2:	6944      	ldr	r4, [r0, #20]
 80020a4:	6897      	ldr	r7, [r2, #8]
 80020a6:	2c08      	cmp	r4, #8
{
 80020a8:	4605      	mov	r5, r0
 80020aa:	460e      	mov	r6, r1
 80020ac:	f007 071f 	and.w	r7, r7, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020b0:	d009      	beq.n	80020c6 <HAL_ADC_PollForConversion+0x2a>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020b2:	f240 2321 	movw	r3, #545	@ 0x221
 80020b6:	40fb      	lsrs	r3, r7
 80020b8:	07d9      	lsls	r1, r3, #31
 80020ba:	d44f      	bmi.n	800215c <HAL_ADC_PollForConversion+0xc0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80020bc:	6893      	ldr	r3, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020be:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 80020c2:	d14f      	bne.n	8002164 <HAL_ADC_PollForConversion+0xc8>
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020c4:	2404      	movs	r4, #4
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80020c6:	f7ff fef5 	bl	8001eb4 <HAL_GetTick>
 80020ca:	1c73      	adds	r3, r6, #1

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020cc:	682a      	ldr	r2, [r5, #0]
  tickstart = HAL_GetTick();
 80020ce:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020d0:	d12b      	bne.n	800212a <HAL_ADC_PollForConversion+0x8e>
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	421c      	tst	r4, r3
 80020d6:	d0fc      	beq.n	80020d2 <HAL_ADC_PollForConversion+0x36>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	656b      	str	r3, [r5, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020e0:	68d3      	ldr	r3, [r2, #12]
 80020e2:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
 80020e6:	d10f      	bne.n	8002108 <HAL_ADC_PollForConversion+0x6c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020e8:	7e6b      	ldrb	r3, [r5, #25]
 80020ea:	b96b      	cbnz	r3, 8002108 <HAL_ADC_PollForConversion+0x6c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	071e      	lsls	r6, r3, #28
 80020f0:	d50a      	bpl.n	8002108 <HAL_ADC_PollForConversion+0x6c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020f2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80020f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020f8:	656b      	str	r3, [r5, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020fa:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80020fc:	04d8      	lsls	r0, r3, #19
 80020fe:	d403      	bmi.n	8002108 <HAL_ADC_PollForConversion+0x6c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	656b      	str	r3, [r5, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002108:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_ADC_PollForConversion+0xec>)
 800210a:	429a      	cmp	r2, r3
 800210c:	d01b      	beq.n	8002146 <HAL_ADC_PollForConversion+0xaa>
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800210e:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002110:	68d3      	ldr	r3, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002112:	d021      	beq.n	8002158 <HAL_ADC_PollForConversion+0xbc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002114:	045b      	lsls	r3, r3, #17
 8002116:	d401      	bmi.n	800211c <HAL_ADC_PollForConversion+0x80>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002118:	230c      	movs	r3, #12
 800211a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800211c:	2000      	movs	r0, #0
}
 800211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002122:	b916      	cbnz	r6, 800212a <HAL_ADC_PollForConversion+0x8e>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002124:	6813      	ldr	r3, [r2, #0]
 8002126:	421c      	tst	r4, r3
 8002128:	d023      	beq.n	8002172 <HAL_ADC_PollForConversion+0xd6>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800212a:	6813      	ldr	r3, [r2, #0]
 800212c:	4223      	tst	r3, r4
 800212e:	d1d3      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x3c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002130:	f7ff fec0 	bl	8001eb4 <HAL_GetTick>
 8002134:	eba0 0008 	sub.w	r0, r0, r8
 8002138:	42b0      	cmp	r0, r6
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800213a:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800213c:	d9f1      	bls.n	8002122 <HAL_ADC_PollForConversion+0x86>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	421c      	tst	r4, r3
 8002142:	d1f2      	bne.n	800212a <HAL_ADC_PollForConversion+0x8e>
 8002144:	e015      	b.n	8002172 <HAL_ADC_PollForConversion+0xd6>
 8002146:	f240 2321 	movw	r3, #545	@ 0x221
 800214a:	40fb      	lsrs	r3, r7
 800214c:	07d9      	lsls	r1, r3, #31
 800214e:	d4de      	bmi.n	800210e <HAL_ADC_PollForConversion+0x72>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002150:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <HAL_ADC_PollForConversion+0xf0>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002152:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002154:	68db      	ldr	r3, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002156:	d1dd      	bne.n	8002114 <HAL_ADC_PollForConversion+0x78>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002158:	6014      	str	r4, [r2, #0]
 800215a:	e7df      	b.n	800211c <HAL_ADC_PollForConversion+0x80>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800215c:	6803      	ldr	r3, [r0, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	07da      	lsls	r2, r3, #31
 8002162:	d5af      	bpl.n	80020c4 <HAL_ADC_PollForConversion+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002166:	f043 0320 	orr.w	r3, r3, #32
 800216a:	656b      	str	r3, [r5, #84]	@ 0x54
        return HAL_ERROR;
 800216c:	2001      	movs	r0, #1
}
 800216e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002172:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 8002174:	2200      	movs	r2, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	656b      	str	r3, [r5, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 800217c:	f885 2050 	strb.w	r2, [r5, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002180:	2003      	movs	r0, #3
 8002182:	e7cc      	b.n	800211e <HAL_ADC_PollForConversion+0x82>
 8002184:	50040300 	.word	0x50040300
 8002188:	50040100 	.word	0x50040100
 800218c:	50040000 	.word	0x50040000

08002190 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop

08002198 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 80021a0:	b082      	sub	sp, #8
 80021a2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80021a4:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80021a6:	f04f 0000 	mov.w	r0, #0
 80021aa:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80021ac:	f000 8127 	beq.w	80023fe <HAL_ADC_ConfigChannel+0x266>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b0:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021b8:	68a2      	ldr	r2, [r4, #8]
 80021ba:	f012 0c04 	ands.w	ip, r2, #4
 80021be:	d155      	bne.n	800226c <HAL_ADC_ConfigChannel+0xd4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021c0:	6848      	ldr	r0, [r1, #4]
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021c2:	2805      	cmp	r0, #5
 80021c4:	f240 808e 	bls.w	80022e4 <HAL_ADC_ConfigChannel+0x14c>
  MODIFY_REG(*preg,
 80021c8:	f000 051f 	and.w	r5, r0, #31
 80021cc:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021d0:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 80021d2:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021d6:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 80021da:	ea6f 0e0e 	mvn.w	lr, lr
 80021de:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021e0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 80021e4:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80021e8:	40aa      	lsls	r2, r5
 80021ea:	f850 500c 	ldr.w	r5, [r0, ip]
 80021ee:	ea05 050e 	and.w	r5, r5, lr
 80021f2:	432a      	orrs	r2, r5
 80021f4:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021f8:	68a2      	ldr	r2, [r4, #8]
 80021fa:	0757      	lsls	r7, r2, #29
 80021fc:	d540      	bpl.n	8002280 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021fe:	68a2      	ldr	r2, [r4, #8]
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002200:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002202:	68a0      	ldr	r0, [r4, #8]
 8002204:	07c5      	lsls	r5, r0, #31
 8002206:	d412      	bmi.n	800222e <HAL_ADC_ConfigChannel+0x96>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002208:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800220a:	48bb      	ldr	r0, [pc, #748]	@ (80024f8 <HAL_ADC_ConfigChannel+0x360>)
 800220c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8002210:	f006 0718 	and.w	r7, r6, #24
 8002214:	40f8      	lsrs	r0, r7
 8002216:	f3c2 0712 	ubfx	r7, r2, #0, #19
 800221a:	4010      	ands	r0, r2
 800221c:	ea25 0507 	bic.w	r5, r5, r7
 8002220:	4328      	orrs	r0, r5
 8002222:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002226:	48b5      	ldr	r0, [pc, #724]	@ (80024fc <HAL_ADC_ConfigChannel+0x364>)
 8002228:	4286      	cmp	r6, r0
 800222a:	f000 8098 	beq.w	800235e <HAL_ADC_ConfigChannel+0x1c6>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800222e:	49b4      	ldr	r1, [pc, #720]	@ (8002500 <HAL_ADC_ConfigChannel+0x368>)
 8002230:	420a      	tst	r2, r1
 8002232:	d019      	beq.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002234:	48b3      	ldr	r0, [pc, #716]	@ (8002504 <HAL_ADC_ConfigChannel+0x36c>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002236:	4db4      	ldr	r5, [pc, #720]	@ (8002508 <HAL_ADC_ConfigChannel+0x370>)
 8002238:	6881      	ldr	r1, [r0, #8]
 800223a:	42aa      	cmp	r2, r5
 800223c:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8002240:	d066      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x178>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002242:	4db2      	ldr	r5, [pc, #712]	@ (800250c <HAL_ADC_ConfigChannel+0x374>)
 8002244:	42aa      	cmp	r2, r5
 8002246:	f000 80de 	beq.w	8002406 <HAL_ADC_ConfigChannel+0x26e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800224a:	4db1      	ldr	r5, [pc, #708]	@ (8002510 <HAL_ADC_ConfigChannel+0x378>)
 800224c:	42aa      	cmp	r2, r5
 800224e:	d10b      	bne.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002250:	024a      	lsls	r2, r1, #9
 8002252:	d409      	bmi.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002254:	4aaf      	ldr	r2, [pc, #700]	@ (8002514 <HAL_ADC_ConfigChannel+0x37c>)
 8002256:	4294      	cmp	r4, r2
 8002258:	d106      	bne.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800225a:	6882      	ldr	r2, [r0, #8]
 800225c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002260:	4332      	orrs	r2, r6
 8002262:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002266:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2000      	movs	r0, #0
 800226a:	e003      	b.n	8002274 <HAL_ADC_ConfigChannel+0xdc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800227a:	b002      	add	sp, #8
 800227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002280:	68a0      	ldr	r0, [r4, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002282:	680a      	ldr	r2, [r1, #0]
 8002284:	0706      	lsls	r6, r0, #28
 8002286:	d4bc      	bmi.n	8002202 <HAL_ADC_ConfigChannel+0x6a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002288:	0dd0      	lsrs	r0, r2, #23
 800228a:	f000 0004 	and.w	r0, r0, #4
 800228e:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8002292:	f3c2 5c04 	ubfx	ip, r2, #20, #5
 8002296:	688e      	ldr	r6, [r1, #8]
 8002298:	582a      	ldr	r2, [r5, r0]
 800229a:	2707      	movs	r7, #7
 800229c:	fa07 f70c 	lsl.w	r7, r7, ip
 80022a0:	fa06 f60c 	lsl.w	r6, r6, ip
 80022a4:	ea22 0207 	bic.w	r2, r2, r7
 80022a8:	4332      	orrs	r2, r6
 80022aa:	502a      	str	r2, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022ac:	e9d1 6204 	ldrd	r6, r2, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022b0:	2e04      	cmp	r6, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022b2:	68e0      	ldr	r0, [r4, #12]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022b4:	f104 0560 	add.w	r5, r4, #96	@ 0x60
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022b8:	f000 80cd 	beq.w	8002456 <HAL_ADC_ConfigChannel+0x2be>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022bc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80022c0:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 80022c2:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
 80022c6:	4f94      	ldr	r7, [pc, #592]	@ (8002518 <HAL_ADC_ConfigChannel+0x380>)
 80022c8:	4082      	lsls	r2, r0
 80022ca:	6808      	ldr	r0, [r1, #0]
 80022cc:	ea0c 0707 	and.w	r7, ip, r7
 80022d0:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80022d4:	4338      	orrs	r0, r7
 80022d6:	4302      	orrs	r2, r0
 80022d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022dc:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022e0:	680a      	ldr	r2, [r1, #0]
}
 80022e2:	e78e      	b.n	8002202 <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 80022e4:	3802      	subs	r0, #2
 80022e6:	2803      	cmp	r0, #3
 80022e8:	d903      	bls.n	80022f2 <HAL_ADC_ConfigChannel+0x15a>
    if (pConfig->Rank <= 5U)
 80022ea:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 80022ee:	2506      	movs	r5, #6
 80022f0:	e775      	b.n	80021de <HAL_ADC_ConfigChannel+0x46>
 80022f2:	4a8a      	ldr	r2, [pc, #552]	@ (800251c <HAL_ADC_ConfigChannel+0x384>)
 80022f4:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 80022f8:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022fc:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 80022fe:	f005 051f 	and.w	r5, r5, #31
 8002302:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002306:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 800230a:	ea6f 0e0e 	mvn.w	lr, lr
 800230e:	e766      	b.n	80021de <HAL_ADC_ConfigChannel+0x46>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002310:	0208      	lsls	r0, r1, #8
 8002312:	d4a9      	bmi.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002314:	4a7f      	ldr	r2, [pc, #508]	@ (8002514 <HAL_ADC_ConfigChannel+0x37c>)
 8002316:	4294      	cmp	r4, r2
 8002318:	d003      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x18a>
 800231a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800231e:	4294      	cmp	r4, r2
 8002320:	d1a2      	bne.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002322:	4978      	ldr	r1, [pc, #480]	@ (8002504 <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002324:	487e      	ldr	r0, [pc, #504]	@ (8002520 <HAL_ADC_ConfigChannel+0x388>)
 8002326:	688a      	ldr	r2, [r1, #8]
 8002328:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800232c:	4332      	orrs	r2, r6
 800232e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002332:	608a      	str	r2, [r1, #8]
 8002334:	6802      	ldr	r2, [r0, #0]
 8002336:	497b      	ldr	r1, [pc, #492]	@ (8002524 <HAL_ADC_ConfigChannel+0x38c>)
 8002338:	0992      	lsrs	r2, r2, #6
 800233a:	fba1 1202 	umull	r1, r2, r1, r2
 800233e:	0992      	lsrs	r2, r2, #6
 8002340:	3201      	adds	r2, #1
 8002342:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800234a:	9a01      	ldr	r2, [sp, #4]
 800234c:	2a00      	cmp	r2, #0
 800234e:	d08b      	beq.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8002350:	9a01      	ldr	r2, [sp, #4]
 8002352:	3a01      	subs	r2, #1
 8002354:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002356:	9a01      	ldr	r2, [sp, #4]
 8002358:	2a00      	cmp	r2, #0
 800235a:	d1f9      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x1b8>
 800235c:	e784      	b.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235e:	2f00      	cmp	r7, #0
 8002360:	d065      	beq.n	800242e <HAL_ADC_ConfigChannel+0x296>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002366:	2800      	cmp	r0, #0
 8002368:	f000 809f 	beq.w	80024aa <HAL_ADC_ConfigChannel+0x312>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800236c:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002370:	3001      	adds	r0, #1
 8002372:	f000 001f 	and.w	r0, r0, #31
 8002376:	2809      	cmp	r0, #9
 8002378:	f240 8097 	bls.w	80024aa <HAL_ADC_ConfigChannel+0x312>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002380:	2800      	cmp	r0, #0
 8002382:	f000 8146 	beq.w	8002612 <HAL_ADC_ConfigChannel+0x47a>
  return __builtin_clz(value);
 8002386:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800238a:	3001      	adds	r0, #1
 800238c:	0680      	lsls	r0, r0, #26
 800238e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002396:	2d00      	cmp	r5, #0
 8002398:	f000 8140 	beq.w	800261c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 800239c:	fab5 f585 	clz	r5, r5
 80023a0:	3501      	adds	r5, #1
 80023a2:	f005 051f 	and.w	r5, r5, #31
 80023a6:	2601      	movs	r6, #1
 80023a8:	fa06 f505 	lsl.w	r5, r6, r5
 80023ac:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	f000 8130 	beq.w	8002618 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	1c55      	adds	r5, r2, #1
 80023be:	f005 051f 	and.w	r5, r5, #31
 80023c2:	2203      	movs	r2, #3
 80023c4:	f06f 061d 	mvn.w	r6, #29
 80023c8:	fb12 6205 	smlabb	r2, r2, r5, r6
 80023cc:	0512      	lsls	r2, r2, #20
 80023ce:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d2:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023d4:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 80023d6:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023d8:	f006 0604 	and.w	r6, r6, #4
 80023dc:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 80023e0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80023e4:	fa00 f702 	lsl.w	r7, r0, r2
 80023e8:	f04f 0c07 	mov.w	ip, #7
 80023ec:	59a8      	ldr	r0, [r5, r6]
 80023ee:	fa0c f202 	lsl.w	r2, ip, r2
 80023f2:	ea20 0202 	bic.w	r2, r0, r2
 80023f6:	433a      	orrs	r2, r7
 80023f8:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023fa:	680a      	ldr	r2, [r1, #0]
}
 80023fc:	e717      	b.n	800222e <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 80023fe:	2002      	movs	r0, #2
}
 8002400:	b002      	add	sp, #8
 8002402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002406:	01c9      	lsls	r1, r1, #7
 8002408:	f53f af2e 	bmi.w	8002268 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800240c:	4a41      	ldr	r2, [pc, #260]	@ (8002514 <HAL_ADC_ConfigChannel+0x37c>)
 800240e:	4294      	cmp	r4, r2
 8002410:	d004      	beq.n	800241c <HAL_ADC_ConfigChannel+0x284>
 8002412:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002416:	4294      	cmp	r4, r2
 8002418:	f47f af26 	bne.w	8002268 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800241c:	4939      	ldr	r1, [pc, #228]	@ (8002504 <HAL_ADC_ConfigChannel+0x36c>)
 800241e:	688a      	ldr	r2, [r1, #8]
 8002420:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002424:	4332      	orrs	r2, r6
 8002426:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800242a:	608a      	str	r2, [r1, #8]
}
 800242c:	e71c      	b.n	8002268 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800242e:	0e92      	lsrs	r2, r2, #26
 8002430:	3201      	adds	r2, #1
 8002432:	f002 051f 	and.w	r5, r2, #31
 8002436:	2001      	movs	r0, #1
 8002438:	0692      	lsls	r2, r2, #26
 800243a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800243e:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002440:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002442:	ea40 0002 	orr.w	r0, r0, r2
 8002446:	eb05 0245 	add.w	r2, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244a:	d953      	bls.n	80024f4 <HAL_ADC_ConfigChannel+0x35c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800244c:	3a1e      	subs	r2, #30
 800244e:	0512      	lsls	r2, r2, #20
 8002450:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002454:	e7bd      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x23a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002456:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002458:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800245a:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 800245c:	f3c0 0712 	ubfx	r7, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002460:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002464:	4602      	mov	r2, r0
 8002466:	2f00      	cmp	r7, #0
 8002468:	d15e      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x390>
 800246a:	f3c0 6284 	ubfx	r2, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800246e:	4296      	cmp	r6, r2
 8002470:	f000 809f 	beq.w	80025b2 <HAL_ADC_ConfigChannel+0x41a>
 8002474:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8002476:	6e66      	ldr	r6, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002478:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800247c:	4296      	cmp	r6, r2
 800247e:	f000 8084 	beq.w	800258a <HAL_ADC_ConfigChannel+0x3f2>
 8002482:	68ae      	ldr	r6, [r5, #8]
 8002484:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002486:	f105 0c08 	add.w	ip, r5, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800248a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800248e:	4296      	cmp	r6, r2
 8002490:	f000 80a0 	beq.w	80025d4 <HAL_ADC_ConfigChannel+0x43c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002494:	68ee      	ldr	r6, [r5, #12]
 8002496:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002498:	f105 070c 	add.w	r7, r5, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800249c:	f3c6 6584 	ubfx	r5, r6, #26, #5
 80024a0:	42aa      	cmp	r2, r5
 80024a2:	f000 80ad 	beq.w	8002600 <HAL_ADC_ConfigChannel+0x468>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024a6:	4602      	mov	r2, r0
 80024a8:	e6ab      	b.n	8002202 <HAL_ADC_ConfigChannel+0x6a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80024ae:	2800      	cmp	r0, #0
 80024b0:	f000 80b8 	beq.w	8002624 <HAL_ADC_ConfigChannel+0x48c>
  return __builtin_clz(value);
 80024b4:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024b8:	3001      	adds	r0, #1
 80024ba:	0680      	lsls	r0, r0, #26
 80024bc:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80024c4:	2d00      	cmp	r5, #0
 80024c6:	f000 80ab 	beq.w	8002620 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80024ca:	fab5 f585 	clz	r5, r5
 80024ce:	3501      	adds	r5, #1
 80024d0:	f005 051f 	and.w	r5, r5, #31
 80024d4:	2601      	movs	r6, #1
 80024d6:	fa06 f505 	lsl.w	r5, r6, r5
 80024da:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	f000 8093 	beq.w	800260c <HAL_ADC_ConfigChannel+0x474>
  return __builtin_clz(value);
 80024e6:	fab2 f282 	clz	r2, r2
 80024ea:	3201      	adds	r2, #1
 80024ec:	f002 021f 	and.w	r2, r2, #31
 80024f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80024f4:	0512      	lsls	r2, r2, #20
 80024f6:	e76c      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x23a>
 80024f8:	0007ffff 	.word	0x0007ffff
 80024fc:	407f0000 	.word	0x407f0000
 8002500:	80080000 	.word	0x80080000
 8002504:	50040300 	.word	0x50040300
 8002508:	c7520000 	.word	0xc7520000
 800250c:	cb840000 	.word	0xcb840000
 8002510:	80000001 	.word	0x80000001
 8002514:	50040000 	.word	0x50040000
 8002518:	03fff000 	.word	0x03fff000
 800251c:	08006328 	.word	0x08006328
 8002520:	20000000 	.word	0x20000000
 8002524:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	fa90 f7a0 	rbit	r7, r0
  if (value == 0U)
 800252c:	b11f      	cbz	r7, 8002536 <HAL_ADC_ConfigChannel+0x39e>
  return __builtin_clz(value);
 800252e:	fab7 f787 	clz	r7, r7
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002532:	42be      	cmp	r6, r7
 8002534:	d03d      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002536:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8002538:	6e66      	ldr	r6, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800253a:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	fa90 f7a0 	rbit	r7, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002542:	f105 0c08 	add.w	ip, r5, #8
 8002546:	46e6      	mov	lr, ip
  if (value == 0U)
 8002548:	b11f      	cbz	r7, 8002552 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800254a:	fab7 f787 	clz	r7, r7
 800254e:	42b7      	cmp	r7, r6
 8002550:	d01d      	beq.n	800258e <HAL_ADC_ConfigChannel+0x3f6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002552:	68ae      	ldr	r6, [r5, #8]
 8002554:	68ae      	ldr	r6, [r5, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002556:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	fa90 fea0 	rbit	lr, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255e:	f105 070c 	add.w	r7, r5, #12
 8002562:	46b8      	mov	r8, r7
  if (value == 0U)
 8002564:	f1be 0f00 	cmp.w	lr, #0
 8002568:	d003      	beq.n	8002572 <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 800256a:	fabe fe8e 	clz	lr, lr
 800256e:	45b6      	cmp	lr, r6
 8002570:	d032      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x440>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002572:	68ee      	ldr	r6, [r5, #12]
 8002574:	68ed      	ldr	r5, [r5, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002576:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 800257e:	2e00      	cmp	r6, #0
 8002580:	f43f ae3f 	beq.w	8002202 <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 8002584:	fab6 f286 	clz	r2, r6
 8002588:	e78a      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x308>
 800258a:	f105 0e08 	add.w	lr, r5, #8
  MODIFY_REG(*preg,
 800258e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002590:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002594:	6662      	str	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002596:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002598:	68aa      	ldr	r2, [r5, #8]
 800259a:	68ae      	ldr	r6, [r5, #8]
 800259c:	f3c0 0712 	ubfx	r7, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a0:	46f4      	mov	ip, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025a2:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025a6:	4602      	mov	r2, r0
 80025a8:	2f00      	cmp	r7, #0
 80025aa:	d1d6      	bne.n	800255a <HAL_ADC_ConfigChannel+0x3c2>
 80025ac:	f3c0 6284 	ubfx	r2, r0, #26, #5
 80025b0:	e76d      	b.n	800248e <HAL_ADC_ConfigChannel+0x2f6>
  MODIFY_REG(*preg,
 80025b2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80025b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025b8:	6622      	str	r2, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ba:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80025be:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 80025c0:	f3c0 0712 	ubfx	r7, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025c4:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025c8:	4602      	mov	r2, r0
 80025ca:	2f00      	cmp	r7, #0
 80025cc:	d1b7      	bne.n	800253e <HAL_ADC_ConfigChannel+0x3a6>
 80025ce:	f3c0 6284 	ubfx	r2, r0, #26, #5
 80025d2:	e753      	b.n	800247c <HAL_ADC_ConfigChannel+0x2e4>
 80025d4:	f105 080c 	add.w	r8, r5, #12
  MODIFY_REG(*preg,
 80025d8:	f8dc 2000 	ldr.w	r2, [ip]
 80025dc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025e0:	f8cc 2000 	str.w	r2, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025e4:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025e6:	68ea      	ldr	r2, [r5, #12]
 80025e8:	68ed      	ldr	r5, [r5, #12]
 80025ea:	f3c0 0612 	ubfx	r6, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ee:	4647      	mov	r7, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025f0:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f4:	4602      	mov	r2, r0
 80025f6:	2e00      	cmp	r6, #0
 80025f8:	d1bf      	bne.n	800257a <HAL_ADC_ConfigChannel+0x3e2>
 80025fa:	f3c0 6284 	ubfx	r2, r0, #26, #5
 80025fe:	e74f      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x308>
  MODIFY_REG(*preg,
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002606:	603a      	str	r2, [r7, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002608:	680a      	ldr	r2, [r1, #0]
}
 800260a:	e5fa      	b.n	8002202 <HAL_ADC_ConfigChannel+0x6a>
 800260c:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8002610:	e6df      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x23a>
 8002612:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002616:	e6bc      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1fa>
 8002618:	4a04      	ldr	r2, [pc, #16]	@ (800262c <HAL_ADC_ConfigChannel+0x494>)
 800261a:	e6da      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x23a>
 800261c:	2502      	movs	r5, #2
 800261e:	e6c5      	b.n	80023ac <HAL_ADC_ConfigChannel+0x214>
 8002620:	2502      	movs	r5, #2
 8002622:	e75a      	b.n	80024da <HAL_ADC_ConfigChannel+0x342>
 8002624:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002628:	e74a      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x328>
 800262a:	bf00      	nop
 800262c:	fe500000 	.word	0xfe500000

08002630 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	b082      	sub	sp, #8
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002634:	2200      	movs	r2, #0

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002636:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8002638:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	07d2      	lsls	r2, r2, #31
 800263e:	d42c      	bmi.n	800269a <ADC_Enable+0x6a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	4a28      	ldr	r2, [pc, #160]	@ (80026e4 <ADC_Enable+0xb4>)
 8002644:	4211      	tst	r1, r2
 8002646:	4604      	mov	r4, r0
 8002648:	d12a      	bne.n	80026a0 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 800264a:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800264c:	4926      	ldr	r1, [pc, #152]	@ (80026e8 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 800264e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002652:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800265c:	688b      	ldr	r3, [r1, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	d429      	bmi.n	80026b6 <ADC_Enable+0x86>
        wait_loop_index--;
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002662:	f7ff fc27 	bl	8001eb4 <HAL_GetTick>

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 800266c:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800266e:	d414      	bmi.n	800269a <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8002670:	4e1e      	ldr	r6, [pc, #120]	@ (80026ec <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	07d0      	lsls	r0, r2, #31
 8002676:	d404      	bmi.n	8002682 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	4032      	ands	r2, r6
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002682:	f7ff fc17 	bl	8001eb4 <HAL_GetTick>
 8002686:	1b43      	subs	r3, r0, r5
 8002688:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800268a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800268c:	d902      	bls.n	8002694 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	07d1      	lsls	r1, r2, #31
 8002692:	d505      	bpl.n	80026a0 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	07d2      	lsls	r2, r2, #31
 8002698:	d5eb      	bpl.n	8002672 <ADC_Enable+0x42>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800269a:	2000      	movs	r0, #0
}
 800269c:	b002      	add	sp, #8
 800269e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80026a2:	f043 0310 	orr.w	r3, r3, #16
 80026a6:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 80026b2:	b002      	add	sp, #8
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <ADC_Enable+0xc0>)
 80026b8:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <ADC_Enable+0xc4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	3301      	adds	r3, #1
 80026c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80026ce:	9b01      	ldr	r3, [sp, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0c6      	beq.n	8002662 <ADC_Enable+0x32>
        wait_loop_index--;
 80026d4:	9b01      	ldr	r3, [sp, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80026da:	9b01      	ldr	r3, [sp, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f9      	bne.n	80026d4 <ADC_Enable+0xa4>
 80026e0:	e7bf      	b.n	8002662 <ADC_Enable+0x32>
 80026e2:	bf00      	nop
 80026e4:	8000003f 	.word	0x8000003f
 80026e8:	50040300 	.word	0x50040300
 80026ec:	7fffffc0 	.word	0x7fffffc0
 80026f0:	20000000 	.word	0x20000000
 80026f4:	053e2d63 	.word	0x053e2d63

080026f8 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026f8:	4a32      	ldr	r2, [pc, #200]	@ (80027c4 <HAL_ADC_Start+0xcc>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026fa:	6803      	ldr	r3, [r0, #0]
{
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002700:	689d      	ldr	r5, [r3, #8]
 8002702:	f015 0504 	ands.w	r5, r5, #4
 8002706:	d141      	bne.n	800278c <HAL_ADC_Start+0x94>
    __HAL_LOCK(hadc);
 8002708:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800270c:	2b01      	cmp	r3, #1
 800270e:	4604      	mov	r4, r0
 8002710:	d03c      	beq.n	800278c <HAL_ADC_Start+0x94>
 8002712:	2301      	movs	r3, #1
 8002714:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002718:	f7ff ff8a 	bl	8002630 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800271c:	2800      	cmp	r0, #0
 800271e:	d137      	bne.n	8002790 <HAL_ADC_Start+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8002720:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002722:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002724:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002730:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002732:	4b25      	ldr	r3, [pc, #148]	@ (80027c8 <HAL_ADC_Start+0xd0>)
 8002734:	429a      	cmp	r2, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002736:	f006 061f 	and.w	r6, r6, #31
 800273a:	d02c      	beq.n	8002796 <HAL_ADC_Start+0x9e>
 800273c:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800273e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002740:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002744:	6563      	str	r3, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002746:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002748:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800274c:	bf1c      	itt	ne
 800274e:	6da3      	ldrne	r3, [r4, #88]	@ 0x58
 8002750:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002754:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002756:	231c      	movs	r3, #28
 8002758:	6013      	str	r3, [r2, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275a:	428a      	cmp	r2, r1
      __HAL_UNLOCK(hadc);
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002764:	d01b      	beq.n	800279e <HAL_ADC_Start+0xa6>
 8002766:	f240 2321 	movw	r3, #545	@ 0x221
 800276a:	40f3      	lsrs	r3, r6
 800276c:	07dd      	lsls	r5, r3, #31
 800276e:	d416      	bmi.n	800279e <HAL_ADC_Start+0xa6>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002770:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002776:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002778:	68cb      	ldr	r3, [r1, #12]
 800277a:	019b      	lsls	r3, r3, #6
 800277c:	d505      	bpl.n	800278a <HAL_ADC_Start+0x92>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800277e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002780:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002784:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002788:	6563      	str	r3, [r4, #84]	@ 0x54
}
 800278a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 800278c:	2002      	movs	r0, #2
}
 800278e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8002790:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 8002794:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <HAL_ADC_Start+0xd4>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002798:	2e00      	cmp	r6, #0
 800279a:	d1d4      	bne.n	8002746 <HAL_ADC_Start+0x4e>
 800279c:	e7cf      	b.n	800273e <HAL_ADC_Start+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800279e:	68d3      	ldr	r3, [r2, #12]
 80027a0:	0199      	lsls	r1, r3, #6
 80027a2:	d505      	bpl.n	80027b0 <HAL_ADC_Start+0xb8>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027ae:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80027b0:	6893      	ldr	r3, [r2, #8]
 80027b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	6093      	str	r3, [r2, #8]
}
 80027c0:	bd70      	pop	{r4, r5, r6, pc}
 80027c2:	bf00      	nop
 80027c4:	50040300 	.word	0x50040300
 80027c8:	50040100 	.word	0x50040100
 80027cc:	50040000 	.word	0x50040000

080027d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80027d0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027d2:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027d6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80027d8:	2a01      	cmp	r2, #1
{
 80027da:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 80027dc:	d044      	beq.n	8002868 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80027de:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027e0:	4d2e      	ldr	r5, [pc, #184]	@ (800289c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80027e2:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027e4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80027e6:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027e8:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027ea:	9216      	str	r2, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 80027ec:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80027f0:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027f2:	d008      	beq.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fa:	f041 0120 	orr.w	r1, r1, #32
 80027fe:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002800:	b01a      	add	sp, #104	@ 0x68
 8002802:	bcf0      	pop	{r4, r5, r6, r7}
 8002804:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002806:	4a26      	ldr	r2, [pc, #152]	@ (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8002808:	6890      	ldr	r0, [r2, #8]
 800280a:	0740      	lsls	r0, r0, #29
 800280c:	d50b      	bpl.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800280e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002812:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8002816:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8002820:	b01a      	add	sp, #104	@ 0x68
 8002822:	bcf0      	pop	{r4, r5, r6, r7}
 8002824:	4770      	bx	lr
 8002826:	68a0      	ldr	r0, [r4, #8]
 8002828:	0747      	lsls	r7, r0, #29
 800282a:	d4f1      	bmi.n	8002810 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800282c:	b306      	cbz	r6, 8002870 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800282e:	4f1d      	ldr	r7, [pc, #116]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8002830:	684d      	ldr	r5, [r1, #4]
 8002832:	68b8      	ldr	r0, [r7, #8]
 8002834:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8002838:	4328      	orrs	r0, r5
 800283a:	f893 5030 	ldrb.w	r5, [r3, #48]	@ 0x30
 800283e:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8002842:	60b8      	str	r0, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002844:	68a0      	ldr	r0, [r4, #8]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	4302      	orrs	r2, r0
 800284a:	4817      	ldr	r0, [pc, #92]	@ (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 800284c:	6880      	ldr	r0, [r0, #8]
 800284e:	4302      	orrs	r2, r0
 8002850:	07d5      	lsls	r5, r2, #31
 8002852:	d420      	bmi.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 8002854:	68b8      	ldr	r0, [r7, #8]
 8002856:	688a      	ldr	r2, [r1, #8]
 8002858:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 800285c:	4332      	orrs	r2, r6
 800285e:	f021 010f 	bic.w	r1, r1, #15
 8002862:	430a      	orrs	r2, r1
 8002864:	60ba      	str	r2, [r7, #8]
 8002866:	e016      	b.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8002868:	2002      	movs	r0, #2
}
 800286a:	b01a      	add	sp, #104	@ 0x68
 800286c:	bcf0      	pop	{r4, r5, r6, r7}
 800286e:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8002872:	6881      	ldr	r1, [r0, #8]
 8002874:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8002878:	6081      	str	r1, [r0, #8]
 800287a:	490b      	ldr	r1, [pc, #44]	@ (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 800287c:	68a4      	ldr	r4, [r4, #8]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	6889      	ldr	r1, [r1, #8]
 8002882:	4322      	orrs	r2, r4
 8002884:	430a      	orrs	r2, r1
 8002886:	07d4      	lsls	r4, r2, #31
 8002888:	d405      	bmi.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800288a:	6882      	ldr	r2, [r0, #8]
 800288c:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8002890:	f022 020f 	bic.w	r2, r2, #15
 8002894:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002896:	2000      	movs	r0, #0
 8002898:	e7bf      	b.n	800281a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800289a:	bf00      	nop
 800289c:	50040000 	.word	0x50040000
 80028a0:	50040100 	.word	0x50040100
 80028a4:	50040300 	.word	0x50040300
 80028a8:	50040200 	.word	0x50040200

080028ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	4907      	ldr	r1, [pc, #28]	@ (80028cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80028ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028be:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80028c6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_NVIC_SetPriority+0x70>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028da:	f1c3 0e07 	rsb	lr, r3, #7
 80028de:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e6:	bf28      	it	cs
 80028e8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ec:	f1bc 0f06 	cmp.w	ip, #6
 80028f0:	d91c      	bls.n	800292c <HAL_NVIC_SetPriority+0x5c>
 80028f2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	fa03 f30c 	lsl.w	r3, r3, ip
 80028fe:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	fa03 f30e 	lsl.w	r3, r3, lr
 800290a:	ea21 0303 	bic.w	r3, r1, r3
 800290e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002912:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002916:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800291a:	db0a      	blt.n	8002932 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002920:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002924:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002928:	f85d fb04 	ldr.w	pc, [sp], #4
 800292c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	4694      	mov	ip, r2
 8002930:	e7e7      	b.n	8002902 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	4a04      	ldr	r2, [pc, #16]	@ (8002944 <HAL_NVIC_SetPriority+0x74>)
 8002934:	f000 000f 	and.w	r0, r0, #15
 8002938:	4402      	add	r2, r0
 800293a:	7613      	strb	r3, [r2, #24]
 800293c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002940:	e000ed00 	.word	0xe000ed00
 8002944:	e000ecfc 	.word	0xe000ecfc

08002948 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	3801      	subs	r0, #1
 800294a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800294e:	d301      	bcc.n	8002954 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002950:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002952:	4770      	bx	lr
{
 8002954:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002956:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	4c07      	ldr	r4, [pc, #28]	@ (8002978 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8002962:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002966:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002968:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	6119      	str	r1, [r3, #16]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002980:	680c      	ldr	r4, [r1, #0]
{
 8002982:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002984:	2c00      	cmp	r4, #0
 8002986:	f000 809c 	beq.w	8002ac2 <HAL_GPIO_Init+0x146>
  uint32_t position = 0x00u;
 800298a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800298c:	f04f 0b01 	mov.w	fp, #1
 8002990:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8002994:	ea1e 0a04 	ands.w	sl, lr, r4
 8002998:	f000 808e 	beq.w	8002ab8 <HAL_GPIO_Init+0x13c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299c:	684d      	ldr	r5, [r1, #4]
 800299e:	f005 0203 	and.w	r2, r5, #3
 80029a2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029a6:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a8:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ac:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b0:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029b4:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b8:	f240 8086 	bls.w	8002ac8 <HAL_GPIO_Init+0x14c>
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029bc:	2a03      	cmp	r2, #3
 80029be:	f040 80c1 	bne.w	8002b44 <HAL_GPIO_Init+0x1c8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029c2:	f8d0 802c 	ldr.w	r8, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029c6:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029ca:	f3c5 0ec0 	ubfx	lr, r5, #3, #1
 80029ce:	fa0e fe03 	lsl.w	lr, lr, r3
 80029d2:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->ASCR = temp;
 80029d6:	f8c0 e02c 	str.w	lr, [r0, #44]	@ 0x2c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029da:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 80029de:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e2:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029e6:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80029ec:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ee:	d063      	beq.n	8002ab8 <HAL_GPIO_Init+0x13c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f0:	4f6c      	ldr	r7, [pc, #432]	@ (8002ba4 <HAL_GPIO_Init+0x228>)
 80029f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	663a      	str	r2, [r7, #96]	@ 0x60
 80029fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029fc:	f002 0201 	and.w	r2, r2, #1
 8002a00:	9203      	str	r2, [sp, #12]
 8002a02:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a04:	f023 0203 	bic.w	r2, r3, #3
 8002a08:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8002a0c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a10:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a14:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a16:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002a1a:	260f      	movs	r6, #15
 8002a1c:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a20:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a24:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a28:	d022      	beq.n	8002a70 <HAL_GPIO_Init+0xf4>
 8002a2a:	4e5f      	ldr	r6, [pc, #380]	@ (8002ba8 <HAL_GPIO_Init+0x22c>)
 8002a2c:	42b0      	cmp	r0, r6
 8002a2e:	f000 809c 	beq.w	8002b6a <HAL_GPIO_Init+0x1ee>
 8002a32:	4e5e      	ldr	r6, [pc, #376]	@ (8002bac <HAL_GPIO_Init+0x230>)
 8002a34:	42b0      	cmp	r0, r6
 8002a36:	f000 809f 	beq.w	8002b78 <HAL_GPIO_Init+0x1fc>
 8002a3a:	f8df e178 	ldr.w	lr, [pc, #376]	@ 8002bb4 <HAL_GPIO_Init+0x238>
 8002a3e:	4570      	cmp	r0, lr
 8002a40:	f000 808c 	beq.w	8002b5c <HAL_GPIO_Init+0x1e0>
 8002a44:	f8df e170 	ldr.w	lr, [pc, #368]	@ 8002bb8 <HAL_GPIO_Init+0x23c>
 8002a48:	4570      	cmp	r0, lr
 8002a4a:	f000 809c 	beq.w	8002b86 <HAL_GPIO_Init+0x20a>
 8002a4e:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8002bbc <HAL_GPIO_Init+0x240>
 8002a52:	4570      	cmp	r0, lr
 8002a54:	f000 809e 	beq.w	8002b94 <HAL_GPIO_Init+0x218>
 8002a58:	f8df e164 	ldr.w	lr, [pc, #356]	@ 8002bc0 <HAL_GPIO_Init+0x244>
 8002a5c:	4570      	cmp	r0, lr
 8002a5e:	bf0c      	ite	eq
 8002a60:	f04f 0e06 	moveq.w	lr, #6
 8002a64:	f04f 0e07 	movne.w	lr, #7
 8002a68:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002a6c:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a70:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a72:	4a4f      	ldr	r2, [pc, #316]	@ (8002bb0 <HAL_GPIO_Init+0x234>)
 8002a74:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a76:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8002a78:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002a7c:	4e4c      	ldr	r6, [pc, #304]	@ (8002bb0 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 8002a7e:	bf54      	ite	pl
 8002a80:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002a82:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8002a86:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8002a88:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a8a:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002a8c:	4e48      	ldr	r6, [pc, #288]	@ (8002bb0 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 8002a8e:	bf54      	ite	pl
 8002a90:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002a92:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8002a96:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a98:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a9a:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002a9c:	4e44      	ldr	r6, [pc, #272]	@ (8002bb0 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 8002a9e:	bf54      	ite	pl
 8002aa0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002aa2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8002aa6:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8002aa8:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aaa:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002aac:	4d40      	ldr	r5, [pc, #256]	@ (8002bb0 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 8002aae:	bf54      	ite	pl
 8002ab0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002ab2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8002ab6:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8002ab8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aba:	fa34 f203 	lsrs.w	r2, r4, r3
 8002abe:	f47f af67 	bne.w	8002990 <HAL_GPIO_Init+0x14>
  }
}
 8002ac2:	b005      	add	sp, #20
 8002ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002ac8:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002acc:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ace:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad2:	fa06 f80c 	lsl.w	r8, r6, ip
 8002ad6:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8002ada:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ade:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae2:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ae4:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8002aec:	fa0e fe03 	lsl.w	lr, lr, r3
 8002af0:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8002af4:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8002af8:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afc:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b00:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b04:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b08:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002b0a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0e:	f47f af64 	bne.w	80029da <HAL_GPIO_Init+0x5e>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b12:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8002b14:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b18:	f003 0e07 	and.w	lr, r3, #7
 8002b1c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002b20:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b24:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8002b28:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b2c:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b2e:	260f      	movs	r6, #15
 8002b30:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b34:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b36:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b3a:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8002b3e:	f8c8 e020 	str.w	lr, [r8, #32]
 8002b42:	e74a      	b.n	80029da <HAL_GPIO_Init+0x5e>
        temp = GPIOx->PUPDR;
 8002b44:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b4a:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8002b52:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8002b56:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5a:	e73e      	b.n	80029da <HAL_GPIO_Init+0x5e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b5c:	f04f 0e03 	mov.w	lr, #3
 8002b60:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b64:	ea47 070c 	orr.w	r7, r7, ip
 8002b68:	e782      	b.n	8002a70 <HAL_GPIO_Init+0xf4>
 8002b6a:	f04f 0e01 	mov.w	lr, #1
 8002b6e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b72:	ea47 070c 	orr.w	r7, r7, ip
 8002b76:	e77b      	b.n	8002a70 <HAL_GPIO_Init+0xf4>
 8002b78:	f04f 0e02 	mov.w	lr, #2
 8002b7c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b80:	ea47 070c 	orr.w	r7, r7, ip
 8002b84:	e774      	b.n	8002a70 <HAL_GPIO_Init+0xf4>
 8002b86:	f04f 0e04 	mov.w	lr, #4
 8002b8a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b8e:	ea47 070c 	orr.w	r7, r7, ip
 8002b92:	e76d      	b.n	8002a70 <HAL_GPIO_Init+0xf4>
 8002b94:	f04f 0e05 	mov.w	lr, #5
 8002b98:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b9c:	ea47 070c 	orr.w	r7, r7, ip
 8002ba0:	e766      	b.n	8002a70 <HAL_GPIO_Init+0xf4>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	48000800 	.word	0x48000800
 8002bb0:	40010400 	.word	0x40010400
 8002bb4:	48000c00 	.word	0x48000c00
 8002bb8:	48001000 	.word	0x48001000
 8002bbc:	48001400 	.word	0x48001400
 8002bc0:	48001800 	.word	0x48001800

08002bc4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bc4:	6903      	ldr	r3, [r0, #16]
 8002bc6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002bc8:	bf14      	ite	ne
 8002bca:	2001      	movne	r0, #1
 8002bcc:	2000      	moveq	r0, #0
 8002bce:	4770      	bx	lr

08002bd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd0:	b10a      	cbz	r2, 8002bd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd2:	6181      	str	r1, [r0, #24]
 8002bd4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bd6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop

08002bdc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bdc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bde:	ea01 0203 	and.w	r2, r1, r3
 8002be2:	ea21 0103 	bic.w	r1, r1, r3
 8002be6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002bea:	6181      	str	r1, [r0, #24]
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop

08002bf0 <I2C_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8002bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                                                    uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf4:	6803      	ldr	r3, [r0, #0]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	0414      	lsls	r4, r2, #16
 8002bfa:	f140 808a 	bpl.w	8002d12 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x122>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4688      	mov	r8, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c06:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c08:	f016 0610 	ands.w	r6, r6, #16
 8002c0c:	f000 8084 	beq.w	8002d18 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x128>
  uint32_t error_code = 0;
 8002c10:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c12:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8002c16:	4645      	mov	r5, r8
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	4637      	mov	r7, r6

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	0692      	lsls	r2, r2, #26
 8002c1e:	d429      	bmi.n	8002c74 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x84>
 8002c20:	bb5f      	cbnz	r7, 8002c7a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7ff f947 	bl	8001eb4 <HAL_GetTick>
 8002c26:	1b40      	subs	r0, r0, r5
 8002c28:	2819      	cmp	r0, #25
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c2a:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c2c:	d9f5      	bls.n	8002c1a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c2e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002c30:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002c38:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c3a:	d50b      	bpl.n	8002c54 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
 8002c3c:	0440      	lsls	r0, r0, #17
 8002c3e:	d409      	bmi.n	8002c54 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 8002c40:	2a20      	cmp	r2, #32
 8002c42:	d007      	beq.n	8002c54 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c4a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c4c:	f7ff f932 	bl	8001eb4 <HAL_GetTick>
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c50:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002c52:	4605      	mov	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	0691      	lsls	r1, r2, #26
 8002c58:	d4df      	bmi.n	8002c1a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c5a:	f7ff f92b 	bl	8001eb4 <HAL_GetTick>
 8002c5e:	1b40      	subs	r0, r0, r5
 8002c60:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c62:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c64:	d9f6      	bls.n	8002c54 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	0692      	lsls	r2, r2, #26
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c6a:	f04f 0620 	mov.w	r6, #32

              status = HAL_ERROR;
 8002c6e:	f04f 0701 	mov.w	r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c72:	d5d5      	bpl.n	8002c20 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x30>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c74:	b90f      	cbnz	r7, 8002c7a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c76:	2220      	movs	r2, #32
 8002c78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c7a:	f046 0604 	orr.w	r6, r6, #4

    status = HAL_ERROR;
 8002c7e:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c80:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c82:	05d7      	lsls	r7, r2, #23
 8002c84:	d531      	bpl.n	8002cea <I2C_WaitOnFlagUntilTimeout.constprop.0+0xfa>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c86:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c8a:	0550      	lsls	r0, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c8c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002c8e:	f046 0601 	orr.w	r6, r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c92:	d504      	bpl.n	8002c9e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xae>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c98:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002c9a:	f046 0608 	orr.w	r6, r6, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c9e:	0592      	lsls	r2, r2, #22
 8002ca0:	d504      	bpl.n	8002cac <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ca6:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002caa:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	0795      	lsls	r5, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002cb0:	bf44      	itt	mi
 8002cb2:	2200      	movmi	r2, #0
 8002cb4:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	07d0      	lsls	r0, r2, #31
 8002cba:	d403      	bmi.n	8002cc4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	481a      	ldr	r0, [pc, #104]	@ (8002d30 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x140>)
 8002cc8:	4002      	ands	r2, r0
 8002cca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002ccc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8002cd2:	4333      	orrs	r3, r6
 8002cd4:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
}
 8002ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cea:	0551      	lsls	r1, r2, #21
 8002cec:	d4d2      	bmi.n	8002c94 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa4>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cee:	0597      	lsls	r7, r2, #22
 8002cf0:	d4d7      	bmi.n	8002ca2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb2>
  if (status != HAL_OK)
 8002cf2:	2d00      	cmp	r5, #0
 8002cf4:	d1da      	bne.n	8002cac <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7ff f8dd 	bl	8001eb4 <HAL_GetTick>
 8002cfa:	eba0 0008 	sub.w	r0, r0, r8
 8002cfe:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d00:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	d902      	bls.n	8002d0a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	0411      	lsls	r1, r2, #16
 8002d08:	d408      	bmi.n	8002d1c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	0412      	lsls	r2, r2, #16
 8002d0e:	f53f af7a 	bmi.w	8002c06 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x16>
  return HAL_OK;
 8002d12:	2000      	movs	r0, #0
}
 8002d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002d18:	4635      	mov	r5, r6
 8002d1a:	e7b1      	b.n	8002c80 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x90>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	4313      	orrs	r3, r2
 8002d22:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8002d2c:	e7d7      	b.n	8002cde <I2C_WaitOnFlagUntilTimeout.constprop.0+0xee>
 8002d2e:	bf00      	nop
 8002d30:	fe00e800 	.word	0xfe00e800

08002d34 <I2C_WaitOnTXISFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d34:	6803      	ldr	r3, [r0, #0]
{
 8002d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d3a:	4680      	mov	r8, r0
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d40:	2610      	movs	r6, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d42:	699c      	ldr	r4, [r3, #24]
 8002d44:	f014 0402 	ands.w	r4, r4, #2
 8002d48:	d168      	bne.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0xe8>
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d4a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d4c:	f012 0c10 	ands.w	ip, r2, #16
 8002d50:	d062      	beq.n	8002e18 <I2C_WaitOnTXISFlagUntilTimeout+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d52:	1c68      	adds	r0, r5, #1
 8002d54:	61de      	str	r6, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d56:	d164      	bne.n	8002e22 <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	0691      	lsls	r1, r2, #26
 8002d5c:	d5fc      	bpl.n	8002d58 <I2C_WaitOnTXISFlagUntilTimeout+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d5e:	2220      	movs	r2, #32
 8002d60:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002d62:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 8002d66:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8002d68:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d6a:	05d0      	lsls	r0, r2, #23
 8002d6c:	d534      	bpl.n	8002dd8 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d72:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d74:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002d76:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d7a:	d504      	bpl.n	8002d86 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d80:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002d82:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d86:	0595      	lsls	r5, r2, #22
 8002d88:	d504      	bpl.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d8e:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d92:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002d98:	bf44      	itt	mi
 8002d9a:	2200      	movmi	r2, #0
 8002d9c:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	07d1      	lsls	r1, r2, #31
 8002da2:	d403      	bmi.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	483b      	ldr	r0, [pc, #236]	@ (8002e9c <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
 8002db0:	4002      	ands	r2, r0
 8002db2:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002db4:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dba:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8002dbc:	ea43 030c 	orr.w	r3, r3, ip
 8002dc0:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc8:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
      return HAL_ERROR;
 8002dd2:	2001      	movs	r0, #1
}
 8002dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dd8:	0550      	lsls	r0, r2, #21
 8002dda:	d4cf      	bmi.n	8002d7c <I2C_WaitOnTXISFlagUntilTimeout+0x48>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ddc:	0594      	lsls	r4, r2, #22
 8002dde:	d4d4      	bmi.n	8002d8a <I2C_WaitOnTXISFlagUntilTimeout+0x56>
  if (status != HAL_OK)
 8002de0:	2900      	cmp	r1, #0
 8002de2:	d1d7      	bne.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	1c6a      	adds	r2, r5, #1
 8002de6:	d0ac      	beq.n	8002d42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de8:	f7ff f864 	bl	8001eb4 <HAL_GetTick>
 8002dec:	1bc3      	subs	r3, r0, r7
 8002dee:	42ab      	cmp	r3, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002df0:	f8d8 3000 	ldr.w	r3, [r8]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df4:	d801      	bhi.n	8002dfa <I2C_WaitOnTXISFlagUntilTimeout+0xc6>
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	d1a3      	bne.n	8002d42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	f012 0202 	ands.w	r2, r2, #2
 8002e00:	d19f      	bne.n	8002d42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e02:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
          return HAL_ERROR;
 8002e16:	e7d9      	b.n	8002dcc <I2C_WaitOnTXISFlagUntilTimeout+0x98>
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	4661      	mov	r1, ip
 8002e1a:	e7a5      	b.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
  return HAL_OK;
 8002e1c:	2000      	movs	r0, #0
}
 8002e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t tickstart = Tickstart;
 8002e22:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	0692      	lsls	r2, r2, #26
 8002e2a:	d432      	bmi.n	8002e92 <I2C_WaitOnTXISFlagUntilTimeout+0x15e>
 8002e2c:	f1ba 0f00 	cmp.w	sl, #0
 8002e30:	d197      	bne.n	8002d62 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7ff f83f 	bl	8001eb4 <HAL_GetTick>
 8002e36:	eba0 0009 	sub.w	r0, r0, r9
 8002e3a:	4285      	cmp	r5, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e3c:	f8d8 3000 	ldr.w	r3, [r8]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e40:	d301      	bcc.n	8002e46 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	d1ef      	bne.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e46:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002e48:	f898 2042 	ldrb.w	r2, [r8, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e4c:	6999      	ldr	r1, [r3, #24]
 8002e4e:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002e50:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e52:	d50c      	bpl.n	8002e6e <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
 8002e54:	0441      	lsls	r1, r0, #17
 8002e56:	d40a      	bmi.n	8002e6e <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
              (tmp1 != I2C_CR2_STOP) && \
 8002e58:	2a20      	cmp	r2, #32
 8002e5a:	d008      	beq.n	8002e6e <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e62:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002e64:	f7ff f826 	bl	8001eb4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e68:	f8d8 3000 	ldr.w	r3, [r8]
            tickstart = HAL_GetTick();
 8002e6c:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	0690      	lsls	r0, r2, #26
 8002e72:	d4d8      	bmi.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e74:	f7ff f81e 	bl	8001eb4 <HAL_GetTick>
 8002e78:	eba0 0009 	sub.w	r0, r0, r9
 8002e7c:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e7e:	f8d8 3000 	ldr.w	r3, [r8]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e82:	d9f4      	bls.n	8002e6e <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	0692      	lsls	r2, r2, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 8002e8c:	f04f 0a01 	mov.w	sl, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e90:	d5cc      	bpl.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
    if (status == HAL_OK)
 8002e92:	f1ba 0f00 	cmp.w	sl, #0
 8002e96:	f43f af62 	beq.w	8002d5e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
 8002e9a:	e762      	b.n	8002d62 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
 8002e9c:	fe00e800 	.word	0xfe00e800

08002ea0 <I2C_WaitOnFlagUntilTimeout>:
{
 8002ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea6:	6800      	ldr	r0, [r0, #0]
{
 8002ea8:	4688      	mov	r8, r1
 8002eaa:	4617      	mov	r7, r2
 8002eac:	461e      	mov	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eae:	f04f 0a10 	mov.w	sl, #16
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb2:	6983      	ldr	r3, [r0, #24]
 8002eb4:	ea38 0303 	bics.w	r3, r8, r3
 8002eb8:	bf0c      	ite	eq
 8002eba:	2301      	moveq	r3, #1
 8002ebc:	2300      	movne	r3, #0
 8002ebe:	42bb      	cmp	r3, r7
 8002ec0:	d16a      	bne.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0xf8>
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ec2:	6984      	ldr	r4, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ec4:	f014 0410 	ands.w	r4, r4, #16
 8002ec8:	d064      	beq.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eca:	1c71      	adds	r1, r6, #1
 8002ecc:	f8c0 a01c 	str.w	sl, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ed0:	d165      	bne.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0xfe>
 8002ed2:	6983      	ldr	r3, [r0, #24]
 8002ed4:	069a      	lsls	r2, r3, #26
 8002ed6:	d5fc      	bpl.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x32>
  uint32_t error_code = 0;
 8002ed8:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eda:	2320      	movs	r3, #32
 8002edc:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002ede:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8002ee2:	2201      	movs	r2, #1
  itflag = hi2c->Instance->ISR;
 8002ee4:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ee6:	05d9      	lsls	r1, r3, #23
 8002ee8:	d531      	bpl.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eea:	f44f 7280 	mov.w	r2, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eee:	055e      	lsls	r6, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ef0:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002ef2:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ef6:	d504      	bpl.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ef8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002efc:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002efe:	f044 0408 	orr.w	r4, r4, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f02:	059a      	lsls	r2, r3, #22
 8002f04:	d504      	bpl.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f06:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f0a:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f0e:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f10:	6983      	ldr	r3, [r0, #24]
 8002f12:	0799      	lsls	r1, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8002f14:	bf44      	itt	mi
 8002f16:	2300      	movmi	r3, #0
 8002f18:	6283      	strmi	r3, [r0, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f1a:	6983      	ldr	r3, [r0, #24]
 8002f1c:	07da      	lsls	r2, r3, #31
 8002f1e:	d403      	bmi.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x88>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f20:	6983      	ldr	r3, [r0, #24]
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8002f28:	6843      	ldr	r3, [r0, #4]
 8002f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003018 <I2C_WaitOnFlagUntilTimeout+0x178>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= error_code;
 8002f30:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8002f36:	4323      	orrs	r3, r4
 8002f38:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3e:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
}
 8002f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f4e:	0559      	lsls	r1, r3, #21
 8002f50:	d4d2      	bmi.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x58>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f52:	059b      	lsls	r3, r3, #22
 8002f54:	d4d7      	bmi.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x66>
  if (status != HAL_OK)
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d1da      	bne.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8002f5a:	1c73      	adds	r3, r6, #1
 8002f5c:	d0a9      	beq.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5e:	f7fe ffa9 	bl	8001eb4 <HAL_GetTick>
 8002f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f64:	1ac3      	subs	r3, r0, r3
 8002f66:	42b3      	cmp	r3, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f68:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	d801      	bhi.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xd0>
 8002f6c:	2e00      	cmp	r6, #0
 8002f6e:	d19e      	bne.n	8002eae <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f70:	6983      	ldr	r3, [r0, #24]
 8002f72:	ea38 0303 	bics.w	r3, r8, r3
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	42bb      	cmp	r3, r7
 8002f7e:	d196      	bne.n	8002eae <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f80:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	430b      	orrs	r3, r1
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8e:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          return HAL_ERROR;
 8002f92:	e7d6      	b.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	4622      	mov	r2, r4
 8002f96:	e7a5      	b.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0x44>
  return HAL_OK;
 8002f98:	2000      	movs	r0, #0
}
 8002f9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t error_code = 0;
 8002f9e:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8002fa0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	46a3      	mov	fp, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fa6:	6983      	ldr	r3, [r0, #24]
 8002fa8:	069b      	lsls	r3, r3, #26
 8002faa:	d42f      	bmi.n	800300c <I2C_WaitOnFlagUntilTimeout+0x16c>
 8002fac:	f1bb 0f00 	cmp.w	fp, #0
 8002fb0:	d195      	bne.n	8002ede <I2C_WaitOnFlagUntilTimeout+0x3e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fe ff7f 	bl	8001eb4 <HAL_GetTick>
 8002fb6:	eba0 0009 	sub.w	r0, r0, r9
 8002fba:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fbc:	6828      	ldr	r0, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	d301      	bcc.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x124>
 8002fc0:	2e00      	cmp	r6, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x106>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fc4:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8002fc6:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fca:	6982      	ldr	r2, [r0, #24]
 8002fcc:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 8002fce:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fd0:	d50b      	bpl.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x14a>
 8002fd2:	044a      	lsls	r2, r1, #17
 8002fd4:	d409      	bmi.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x14a>
              (tmp1 != I2C_CR2_STOP) && \
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d007      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x14a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fda:	6843      	ldr	r3, [r0, #4]
 8002fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fe0:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 8002fe2:	f7fe ff67 	bl	8001eb4 <HAL_GetTick>
 8002fe6:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe8:	6828      	ldr	r0, [r5, #0]
 8002fea:	6983      	ldr	r3, [r0, #24]
 8002fec:	0699      	lsls	r1, r3, #26
 8002fee:	d4da      	bmi.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x106>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ff0:	f7fe ff60 	bl	8001eb4 <HAL_GetTick>
 8002ff4:	eba0 0009 	sub.w	r0, r0, r9
 8002ff8:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ffa:	6828      	ldr	r0, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ffc:	d9f5      	bls.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x14a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ffe:	6983      	ldr	r3, [r0, #24]
 8003000:	069b      	lsls	r3, r3, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 8003006:	f04f 0b01 	mov.w	fp, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800300a:	d5cf      	bpl.n	8002fac <I2C_WaitOnFlagUntilTimeout+0x10c>
    if (status == HAL_OK)
 800300c:	f1bb 0f00 	cmp.w	fp, #0
 8003010:	f43f af63 	beq.w	8002eda <I2C_WaitOnFlagUntilTimeout+0x3a>
 8003014:	e763      	b.n	8002ede <I2C_WaitOnFlagUntilTimeout+0x3e>
 8003016:	bf00      	nop
 8003018:	fe00e800 	.word	0xfe00e800

0800301c <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301c:	6803      	ldr	r3, [r0, #0]
{
 800301e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003022:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003024:	6998      	ldr	r0, [r3, #24]
 8003026:	0684      	lsls	r4, r0, #26
 8003028:	d45e      	bmi.n	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
 800302a:	460e      	mov	r6, r1
 800302c:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302e:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8003032:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003034:	f012 0c10 	ands.w	ip, r2, #16
 8003038:	d059      	beq.n	80030ee <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303a:	1c70      	adds	r0, r6, #1
 800303c:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003040:	d160      	bne.n	8003104 <I2C_WaitOnSTOPFlagUntilTimeout+0xe8>
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	0691      	lsls	r1, r2, #26
 8003046:	d5fc      	bpl.n	8003042 <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
  uint32_t error_code = 0;
 8003048:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800304a:	2220      	movs	r2, #32
 800304c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800304e:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 8003052:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8003054:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003056:	05d0      	lsls	r0, r2, #23
 8003058:	d532      	bpl.n	80030c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800305a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800305e:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003060:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8003062:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003066:	d504      	bpl.n	8003072 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003068:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800306c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800306e:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003072:	0596      	lsls	r6, r2, #22
 8003074:	d504      	bpl.n	8003080 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003076:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800307a:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800307e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003084:	bf44      	itt	mi
 8003086:	2200      	movmi	r2, #0
 8003088:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	07d1      	lsls	r1, r2, #31
 800308e:	d403      	bmi.n	8003098 <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	4836      	ldr	r0, [pc, #216]	@ (8003174 <I2C_WaitOnSTOPFlagUntilTimeout+0x158>)
 800309c:	4002      	ands	r2, r0
 800309e:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80030a0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80030a6:	ea43 030c 	orr.w	r3, r3, ip
 80030aa:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
}
 80030bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030c0:	0550      	lsls	r0, r2, #21
 80030c2:	d4d1      	bmi.n	8003068 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030c4:	0594      	lsls	r4, r2, #22
 80030c6:	d4d6      	bmi.n	8003076 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  if (status != HAL_OK)
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d1d9      	bne.n	8003080 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030cc:	f7fe fef2 	bl	8001eb4 <HAL_GetTick>
 80030d0:	1bc0      	subs	r0, r0, r7
 80030d2:	42b0      	cmp	r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030d4:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	d800      	bhi.n	80030da <I2C_WaitOnSTOPFlagUntilTimeout+0xbe>
 80030d8:	b91e      	cbnz	r6, 80030e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	f012 0220 	ands.w	r2, r2, #32
 80030e0:	d007      	beq.n	80030f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	0692      	lsls	r2, r2, #26
 80030e6:	d5a4      	bpl.n	8003032 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80030e8:	2000      	movs	r0, #0
}
 80030ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	4661      	mov	r1, ip
 80030f0:	e7b0      	b.n	8003054 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f6:	430b      	orrs	r3, r1
 80030f8:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fe:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 8003102:	e7d7      	b.n	80030b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x98>
  uint32_t error_code = 0;
 8003104:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8003106:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	0692      	lsls	r2, r2, #26
 800310e:	d42c      	bmi.n	800316a <I2C_WaitOnSTOPFlagUntilTimeout+0x14e>
 8003110:	f1ba 0f00 	cmp.w	sl, #0
 8003114:	d19b      	bne.n	800304e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7fe fecd 	bl	8001eb4 <HAL_GetTick>
 800311a:	eba0 0009 	sub.w	r0, r0, r9
 800311e:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003120:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003122:	d301      	bcc.n	8003128 <I2C_WaitOnSTOPFlagUntilTimeout+0x10c>
 8003124:	2e00      	cmp	r6, #0
 8003126:	d1f0      	bne.n	800310a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003128:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800312a:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800312e:	6999      	ldr	r1, [r3, #24]
 8003130:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8003132:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003134:	d50b      	bpl.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
 8003136:	0441      	lsls	r1, r0, #17
 8003138:	d409      	bmi.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              (tmp1 != I2C_CR2_STOP) && \
 800313a:	2a20      	cmp	r2, #32
 800313c:	d007      	beq.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003144:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003146:	f7fe feb5 	bl	8001eb4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800314a:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800314c:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	0690      	lsls	r0, r2, #26
 8003152:	d4da      	bmi.n	800310a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003154:	f7fe feae 	bl	8001eb4 <HAL_GetTick>
 8003158:	eba0 0009 	sub.w	r0, r0, r9
 800315c:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800315e:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003160:	d9f5      	bls.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8003164:	f04f 0a01 	mov.w	sl, #1
 8003168:	e7cf      	b.n	800310a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
    if (status == HAL_OK)
 800316a:	f1ba 0f00 	cmp.w	sl, #0
 800316e:	f43f af6c 	beq.w	800304a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003172:	e76c      	b.n	800304e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003174:	fe00e800 	.word	0xfe00e800

08003178 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003178:	2800      	cmp	r0, #0
 800317a:	d054      	beq.n	8003226 <HAL_I2C_Init+0xae>
{
 800317c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800317e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003182:	4604      	mov	r4, r0
 8003184:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003188:	2b00      	cmp	r3, #0
 800318a:	d047      	beq.n	800321c <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 800318c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800318e:	2224      	movs	r2, #36	@ 0x24
 8003190:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003194:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003196:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003198:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800319c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80031a0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031a4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a6:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ac:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ae:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031b0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b2:	d009      	beq.n	80031c8 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031b4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031b8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ba:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e006      	b.n	80031d6 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031cc:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031d6:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031d8:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031da:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80031de:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80031e2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031e4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031e6:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031e8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ea:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031ec:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031f4:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031f6:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031f8:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031fa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031fc:	4301      	orrs	r1, r0
 80031fe:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	f041 0101 	orr.w	r1, r1, #1
 8003206:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800320a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800320e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003212:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8003218:	4610      	mov	r0, r2
}
 800321a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800321c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003220:	f7fe fcca 	bl	8001bb8 <HAL_I2C_MspInit>
 8003224:	e7b2      	b.n	800318c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8003226:	2001      	movs	r0, #1
}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop

0800322c <HAL_I2C_Mem_Write>:
{
 800322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003230:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003232:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
{
 8003236:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003238:	2820      	cmp	r0, #32
{
 800323a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 800323e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003240:	f040 80a2 	bne.w	8003388 <HAL_I2C_Mem_Write+0x15c>
    if ((pData == NULL) || (Size == 0U))
 8003244:	4698      	mov	r8, r3
 8003246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8096 	beq.w	800337a <HAL_I2C_Mem_Write+0x14e>
 800324e:	f1ba 0f00 	cmp.w	sl, #0
 8003252:	f000 8092 	beq.w	800337a <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8003256:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800325a:	2b01      	cmp	r3, #1
 800325c:	f000 8094 	beq.w	8003388 <HAL_I2C_Mem_Write+0x15c>
 8003260:	2301      	movs	r3, #1
 8003262:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003266:	460d      	mov	r5, r1
 8003268:	4691      	mov	r9, r2
 800326a:	f7fe fe23 	bl	8001eb4 <HAL_GetTick>
 800326e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003270:	4601      	mov	r1, r0
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff fcbc 	bl	8002bf0 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8003278:	2800      	cmp	r0, #0
 800327a:	f040 8081 	bne.w	8003380 <HAL_I2C_Mem_Write+0x154>
    hi2c->pBuffPtr  = pData;
 800327e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003280:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003282:	2321      	movs	r3, #33	@ 0x21
 8003284:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	4963      	ldr	r1, [pc, #396]	@ (8003418 <HAL_I2C_Mem_Write+0x1ec>)
    hi2c->XferISR   = NULL;
 800328c:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800328e:	2340      	movs	r3, #64	@ 0x40
 8003290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8003296:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800329a:	6853      	ldr	r3, [r2, #4]
 800329c:	400b      	ands	r3, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800329e:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 80032a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80032aa:	432b      	orrs	r3, r5
 80032ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032b4:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b6:	4639      	mov	r1, r7
 80032b8:	4632      	mov	r2, r6
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7ff fd3a 	bl	8002d34 <I2C_WaitOnTXISFlagUntilTimeout>
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d165      	bne.n	8003390 <HAL_I2C_Mem_Write+0x164>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032c4:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032c8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ca:	d165      	bne.n	8003398 <HAL_I2C_Mem_Write+0x16c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032cc:	fa5f f289 	uxtb.w	r2, r9
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032d2:	9600      	str	r6, [sp, #0]
 80032d4:	463b      	mov	r3, r7
 80032d6:	2200      	movs	r2, #0
 80032d8:	2180      	movs	r1, #128	@ 0x80
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff fde0 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d155      	bne.n	8003390 <HAL_I2C_Mem_Write+0x164>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e6:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2bff      	cmp	r3, #255	@ 0xff
 80032ec:	d970      	bls.n	80033d0 <HAL_I2C_Mem_Write+0x1a4>
  MODIFY_REG(hi2c->Instance->CR2, \
 80032ee:	6853      	ldr	r3, [r2, #4]
 80032f0:	494a      	ldr	r1, [pc, #296]	@ (800341c <HAL_I2C_Mem_Write+0x1f0>)
 80032f2:	400b      	ands	r3, r1
 80032f4:	432b      	orrs	r3, r5
 80032f6:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032fe:	21ff      	movs	r1, #255	@ 0xff
 8003300:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003302:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003304:	e003      	b.n	800330e <HAL_I2C_Mem_Write+0xe2>
    } while (hi2c->XferCount > 0U);
 8003306:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d06e      	beq.n	80033ec <HAL_I2C_Mem_Write+0x1c0>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330e:	4632      	mov	r2, r6
 8003310:	4639      	mov	r1, r7
 8003312:	4620      	mov	r0, r4
 8003314:	f7ff fd0e 	bl	8002d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003318:	2800      	cmp	r0, #0
 800331a:	d131      	bne.n	8003380 <HAL_I2C_Mem_Write+0x154>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800331c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003324:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003326:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003328:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800332a:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800332c:	3b01      	subs	r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003332:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003334:	3a01      	subs	r2, #1
 8003336:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003338:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800333a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0e2      	beq.n	8003306 <HAL_I2C_Mem_Write+0xda>
 8003340:	2a00      	cmp	r2, #0
 8003342:	d1e0      	bne.n	8003306 <HAL_I2C_Mem_Write+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003344:	2180      	movs	r1, #128	@ 0x80
 8003346:	9600      	str	r6, [sp, #0]
 8003348:	463b      	mov	r3, r7
 800334a:	4620      	mov	r0, r4
 800334c:	f7ff fda8 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003350:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003352:	b9a8      	cbnz	r0, 8003380 <HAL_I2C_Mem_Write+0x154>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003354:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003356:	f8df c0c4 	ldr.w	ip, [pc, #196]	@ 800341c <HAL_I2C_Mem_Write+0x1f0>
 800335a:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335c:	b29b      	uxth	r3, r3
 800335e:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003360:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003362:	d928      	bls.n	80033b6 <HAL_I2C_Mem_Write+0x18a>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003364:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003366:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003368:	ea03 030c 	and.w	r3, r3, ip
 800336c:	432b      	orrs	r3, r5
 800336e:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8003372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003376:	6053      	str	r3, [r2, #4]
}
 8003378:	e7c5      	b.n	8003306 <HAL_I2C_Mem_Write+0xda>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800337a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800337e:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003380:	2001      	movs	r0, #1
}
 8003382:	b002      	add	sp, #8
 8003384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003388:	2002      	movs	r0, #2
}
 800338a:	b002      	add	sp, #8
 800338c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_UNLOCK(hi2c);
 8003390:	2300      	movs	r3, #0
 8003392:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003396:	e7f3      	b.n	8003380 <HAL_I2C_Mem_Write+0x154>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003398:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800339e:	4639      	mov	r1, r7
 80033a0:	4632      	mov	r2, r6
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7ff fcc6 	bl	8002d34 <I2C_WaitOnTXISFlagUntilTimeout>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d1f1      	bne.n	8003390 <HAL_I2C_Mem_Write+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	fa5f f289 	uxtb.w	r2, r9
 80033b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80033b4:	e78d      	b.n	80032d2 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80033b6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80033b8:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033be:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80033c4:	4001      	ands	r1, r0
 80033c6:	430b      	orrs	r3, r1
 80033c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033cc:	6053      	str	r3, [r2, #4]
}
 80033ce:	e79a      	b.n	8003306 <HAL_I2C_Mem_Write+0xda>
      hi2c->XferSize = hi2c->XferCount;
 80033d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80033d2:	4812      	ldr	r0, [pc, #72]	@ (800341c <HAL_I2C_Mem_Write+0x1f0>)
 80033d4:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033da:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80033dc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80033e0:	4001      	ands	r1, r0
 80033e2:	430b      	orrs	r3, r1
 80033e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033e8:	6053      	str	r3, [r2, #4]
}
 80033ea:	e790      	b.n	800330e <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	4632      	mov	r2, r6
 80033ee:	4639      	mov	r1, r7
 80033f0:	4620      	mov	r0, r4
 80033f2:	f7ff fe13 	bl	800301c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d1c2      	bne.n	8003380 <HAL_I2C_Mem_Write+0x154>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80033fc:	4d08      	ldr	r5, [pc, #32]	@ (8003420 <HAL_I2C_Mem_Write+0x1f4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fe:	2120      	movs	r1, #32
 8003400:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	402a      	ands	r2, r5
 8003406:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003408:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800340c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003410:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8003414:	e7b5      	b.n	8003382 <HAL_I2C_Mem_Write+0x156>
 8003416:	bf00      	nop
 8003418:	fc009800 	.word	0xfc009800
 800341c:	fc009c00 	.word	0xfc009c00
 8003420:	fe00e800 	.word	0xfe00e800

08003424 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003424:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8003428:	2a20      	cmp	r2, #32
 800342a:	d123      	bne.n	8003474 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800342c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003430:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003434:	2a01      	cmp	r2, #1
 8003436:	4603      	mov	r3, r0
 8003438:	d01c      	beq.n	8003474 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800343a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800343c:	2024      	movs	r0, #36	@ 0x24
{
 800343e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003440:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003444:	6810      	ldr	r0, [r2, #0]
 8003446:	f020 0001 	bic.w	r0, r0, #1
 800344a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800344c:	6810      	ldr	r0, [r2, #0]
 800344e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003452:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003454:	6810      	ldr	r0, [r2, #0]
 8003456:	4301      	orrs	r1, r0
 8003458:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800345a:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8003460:	f041 0101 	orr.w	r1, r1, #1
 8003464:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003466:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800346a:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 800346e:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003470:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8003474:	2002      	movs	r0, #2
}
 8003476:	4770      	bx	lr

08003478 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003478:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800347c:	2a20      	cmp	r2, #32
 800347e:	d122      	bne.n	80034c6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8003480:	b500      	push	{lr}
 8003482:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003486:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800348a:	2a01      	cmp	r2, #1
 800348c:	4603      	mov	r3, r0
 800348e:	d01c      	beq.n	80034ca <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003490:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003492:	2024      	movs	r0, #36	@ 0x24
 8003494:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003498:	6810      	ldr	r0, [r2, #0]
 800349a:	f020 0001 	bic.w	r0, r0, #1
 800349e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034a0:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034a2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034a6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034aa:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ac:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ae:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 80034b2:	f041 0101 	orr.w	r1, r1, #1
 80034b6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80034bc:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 80034c0:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 80034c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80034c6:	2002      	movs	r0, #2
}
 80034c8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80034ca:	2002      	movs	r0, #2
}
 80034cc:	f85d fb04 	ldr.w	pc, [sp], #4

080034d0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034d0:	4b02      	ldr	r3, [pc, #8]	@ (80034dc <HAL_PWREx_GetVoltageRange+0xc>)
 80034d2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80034d4:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40007000 	.word	0x40007000

080034e0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034e0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80034e4:	d00e      	beq.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80034e8:	6813      	ldr	r3, [r2, #0]
 80034ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f2:	d005      	beq.n	8003500 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003500:	2000      	movs	r0, #0
 8003502:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003504:	4913      	ldr	r1, [pc, #76]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003506:	680b      	ldr	r3, [r1, #0]
 8003508:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800350c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003510:	d0f6      	beq.n	8003500 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003512:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003514:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003516:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800351a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800351e:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	4a0e      	ldr	r2, [pc, #56]	@ (800355c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003524:	2032      	movs	r0, #50	@ 0x32
 8003526:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352a:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003532:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003534:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003538:	d506      	bpl.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x68>
 800353a:	e000      	b.n	800353e <HAL_PWREx_ControlVoltageScaling+0x5e>
 800353c:	b123      	cbz	r3, 8003548 <HAL_PWREx_ControlVoltageScaling+0x68>
 800353e:	694a      	ldr	r2, [r1, #20]
 8003540:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8003542:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003546:	d4f9      	bmi.n	800353c <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003548:	4b02      	ldr	r3, [pc, #8]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	055b      	lsls	r3, r3, #21
 800354e:	d5d7      	bpl.n	8003500 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8003550:	2003      	movs	r0, #3
}
 8003552:	4770      	bx	lr
 8003554:	40007000 	.word	0x40007000
 8003558:	20000000 	.word	0x20000000
 800355c:	431bde83 	.word	0x431bde83

08003560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003560:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003562:	4d20      	ldr	r5, [pc, #128]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003564:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003566:	00db      	lsls	r3, r3, #3
{
 8003568:	b083      	sub	sp, #12
 800356a:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800356c:	d51a      	bpl.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800356e:	f7ff ffaf 	bl	80034d0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003572:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003576:	d027      	beq.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003578:	2c80      	cmp	r4, #128	@ 0x80
 800357a:	d82c      	bhi.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800357c:	d02f      	beq.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800357e:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8003582:	fab4 f484 	clz	r4, r4
 8003586:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003588:	4917      	ldr	r1, [pc, #92]	@ (80035e8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800358a:	680b      	ldr	r3, [r1, #0]
 800358c:	f023 0307 	bic.w	r3, r3, #7
 8003590:	4323      	orrs	r3, r4
 8003592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003594:	6808      	ldr	r0, [r1, #0]
 8003596:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800359a:	1b00      	subs	r0, r0, r4
 800359c:	bf18      	it	ne
 800359e:	2001      	movne	r0, #1
 80035a0:	b003      	add	sp, #12
 80035a2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	65ab      	str	r3, [r5, #88]	@ 0x58
 80035ac:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80035b6:	f7ff ff8b 	bl	80034d0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035bc:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c6:	d1d7      	bne.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80035c8:	2c80      	cmp	r4, #128	@ 0x80
 80035ca:	d906      	bls.n	80035da <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80035cc:	2ca1      	cmp	r4, #161	@ 0xa1
 80035ce:	bf34      	ite	cc
 80035d0:	2401      	movcc	r4, #1
 80035d2:	2402      	movcs	r4, #2
 80035d4:	e7d8      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 80035d6:	2403      	movs	r4, #3
 80035d8:	e7d6      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035da:	2400      	movs	r4, #0
 80035dc:	e7d4      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 80035de:	2402      	movs	r4, #2
 80035e0:	e7d2      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ec:	4a28      	ldr	r2, [pc, #160]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035ee:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f0:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035f2:	f013 030c 	ands.w	r3, r3, #12
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x18>
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d035      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d141      	bne.n	8003684 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8003600:	4824      	ldr	r0, [pc, #144]	@ (8003694 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003602:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003604:	4a22      	ldr	r2, [pc, #136]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003606:	6811      	ldr	r1, [r2, #0]
 8003608:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800360a:	bf54      	ite	pl
 800360c:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003610:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8003612:	4921      	ldr	r1, [pc, #132]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003614:	bf54      	ite	pl
 8003616:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800361a:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800361e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003622:	b303      	cbz	r3, 8003666 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003624:	2b0c      	cmp	r3, #12
 8003626:	d11d      	bne.n	8003664 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003628:	4b19      	ldr	r3, [pc, #100]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xa4>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003630:	2b02      	cmp	r3, #2
 8003632:	d025      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x94>
 8003634:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003636:	2b03      	cmp	r3, #3
 8003638:	bf08      	it	eq
 800363a:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800363c:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xa4>)
 800363e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003640:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003648:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800364c:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003650:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003652:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003656:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003658:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800365a:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800365e:	fbb2 f0f3 	udiv	r0, r2, r3
 8003662:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003664:	2000      	movs	r0, #0
}
 8003666:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003668:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800366c:	2a01      	cmp	r2, #1
 800366e:	d0c9      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003670:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003678:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800367a:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800367e:	d1d9      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8003680:	4804      	ldr	r0, [pc, #16]	@ (8003694 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003682:	e7db      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8003684:	2b08      	cmp	r3, #8
 8003686:	4805      	ldr	r0, [pc, #20]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003688:	bf18      	it	ne
 800368a:	2000      	movne	r0, #0
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	00f42400 	.word	0x00f42400
 8003698:	080062e0 	.word	0x080062e0
 800369c:	007a1200 	.word	0x007a1200

080036a0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80036a0:	2800      	cmp	r0, #0
 80036a2:	f000 81f0 	beq.w	8003a86 <HAL_RCC_OscConfig+0x3e6>
{
 80036a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036aa:	4aa7      	ldr	r2, [pc, #668]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036ac:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ae:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b0:	68d6      	ldr	r6, [r2, #12]
 80036b2:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036b4:	06d8      	lsls	r0, r3, #27
{
 80036b6:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036bc:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036c0:	d52e      	bpl.n	8003720 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036c2:	2d00      	cmp	r5, #0
 80036c4:	f000 8100 	beq.w	80038c8 <HAL_RCC_OscConfig+0x228>
 80036c8:	2d0c      	cmp	r5, #12
 80036ca:	f000 80fa 	beq.w	80038c2 <HAL_RCC_OscConfig+0x222>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036ce:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80036d0:	4f9d      	ldr	r7, [pc, #628]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 817e 	beq.w	80039d4 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_MSI_ENABLE();
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80036e0:	f7fe fbe8 	bl	8001eb4 <HAL_GetTick>
 80036e4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e6:	e006      	b.n	80036f6 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e8:	f7fe fbe4 	bl	8001eb4 <HAL_GetTick>
 80036ec:	eba0 0008 	sub.w	r0, r0, r8
 80036f0:	2802      	cmp	r0, #2
 80036f2:	f200 817f 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	079b      	lsls	r3, r3, #30
 80036fa:	d5f5      	bpl.n	80036e8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f043 0308 	orr.w	r3, r3, #8
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6a22      	ldr	r2, [r4, #32]
 8003708:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800370c:	4313      	orrs	r3, r2
 800370e:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69e2      	ldr	r2, [r4, #28]
 8003714:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800371c:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	07d9      	lsls	r1, r3, #31
 8003722:	f100 80a5 	bmi.w	8003870 <HAL_RCC_OscConfig+0x1d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	0799      	lsls	r1, r3, #30
 8003728:	d523      	bpl.n	8003772 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800372a:	2d04      	cmp	r5, #4
 800372c:	f000 8142 	beq.w	80039b4 <HAL_RCC_OscConfig+0x314>
 8003730:	2d0c      	cmp	r5, #12
 8003732:	f000 813c 	beq.w	80039ae <HAL_RCC_OscConfig+0x30e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003736:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8003738:	4e83      	ldr	r6, [pc, #524]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8175 	beq.w	8003a2a <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8003740:	6833      	ldr	r3, [r6, #0]
 8003742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003746:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003748:	f7fe fbb4 	bl	8001eb4 <HAL_GetTick>
 800374c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374e:	e005      	b.n	800375c <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003750:	f7fe fbb0 	bl	8001eb4 <HAL_GetTick>
 8003754:	1bc0      	subs	r0, r0, r7
 8003756:	2802      	cmp	r0, #2
 8003758:	f200 814c 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375c:	6833      	ldr	r3, [r6, #0]
 800375e:	055b      	lsls	r3, r3, #21
 8003760:	d5f6      	bpl.n	8003750 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	6873      	ldr	r3, [r6, #4]
 8003764:	6922      	ldr	r2, [r4, #16]
 8003766:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800376a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800376e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	0719      	lsls	r1, r3, #28
 8003774:	d519      	bpl.n	80037aa <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003776:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003778:	4e73      	ldr	r6, [pc, #460]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8103 	beq.w	8003986 <HAL_RCC_OscConfig+0x2e6>
      __HAL_RCC_LSI_ENABLE();
 8003780:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800378c:	f7fe fb92 	bl	8001eb4 <HAL_GetTick>
 8003790:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003792:	e005      	b.n	80037a0 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003794:	f7fe fb8e 	bl	8001eb4 <HAL_GetTick>
 8003798:	1bc0      	subs	r0, r0, r7
 800379a:	2802      	cmp	r0, #2
 800379c:	f200 812a 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a0:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80037a4:	079a      	lsls	r2, r3, #30
 80037a6:	d5f5      	bpl.n	8003794 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	0758      	lsls	r0, r3, #29
 80037ac:	d53e      	bpl.n	800382c <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037ae:	4b66      	ldr	r3, [pc, #408]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
 80037b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037b2:	00d1      	lsls	r1, r2, #3
 80037b4:	f100 8137 	bmi.w	8003a26 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80037be:	659a      	str	r2, [r3, #88]	@ 0x58
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037ca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037cc:	4f5f      	ldr	r7, [pc, #380]	@ (800394c <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	05da      	lsls	r2, r3, #23
 80037d2:	f140 8172 	bpl.w	8003aba <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d6:	68a3      	ldr	r3, [r4, #8]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	f000 8138 	beq.w	8003a4e <HAL_RCC_OscConfig+0x3ae>
 80037de:	2b05      	cmp	r3, #5
 80037e0:	f000 81ec 	beq.w	8003bbc <HAL_RCC_OscConfig+0x51c>
 80037e4:	4f58      	ldr	r7, [pc, #352]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
 80037e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80037f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f040 812c 	bne.w	8003a5c <HAL_RCC_OscConfig+0x3bc>
      tickstart = HAL_GetTick();
 8003804:	f7fe fb56 	bl	8001eb4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800380c:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800380e:	e006      	b.n	800381e <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7fe fb50 	bl	8001eb4 <HAL_GetTick>
 8003814:	eba0 0008 	sub.w	r0, r0, r8
 8003818:	4548      	cmp	r0, r9
 800381a:	f200 80eb 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800381e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003822:	0799      	lsls	r1, r3, #30
 8003824:	d4f4      	bmi.n	8003810 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8003826:	2e00      	cmp	r6, #0
 8003828:	f040 8159 	bne.w	8003ade <HAL_RCC_OscConfig+0x43e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800382c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800382e:	b1db      	cbz	r3, 8003868 <HAL_RCC_OscConfig+0x1c8>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003830:	2b02      	cmp	r3, #2
 8003832:	f000 816d 	beq.w	8003b10 <HAL_RCC_OscConfig+0x470>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003836:	2d0c      	cmp	r5, #12
 8003838:	f000 8095 	beq.w	8003966 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 800383c:	4c42      	ldr	r4, [pc, #264]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003844:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003846:	f7fe fb35 	bl	8001eb4 <HAL_GetTick>
 800384a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	e005      	b.n	800385a <HAL_RCC_OscConfig+0x1ba>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe fb31 	bl	8001eb4 <HAL_GetTick>
 8003852:	1b40      	subs	r0, r0, r5
 8003854:	2802      	cmp	r0, #2
 8003856:	f200 80cd 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	d4f6      	bmi.n	800384e <HAL_RCC_OscConfig+0x1ae>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003860:	68e2      	ldr	r2, [r4, #12]
 8003862:	4b3b      	ldr	r3, [pc, #236]	@ (8003950 <HAL_RCC_OscConfig+0x2b0>)
 8003864:	4013      	ands	r3, r2
 8003866:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8003868:	2000      	movs	r0, #0
}
 800386a:	b003      	add	sp, #12
 800386c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003870:	2d08      	cmp	r5, #8
 8003872:	d07e      	beq.n	8003972 <HAL_RCC_OscConfig+0x2d2>
 8003874:	2d0c      	cmp	r5, #12
 8003876:	d07a      	beq.n	800396e <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003878:	6863      	ldr	r3, [r4, #4]
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387e:	f000 80bd 	beq.w	80039fc <HAL_RCC_OscConfig+0x35c>
 8003882:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003886:	f000 8136 	beq.w	8003af6 <HAL_RCC_OscConfig+0x456>
 800388a:	4f2f      	ldr	r7, [pc, #188]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003892:	603a      	str	r2, [r7, #0]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800389a:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800389c:	2b00      	cmp	r3, #0
 800389e:	f040 80b2 	bne.w	8003a06 <HAL_RCC_OscConfig+0x366>
        tickstart = HAL_GetTick();
 80038a2:	f7fe fb07 	bl	8001eb4 <HAL_GetTick>
 80038a6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a8:	e006      	b.n	80038b8 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038aa:	f7fe fb03 	bl	8001eb4 <HAL_GetTick>
 80038ae:	eba0 0008 	sub.w	r0, r0, r8
 80038b2:	2864      	cmp	r0, #100	@ 0x64
 80038b4:	f200 809e 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	0398      	lsls	r0, r3, #14
 80038bc:	d4f5      	bmi.n	80038aa <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	e731      	b.n	8003726 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038c2:	2e01      	cmp	r6, #1
 80038c4:	f47f af03 	bne.w	80036ce <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0799      	lsls	r1, r3, #30
 80038ce:	d447      	bmi.n	8003960 <HAL_RCC_OscConfig+0x2c0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
 80038d2:	6a20      	ldr	r0, [r4, #32]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	0712      	lsls	r2, r2, #28
 80038d8:	bf56      	itet	pl
 80038da:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 80038de:	681b      	ldrmi	r3, [r3, #0]
 80038e0:	091b      	lsrpl	r3, r3, #4
 80038e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e6:	4298      	cmp	r0, r3
 80038e8:	f200 80cf 	bhi.w	8003a8a <HAL_RCC_OscConfig+0x3ea>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ec:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	f042 0208 	orr.w	r2, r2, #8
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80038fc:	4302      	orrs	r2, r0
 80038fe:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	69e1      	ldr	r1, [r4, #28]
 8003904:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003908:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800390c:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800390e:	2d00      	cmp	r5, #0
 8003910:	f000 80eb 	beq.w	8003aea <HAL_RCC_OscConfig+0x44a>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003914:	f7ff fe6a 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8003918:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <HAL_RCC_OscConfig+0x2a8>)
 800391a:	4a0e      	ldr	r2, [pc, #56]	@ (8003954 <HAL_RCC_OscConfig+0x2b4>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003922:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8003924:	4a0c      	ldr	r2, [pc, #48]	@ (8003958 <HAL_RCC_OscConfig+0x2b8>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800392e:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003930:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <HAL_RCC_OscConfig+0x2bc>)
 8003932:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003934:	f7fe fa74 	bl	8001e20 <HAL_InitTick>
        if(status != HAL_OK)
 8003938:	2800      	cmp	r0, #0
 800393a:	d196      	bne.n	800386a <HAL_RCC_OscConfig+0x1ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	07d9      	lsls	r1, r3, #31
 8003940:	f57f aef1 	bpl.w	8003726 <HAL_RCC_OscConfig+0x86>
 8003944:	e794      	b.n	8003870 <HAL_RCC_OscConfig+0x1d0>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
 8003950:	feeefffc 	.word	0xfeeefffc
 8003954:	08006318 	.word	0x08006318
 8003958:	20000008 	.word	0x20000008
 800395c:	20000000 	.word	0x20000000
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003960:	69a3      	ldr	r3, [r4, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1b4      	bne.n	80038d0 <HAL_RCC_OscConfig+0x230>
    return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
}
 8003968:	b003      	add	sp, #12
 800396a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800396e:	2e03      	cmp	r6, #3
 8003970:	d182      	bne.n	8003878 <HAL_RCC_OscConfig+0x1d8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003972:	4a99      	ldr	r2, [pc, #612]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	0392      	lsls	r2, r2, #14
 8003978:	f57f aed5 	bpl.w	8003726 <HAL_RCC_OscConfig+0x86>
 800397c:	6862      	ldr	r2, [r4, #4]
 800397e:	2a00      	cmp	r2, #0
 8003980:	f47f aed1 	bne.w	8003726 <HAL_RCC_OscConfig+0x86>
 8003984:	e7ef      	b.n	8003966 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_LSI_DISABLE();
 8003986:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8003992:	f7fe fa8f 	bl	8001eb4 <HAL_GetTick>
 8003996:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003998:	e004      	b.n	80039a4 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe fa8b 	bl	8001eb4 <HAL_GetTick>
 800399e:	1bc0      	subs	r0, r0, r7
 80039a0:	2802      	cmp	r0, #2
 80039a2:	d827      	bhi.n	80039f4 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a4:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80039a8:	079b      	lsls	r3, r3, #30
 80039aa:	d4f6      	bmi.n	800399a <HAL_RCC_OscConfig+0x2fa>
 80039ac:	e6fc      	b.n	80037a8 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039ae:	2e02      	cmp	r6, #2
 80039b0:	f47f aec1 	bne.w	8003736 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b4:	4a88      	ldr	r2, [pc, #544]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	0552      	lsls	r2, r2, #21
 80039ba:	d502      	bpl.n	80039c2 <HAL_RCC_OscConfig+0x322>
 80039bc:	68e2      	ldr	r2, [r4, #12]
 80039be:	2a00      	cmp	r2, #0
 80039c0:	d0d1      	beq.n	8003966 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4985      	ldr	r1, [pc, #532]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 80039c4:	6920      	ldr	r0, [r4, #16]
 80039c6:	684a      	ldr	r2, [r1, #4]
 80039c8:	f022 52f8 	bic.w	r2, r2, #520093696	@ 0x1f000000
 80039cc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80039d0:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d2:	e6ce      	b.n	8003772 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80039dc:	f7fe fa6a 	bl	8001eb4 <HAL_GetTick>
 80039e0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	0798      	lsls	r0, r3, #30
 80039e6:	d5a9      	bpl.n	800393c <HAL_RCC_OscConfig+0x29c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039e8:	f7fe fa64 	bl	8001eb4 <HAL_GetTick>
 80039ec:	eba0 0008 	sub.w	r0, r0, r8
 80039f0:	2802      	cmp	r0, #2
 80039f2:	d9f6      	bls.n	80039e2 <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 80039f4:	2003      	movs	r0, #3
}
 80039f6:	b003      	add	sp, #12
 80039f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	4a76      	ldr	r2, [pc, #472]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 80039fe:	6813      	ldr	r3, [r2, #0]
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a06:	f7fe fa55 	bl	8001eb4 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0a:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 8003bd8 <HAL_RCC_OscConfig+0x538>
        tickstart = HAL_GetTick();
 8003a0e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a10:	e004      	b.n	8003a1c <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a12:	f7fe fa4f 	bl	8001eb4 <HAL_GetTick>
 8003a16:	1bc0      	subs	r0, r0, r7
 8003a18:	2864      	cmp	r0, #100	@ 0x64
 8003a1a:	d8eb      	bhi.n	80039f4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a20:	039b      	lsls	r3, r3, #14
 8003a22:	d5f6      	bpl.n	8003a12 <HAL_RCC_OscConfig+0x372>
 8003a24:	e74b      	b.n	80038be <HAL_RCC_OscConfig+0x21e>
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2600      	movs	r6, #0
 8003a28:	e6d0      	b.n	80037cc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8003a2a:	6833      	ldr	r3, [r6, #0]
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a30:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003a32:	f7fe fa3f 	bl	8001eb4 <HAL_GetTick>
 8003a36:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a38:	e004      	b.n	8003a44 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fe fa3b 	bl	8001eb4 <HAL_GetTick>
 8003a3e:	1bc0      	subs	r0, r0, r7
 8003a40:	2802      	cmp	r0, #2
 8003a42:	d8d7      	bhi.n	80039f4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	0558      	lsls	r0, r3, #21
 8003a48:	d4f7      	bmi.n	8003a3a <HAL_RCC_OscConfig+0x39a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	e691      	b.n	8003772 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4e:	4a62      	ldr	r2, [pc, #392]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 8003a50:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fa2a 	bl	8001eb4 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a60:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 8003bd8 <HAL_RCC_OscConfig+0x538>
      tickstart = HAL_GetTick();
 8003a64:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6a:	e004      	b.n	8003a76 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fa22 	bl	8001eb4 <HAL_GetTick>
 8003a70:	1bc0      	subs	r0, r0, r7
 8003a72:	4548      	cmp	r0, r9
 8003a74:	d8be      	bhi.n	80039f4 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a76:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8003a7a:	0798      	lsls	r0, r3, #30
 8003a7c:	d5f6      	bpl.n	8003a6c <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8003a7e:	2e00      	cmp	r6, #0
 8003a80:	f43f aed4 	beq.w	800382c <HAL_RCC_OscConfig+0x18c>
 8003a84:	e02b      	b.n	8003ade <HAL_RCC_OscConfig+0x43e>
    return HAL_ERROR;
 8003a86:	2001      	movs	r0, #1
}
 8003a88:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a8a:	f7ff fd69 	bl	8003560 <RCC_SetFlashLatencyFromMSIRange>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	f47f af69 	bne.w	8003966 <HAL_RCC_OscConfig+0x2c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a94:	4b50      	ldr	r3, [pc, #320]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	f042 0208 	orr.w	r2, r2, #8
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	6a21      	ldr	r1, [r4, #32]
 8003aa2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	69e1      	ldr	r1, [r4, #28]
 8003aae:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003ab2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	e72c      	b.n	8003914 <HAL_RCC_OscConfig+0x274>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003ac2:	f7fe f9f7 	bl	8001eb4 <HAL_GetTick>
 8003ac6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	05db      	lsls	r3, r3, #23
 8003acc:	f53f ae83 	bmi.w	80037d6 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7fe f9f0 	bl	8001eb4 <HAL_GetTick>
 8003ad4:	eba0 0008 	sub.w	r0, r0, r8
 8003ad8:	2802      	cmp	r0, #2
 8003ada:	d9f5      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x428>
 8003adc:	e78a      	b.n	80039f4 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ade:	4a3e      	ldr	r2, [pc, #248]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 8003ae0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae8:	e6a0      	b.n	800382c <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aea:	f7ff fd39 	bl	8003560 <RCC_SetFlashLatencyFromMSIRange>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	f43f af10 	beq.w	8003914 <HAL_RCC_OscConfig+0x274>
 8003af4:	e737      	b.n	8003966 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003afa:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b0c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b0e:	e77a      	b.n	8003a06 <HAL_RCC_OscConfig+0x366>
      pll_config = RCC->PLLCFGR;
 8003b10:	4e31      	ldr	r6, [pc, #196]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8003b14:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	f003 0103 	and.w	r1, r3, #3
 8003b1a:	4291      	cmp	r1, r2
 8003b1c:	d060      	beq.n	8003be0 <HAL_RCC_OscConfig+0x540>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b1e:	2d0c      	cmp	r5, #12
 8003b20:	f43f af21 	beq.w	8003966 <HAL_RCC_OscConfig+0x2c6>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b24:	4d2c      	ldr	r5, [pc, #176]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 8003b26:	682b      	ldr	r3, [r5, #0]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	f53f af1c 	bmi.w	8003966 <HAL_RCC_OscConfig+0x2c6>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b2e:	682b      	ldr	r3, [r5, #0]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	f53f af18 	bmi.w	8003966 <HAL_RCC_OscConfig+0x2c6>
            __HAL_RCC_PLL_DISABLE();
 8003b36:	682b      	ldr	r3, [r5, #0]
 8003b38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b3c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8003b3e:	f7fe f9b9 	bl	8001eb4 <HAL_GetTick>
 8003b42:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b44:	e005      	b.n	8003b52 <HAL_RCC_OscConfig+0x4b2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe f9b5 	bl	8001eb4 <HAL_GetTick>
 8003b4a:	1b80      	subs	r0, r0, r6
 8003b4c:	2802      	cmp	r0, #2
 8003b4e:	f63f af51 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b52:	682b      	ldr	r3, [r5, #0]
 8003b54:	019f      	lsls	r7, r3, #6
 8003b56:	d4f6      	bmi.n	8003b46 <HAL_RCC_OscConfig+0x4a6>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b58:	68e9      	ldr	r1, [r5, #12]
 8003b5a:	4b20      	ldr	r3, [pc, #128]	@ (8003bdc <HAL_RCC_OscConfig+0x53c>)
 8003b5c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5e:	4e1e      	ldr	r6, [pc, #120]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b60:	400b      	ands	r3, r1
 8003b62:	4313      	orrs	r3, r2
 8003b64:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	@ 0x30
 8003b68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b6c:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 8003b70:	3a01      	subs	r2, #1
 8003b72:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003b76:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003b78:	0900      	lsrs	r0, r0, #4
 8003b7a:	0849      	lsrs	r1, r1, #1
 8003b7c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8003b80:	3901      	subs	r1, #1
 8003b82:	0852      	lsrs	r2, r2, #1
 8003b84:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003b88:	3a01      	subs	r2, #1
 8003b8a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003b8e:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b96:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b98:	68eb      	ldr	r3, [r5, #12]
 8003b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b9e:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8003ba0:	f7fe f988 	bl	8001eb4 <HAL_GetTick>
 8003ba4:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba6:	e005      	b.n	8003bb4 <HAL_RCC_OscConfig+0x514>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fe f984 	bl	8001eb4 <HAL_GetTick>
 8003bac:	1b00      	subs	r0, r0, r4
 8003bae:	2802      	cmp	r0, #2
 8003bb0:	f63f af20 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb4:	6833      	ldr	r3, [r6, #0]
 8003bb6:	0198      	lsls	r0, r3, #6
 8003bb8:	d5f6      	bpl.n	8003ba8 <HAL_RCC_OscConfig+0x508>
 8003bba:	e655      	b.n	8003868 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCC_OscConfig+0x538>)
 8003bbe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003bc2:	f042 0204 	orr.w	r2, r2, #4
 8003bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8003bca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd6:	e741      	b.n	8003a5c <HAL_RCC_OscConfig+0x3bc>
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003be2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003be6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003bec:	d197      	bne.n	8003b1e <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bf0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bf4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003bf8:	d191      	bne.n	8003b1e <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bfa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003bfc:	3a07      	subs	r2, #7
 8003bfe:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 8003c02:	bf18      	it	ne
 8003c04:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c06:	4291      	cmp	r1, r2
 8003c08:	d189      	bne.n	8003b1e <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003c0c:	0852      	lsrs	r2, r2, #1
 8003c0e:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8003c12:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c14:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003c18:	d181      	bne.n	8003b1e <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c1a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c1c:	0852      	lsrs	r2, r2, #1
 8003c1e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003c22:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c24:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003c28:	f47f af79 	bne.w	8003b1e <HAL_RCC_OscConfig+0x47e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2c:	6833      	ldr	r3, [r6, #0]
 8003c2e:	0199      	lsls	r1, r3, #6
 8003c30:	f53f ae1a 	bmi.w	8003868 <HAL_RCC_OscConfig+0x1c8>
          __HAL_RCC_PLL_ENABLE();
 8003c34:	6833      	ldr	r3, [r6, #0]
 8003c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c3a:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c3c:	68f3      	ldr	r3, [r6, #12]
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c42:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8003c44:	f7fe f936 	bl	8001eb4 <HAL_GetTick>
 8003c48:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4a:	e005      	b.n	8003c58 <HAL_RCC_OscConfig+0x5b8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fe f932 	bl	8001eb4 <HAL_GetTick>
 8003c50:	1b03      	subs	r3, r0, r4
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	f63f aece 	bhi.w	80039f4 <HAL_RCC_OscConfig+0x354>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c58:	6833      	ldr	r3, [r6, #0]
 8003c5a:	019a      	lsls	r2, r3, #6
 8003c5c:	d5f6      	bpl.n	8003c4c <HAL_RCC_OscConfig+0x5ac>
 8003c5e:	e603      	b.n	8003868 <HAL_RCC_OscConfig+0x1c8>

08003c60 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003c60:	2800      	cmp	r0, #0
 8003c62:	f000 80a0 	beq.w	8003da6 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c66:	4a54      	ldr	r2, [pc, #336]	@ (8003db8 <HAL_RCC_ClockConfig+0x158>)
 8003c68:	6813      	ldr	r3, [r2, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	428b      	cmp	r3, r1
{
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	460d      	mov	r5, r1
 8003c76:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	d20c      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	f023 0307 	bic.w	r3, r3, #7
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c84:	6813      	ldr	r3, [r2, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	428b      	cmp	r3, r1
 8003c8c:	d002      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003c8e:	2001      	movs	r0, #1
}
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c98:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	d570      	bpl.n	8003d80 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c9e:	4e47      	ldr	r6, [pc, #284]	@ (8003dbc <HAL_RCC_ClockConfig+0x15c>)
 8003ca0:	68a0      	ldr	r0, [r4, #8]
 8003ca2:	68b1      	ldr	r1, [r6, #8]
 8003ca4:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8003ca8:	4288      	cmp	r0, r1
 8003caa:	d904      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cac:	68b1      	ldr	r1, [r6, #8]
 8003cae:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8003cb2:	4301      	orrs	r1, r0
 8003cb4:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	b332      	cbz	r2, 8003d06 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb8:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cba:	4b40      	ldr	r3, [pc, #256]	@ (8003dbc <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cbc:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc0:	d065      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc2:	2a02      	cmp	r2, #2
 8003cc4:	d06c      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	d171      	bne.n	8003dae <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cca:	079e      	lsls	r6, r3, #30
 8003ccc:	d5df      	bpl.n	8003c8e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4e3b      	ldr	r6, [pc, #236]	@ (8003dbc <HAL_RCC_ClockConfig+0x15c>)
 8003cd0:	68b3      	ldr	r3, [r6, #8]
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003cda:	f7fe f8eb 	bl	8001eb4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cde:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003ce2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce6:	f7fe f8e5 	bl	8001eb4 <HAL_GetTick>
 8003cea:	1bc0      	subs	r0, r0, r7
 8003cec:	4540      	cmp	r0, r8
 8003cee:	d85c      	bhi.n	8003daa <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf0:	68b3      	ldr	r3, [r6, #8]
 8003cf2:	6862      	ldr	r2, [r4, #4]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cfc:	d1f3      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	0799      	lsls	r1, r3, #30
 8003d02:	d506      	bpl.n	8003d12 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d04:	68a0      	ldr	r0, [r4, #8]
 8003d06:	492d      	ldr	r1, [pc, #180]	@ (8003dbc <HAL_RCC_ClockConfig+0x15c>)
 8003d08:	688a      	ldr	r2, [r1, #8]
 8003d0a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003d0e:	4282      	cmp	r2, r0
 8003d10:	d840      	bhi.n	8003d94 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d12:	4929      	ldr	r1, [pc, #164]	@ (8003db8 <HAL_RCC_ClockConfig+0x158>)
 8003d14:	680a      	ldr	r2, [r1, #0]
 8003d16:	f002 0207 	and.w	r2, r2, #7
 8003d1a:	42aa      	cmp	r2, r5
 8003d1c:	d909      	bls.n	8003d32 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	680a      	ldr	r2, [r1, #0]
 8003d20:	f022 0207 	bic.w	r2, r2, #7
 8003d24:	432a      	orrs	r2, r5
 8003d26:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d28:	680a      	ldr	r2, [r1, #0]
 8003d2a:	f002 0207 	and.w	r2, r2, #7
 8003d2e:	42aa      	cmp	r2, r5
 8003d30:	d1ad      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d32:	075a      	lsls	r2, r3, #29
 8003d34:	d506      	bpl.n	8003d44 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d36:	4921      	ldr	r1, [pc, #132]	@ (8003dbc <HAL_RCC_ClockConfig+0x15c>)
 8003d38:	68e0      	ldr	r0, [r4, #12]
 8003d3a:	688a      	ldr	r2, [r1, #8]
 8003d3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d40:	4302      	orrs	r2, r0
 8003d42:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d44:	071b      	lsls	r3, r3, #28
 8003d46:	d507      	bpl.n	8003d58 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d48:	4a1c      	ldr	r2, [pc, #112]	@ (8003dbc <HAL_RCC_ClockConfig+0x15c>)
 8003d4a:	6921      	ldr	r1, [r4, #16]
 8003d4c:	6893      	ldr	r3, [r2, #8]
 8003d4e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003d52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d56:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d58:	f7ff fc48 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8003d5c:	4a17      	ldr	r2, [pc, #92]	@ (8003dbc <HAL_RCC_ClockConfig+0x15c>)
 8003d5e:	4c18      	ldr	r4, [pc, #96]	@ (8003dc0 <HAL_RCC_ClockConfig+0x160>)
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	4918      	ldr	r1, [pc, #96]	@ (8003dc4 <HAL_RCC_ClockConfig+0x164>)
 8003d64:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003d68:	4603      	mov	r3, r0
 8003d6a:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8003d6c:	4816      	ldr	r0, [pc, #88]	@ (8003dc8 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d6e:	f002 021f 	and.w	r2, r2, #31
 8003d72:	40d3      	lsrs	r3, r2
}
 8003d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003d78:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d7a:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8003d7c:	f7fe b850 	b.w	8001e20 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	d0c6      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d84:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d88:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d8c:	d199      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8e:	019b      	lsls	r3, r3, #6
 8003d90:	d49d      	bmi.n	8003cce <HAL_RCC_ClockConfig+0x6e>
 8003d92:	e77c      	b.n	8003c8e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	688a      	ldr	r2, [r1, #8]
 8003d96:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003d9a:	4302      	orrs	r2, r0
 8003d9c:	608a      	str	r2, [r1, #8]
 8003d9e:	e7b8      	b.n	8003d12 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da0:	039f      	lsls	r7, r3, #14
 8003da2:	d494      	bmi.n	8003cce <HAL_RCC_ClockConfig+0x6e>
 8003da4:	e773      	b.n	8003c8e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003da6:	2001      	movs	r0, #1
}
 8003da8:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003daa:	2003      	movs	r0, #3
 8003dac:	e770      	b.n	8003c90 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dae:	0558      	lsls	r0, r3, #21
 8003db0:	f57f af6d 	bpl.w	8003c8e <HAL_RCC_ClockConfig+0x2e>
 8003db4:	e78b      	b.n	8003cce <HAL_RCC_ClockConfig+0x6e>
 8003db6:	bf00      	nop
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08006318 	.word	0x08006318
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	20000008 	.word	0x20000008

08003dcc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dcc:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003dce:	4a06      	ldr	r2, [pc, #24]	@ (8003de8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003dd2:	4906      	ldr	r1, [pc, #24]	@ (8003dec <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dd4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003dd8:	6808      	ldr	r0, [r1, #0]
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
}
 8003de0:	40d8      	lsrs	r0, r3
 8003de2:	4770      	bx	lr
 8003de4:	40021000 	.word	0x40021000
 8003de8:	08006310 	.word	0x08006310
 8003dec:	20000000 	.word	0x20000000

08003df0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003df2:	4a06      	ldr	r2, [pc, #24]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003df4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003df6:	4906      	ldr	r1, [pc, #24]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003df8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003dfc:	6808      	ldr	r0, [r1, #0]
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
}
 8003e04:	40d8      	lsrs	r0, r3
 8003e06:	4770      	bx	lr
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	08006310 	.word	0x08006310
 8003e10:	20000000 	.word	0x20000000

08003e14 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e14:	4a45      	ldr	r2, [pc, #276]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x118>)
{
 8003e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e18:	68d6      	ldr	r6, [r2, #12]
{
 8003e1a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e1c:	07b1      	lsls	r1, r6, #30
{
 8003e1e:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e20:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e22:	d006      	beq.n	8003e32 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e24:	68d1      	ldr	r1, [r2, #12]
 8003e26:	f001 0103 	and.w	r1, r1, #3
 8003e2a:	4281      	cmp	r1, r0
 8003e2c:	d04c      	beq.n	8003ec8 <RCCEx_PLLSAI1_Config+0xb4>
 8003e2e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003e32:	2802      	cmp	r0, #2
 8003e34:	d059      	beq.n	8003eea <RCCEx_PLLSAI1_Config+0xd6>
 8003e36:	2803      	cmp	r0, #3
 8003e38:	d050      	beq.n	8003edc <RCCEx_PLLSAI1_Config+0xc8>
 8003e3a:	2801      	cmp	r0, #1
 8003e3c:	d1f7      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	0793      	lsls	r3, r2, #30
 8003e42:	d5f5      	bpl.n	8003e30 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e44:	4939      	ldr	r1, [pc, #228]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x118>)
 8003e46:	68ca      	ldr	r2, [r1, #12]
 8003e48:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8003e4c:	ea42 0300 	orr.w	r3, r2, r0
 8003e50:	6862      	ldr	r2, [r4, #4]
 8003e52:	3a01      	subs	r2, #1
 8003e54:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003e58:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e5a:	4e34      	ldr	r6, [pc, #208]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x118>)
 8003e5c:	6833      	ldr	r3, [r6, #0]
 8003e5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e62:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e64:	f7fe f826 	bl	8001eb4 <HAL_GetTick>
 8003e68:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e6a:	e004      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e6c:	f7fe f822 	bl	8001eb4 <HAL_GetTick>
 8003e70:	1bc3      	subs	r3, r0, r7
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d83d      	bhi.n	8003ef2 <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e76:	6833      	ldr	r3, [r6, #0]
 8003e78:	011a      	lsls	r2, r3, #4
 8003e7a:	d4f7      	bmi.n	8003e6c <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e7c:	68a3      	ldr	r3, [r4, #8]
 8003e7e:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	d138      	bne.n	8003ef6 <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e84:	6933      	ldr	r3, [r6, #16]
 8003e86:	68e1      	ldr	r1, [r4, #12]
 8003e88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e90:	0909      	lsrs	r1, r1, #4
 8003e92:	4313      	orrs	r3, r2
 8003e94:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003e98:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e9a:	4d24      	ldr	r5, [pc, #144]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x118>)
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ea2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003ea4:	f7fe f806 	bl	8001eb4 <HAL_GetTick>
 8003ea8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eaa:	e004      	b.n	8003eb6 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eac:	f7fe f802 	bl	8001eb4 <HAL_GetTick>
 8003eb0:	1b80      	subs	r0, r0, r6
 8003eb2:	2802      	cmp	r0, #2
 8003eb4:	d81d      	bhi.n	8003ef2 <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eb6:	682b      	ldr	r3, [r5, #0]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	d5f7      	bpl.n	8003eac <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ebc:	692b      	ldr	r3, [r5, #16]
 8003ebe:	69a2      	ldr	r2, [r4, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	612b      	str	r3, [r5, #16]
}
 8003ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d0b0      	beq.n	8003e2e <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ecc:	68d3      	ldr	r3, [r2, #12]
       ||
 8003ece:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ed0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003ed4:	3301      	adds	r3, #1
       ||
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d1a9      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0x1a>
 8003eda:	e7be      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003edc:	6811      	ldr	r1, [r2, #0]
 8003ede:	038e      	lsls	r6, r1, #14
 8003ee0:	d4b0      	bmi.n	8003e44 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	0351      	lsls	r1, r2, #13
 8003ee6:	d5a2      	bpl.n	8003e2e <RCCEx_PLLSAI1_Config+0x1a>
 8003ee8:	e7ac      	b.n	8003e44 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	0557      	lsls	r7, r2, #21
 8003eee:	d59e      	bpl.n	8003e2e <RCCEx_PLLSAI1_Config+0x1a>
 8003ef0:	e7a8      	b.n	8003e44 <RCCEx_PLLSAI1_Config+0x30>
 8003ef2:	2003      	movs	r0, #3
}
 8003ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ef6:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ef8:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003efa:	d00b      	beq.n	8003f14 <RCCEx_PLLSAI1_Config+0x100>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003efc:	6961      	ldr	r1, [r4, #20]
 8003efe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f02:	0849      	lsrs	r1, r1, #1
 8003f04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f08:	3901      	subs	r1, #1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003f10:	6133      	str	r3, [r6, #16]
 8003f12:	e7c2      	b.n	8003e9a <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f14:	6921      	ldr	r1, [r4, #16]
 8003f16:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f1a:	0849      	lsrs	r1, r1, #1
 8003f1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f20:	3901      	subs	r1, #1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003f28:	6133      	str	r3, [r6, #16]
 8003f2a:	e7b6      	b.n	8003e9a <RCCEx_PLLSAI1_Config+0x86>
 8003f2c:	40021000 	.word	0x40021000

08003f30 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f30:	4a3e      	ldr	r2, [pc, #248]	@ (800402c <RCCEx_PLLSAI2_Config+0xfc>)
{
 8003f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f34:	68d6      	ldr	r6, [r2, #12]
{
 8003f36:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f38:	07b1      	lsls	r1, r6, #30
{
 8003f3a:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f3c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f3e:	d006      	beq.n	8003f4e <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f40:	68d1      	ldr	r1, [r2, #12]
 8003f42:	f001 0103 	and.w	r1, r1, #3
 8003f46:	4281      	cmp	r1, r0
 8003f48:	d04c      	beq.n	8003fe4 <RCCEx_PLLSAI2_Config+0xb4>
 8003f4a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8003f4e:	2802      	cmp	r0, #2
 8003f50:	d059      	beq.n	8004006 <RCCEx_PLLSAI2_Config+0xd6>
 8003f52:	2803      	cmp	r0, #3
 8003f54:	d050      	beq.n	8003ff8 <RCCEx_PLLSAI2_Config+0xc8>
 8003f56:	2801      	cmp	r0, #1
 8003f58:	d1f7      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	0793      	lsls	r3, r2, #30
 8003f5e:	d5f5      	bpl.n	8003f4c <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f60:	4932      	ldr	r1, [pc, #200]	@ (800402c <RCCEx_PLLSAI2_Config+0xfc>)
 8003f62:	68ca      	ldr	r2, [r1, #12]
 8003f64:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8003f68:	ea42 0300 	orr.w	r3, r2, r0
 8003f6c:	6862      	ldr	r2, [r4, #4]
 8003f6e:	3a01      	subs	r2, #1
 8003f70:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003f74:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f76:	4e2d      	ldr	r6, [pc, #180]	@ (800402c <RCCEx_PLLSAI2_Config+0xfc>)
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003f80:	f7fd ff98 	bl	8001eb4 <HAL_GetTick>
 8003f84:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f86:	e004      	b.n	8003f92 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f88:	f7fd ff94 	bl	8001eb4 <HAL_GetTick>
 8003f8c:	1bc3      	subs	r3, r0, r7
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d83d      	bhi.n	800400e <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f92:	6833      	ldr	r3, [r6, #0]
 8003f94:	009a      	lsls	r2, r3, #2
 8003f96:	d4f7      	bmi.n	8003f88 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f98:	68a3      	ldr	r3, [r4, #8]
 8003f9a:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003f9c:	2d00      	cmp	r5, #0
 8003f9e:	d138      	bne.n	8004012 <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa0:	6973      	ldr	r3, [r6, #20]
 8003fa2:	68e1      	ldr	r1, [r4, #12]
 8003fa4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fac:	0909      	lsrs	r1, r1, #4
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003fb4:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fb6:	4d1d      	ldr	r5, [pc, #116]	@ (800402c <RCCEx_PLLSAI2_Config+0xfc>)
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fbe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003fc0:	f7fd ff78 	bl	8001eb4 <HAL_GetTick>
 8003fc4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fc6:	e004      	b.n	8003fd2 <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fc8:	f7fd ff74 	bl	8001eb4 <HAL_GetTick>
 8003fcc:	1b80      	subs	r0, r0, r6
 8003fce:	2802      	cmp	r0, #2
 8003fd0:	d81d      	bhi.n	800400e <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fd2:	682b      	ldr	r3, [r5, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	d5f7      	bpl.n	8003fc8 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fd8:	696b      	ldr	r3, [r5, #20]
 8003fda:	6962      	ldr	r2, [r4, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	2000      	movs	r0, #0
 8003fe0:	616b      	str	r3, [r5, #20]
}
 8003fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003fe4:	2900      	cmp	r1, #0
 8003fe6:	d0b0      	beq.n	8003f4a <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fe8:	68d3      	ldr	r3, [r2, #12]
       ||
 8003fea:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fec:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003ff0:	3301      	adds	r3, #1
       ||
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d1a9      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0x1a>
 8003ff6:	e7be      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ff8:	6811      	ldr	r1, [r2, #0]
 8003ffa:	038e      	lsls	r6, r1, #14
 8003ffc:	d4b0      	bmi.n	8003f60 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	0351      	lsls	r1, r2, #13
 8004002:	d5a2      	bpl.n	8003f4a <RCCEx_PLLSAI2_Config+0x1a>
 8004004:	e7ac      	b.n	8003f60 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	0557      	lsls	r7, r2, #21
 800400a:	d59e      	bpl.n	8003f4a <RCCEx_PLLSAI2_Config+0x1a>
 800400c:	e7a8      	b.n	8003f60 <RCCEx_PLLSAI2_Config+0x30>
 800400e:	2003      	movs	r0, #3
}
 8004010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004012:	6973      	ldr	r3, [r6, #20]
 8004014:	6921      	ldr	r1, [r4, #16]
 8004016:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800401a:	0849      	lsrs	r1, r1, #1
 800401c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004020:	3901      	subs	r1, #1
 8004022:	4313      	orrs	r3, r2
 8004024:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004028:	6173      	str	r3, [r6, #20]
 800402a:	e7c4      	b.n	8003fb6 <RCCEx_PLLSAI2_Config+0x86>
 800402c:	40021000 	.word	0x40021000

08004030 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004034:	6803      	ldr	r3, [r0, #0]
 8004036:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 800403a:	b083      	sub	sp, #12
 800403c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800403e:	d016      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004040:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8004042:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8004046:	f000 81dd 	beq.w	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800404a:	f200 8117 	bhi.w	800427c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800404e:	2900      	cmp	r1, #0
 8004050:	f000 81ac 	beq.w	80043ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8004054:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004058:	f040 81c6 	bne.w	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800405c:	2100      	movs	r1, #0
 800405e:	3020      	adds	r0, #32
 8004060:	f7ff ff66 	bl	8003f30 <RCCEx_PLLSAI2_Config>
 8004064:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004066:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004068:	2e00      	cmp	r6, #0
 800406a:	f000 81d8 	beq.w	800441e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800406e:	04d8      	lsls	r0, r3, #19
 8004070:	f140 8115 	bpl.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004074:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004076:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800407a:	f000 81c9 	beq.w	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800407e:	f200 816f 	bhi.w	8004360 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004082:	2900      	cmp	r1, #0
 8004084:	f000 819b 	beq.w	80043be <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8004088:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800408c:	f040 81ae 	bne.w	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004090:	2100      	movs	r1, #0
 8004092:	f104 0020 	add.w	r0, r4, #32
 8004096:	f7ff ff4b 	bl	8003f30 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800409a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800409c:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 800409e:	2f00      	cmp	r7, #0
 80040a0:	f040 8165 	bne.w	800436e <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040a4:	49b3      	ldr	r1, [pc, #716]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040a6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80040a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80040ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80040b0:	4302      	orrs	r2, r0
 80040b2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040b6:	0399      	lsls	r1, r3, #14
 80040b8:	f100 80f5 	bmi.w	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040bc:	07da      	lsls	r2, r3, #31
 80040be:	d508      	bpl.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c0:	49ac      	ldr	r1, [pc, #688]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040c2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80040c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80040c8:	f022 0203 	bic.w	r2, r2, #3
 80040cc:	4302      	orrs	r2, r0
 80040ce:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d2:	079f      	lsls	r7, r3, #30
 80040d4:	d508      	bpl.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d6:	49a7      	ldr	r1, [pc, #668]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040d8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80040da:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80040de:	f022 020c 	bic.w	r2, r2, #12
 80040e2:	4302      	orrs	r2, r0
 80040e4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e8:	075d      	lsls	r5, r3, #29
 80040ea:	d508      	bpl.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ec:	49a1      	ldr	r1, [pc, #644]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040ee:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80040f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80040f4:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80040f8:	4302      	orrs	r2, r0
 80040fa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040fe:	0718      	lsls	r0, r3, #28
 8004100:	d508      	bpl.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004102:	499c      	ldr	r1, [pc, #624]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004104:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004106:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800410a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800410e:	4302      	orrs	r2, r0
 8004110:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004114:	06d9      	lsls	r1, r3, #27
 8004116:	d508      	bpl.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004118:	4996      	ldr	r1, [pc, #600]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800411a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800411c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004120:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004124:	4302      	orrs	r2, r0
 8004126:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800412a:	069a      	lsls	r2, r3, #26
 800412c:	d508      	bpl.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800412e:	4991      	ldr	r1, [pc, #580]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004130:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004132:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004136:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800413a:	4302      	orrs	r2, r0
 800413c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004140:	059f      	lsls	r7, r3, #22
 8004142:	d508      	bpl.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004144:	498b      	ldr	r1, [pc, #556]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004146:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004148:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800414c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004150:	4302      	orrs	r2, r0
 8004152:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004156:	055d      	lsls	r5, r3, #21
 8004158:	d508      	bpl.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800415a:	4986      	ldr	r1, [pc, #536]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800415c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800415e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004162:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004166:	4302      	orrs	r2, r0
 8004168:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800416c:	0658      	lsls	r0, r3, #25
 800416e:	d508      	bpl.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004170:	4980      	ldr	r1, [pc, #512]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004172:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004174:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004178:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800417c:	4302      	orrs	r2, r0
 800417e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004182:	0619      	lsls	r1, r3, #24
 8004184:	d508      	bpl.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004186:	497b      	ldr	r1, [pc, #492]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004188:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800418a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800418e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004192:	4302      	orrs	r2, r0
 8004194:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004198:	05da      	lsls	r2, r3, #23
 800419a:	d508      	bpl.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800419c:	4975      	ldr	r1, [pc, #468]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800419e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80041a4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80041a8:	4302      	orrs	r2, r0
 80041aa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ae:	049f      	lsls	r7, r3, #18
 80041b0:	d510      	bpl.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b2:	4970      	ldr	r1, [pc, #448]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041b4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80041b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80041ba:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80041be:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041c0:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041c8:	f000 8104 	beq.w	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041cc:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 80041d0:	f000 8132 	beq.w	8004438 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041d4:	031d      	lsls	r5, r3, #12
 80041d6:	d510      	bpl.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041d8:	4966      	ldr	r1, [pc, #408]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041da:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80041dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80041e0:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80041e4:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041e6:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041ea:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041ee:	f000 80f6 	beq.w	80043de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041f2:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 80041f6:	f000 8129 	beq.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041fa:	0358      	lsls	r0, r3, #13
 80041fc:	d510      	bpl.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041fe:	495d      	ldr	r1, [pc, #372]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004200:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004202:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004206:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800420a:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800420c:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004210:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004214:	f000 80d9 	beq.w	80043ca <HAL_RCCEx_PeriphCLKConfig+0x39a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004218:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800421c:	f000 8120 	beq.w	8004460 <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004220:	0459      	lsls	r1, r3, #17
 8004222:	d510      	bpl.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004224:	4853      	ldr	r0, [pc, #332]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004226:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8004228:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800422c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004230:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004232:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004236:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800423a:	f000 80d9 	beq.w	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800423e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004242:	f000 80ee 	beq.w	8004422 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004246:	041a      	lsls	r2, r3, #16
 8004248:	d508      	bpl.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800424a:	494a      	ldr	r1, [pc, #296]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800424c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800424e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004252:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004256:	4302      	orrs	r2, r0
 8004258:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800425c:	03db      	lsls	r3, r3, #15
 800425e:	d509      	bpl.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004260:	4a44      	ldr	r2, [pc, #272]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004262:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8004266:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800426a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800426e:	430b      	orrs	r3, r1
 8004270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8004274:	4630      	mov	r0, r6
 8004276:	b003      	add	sp, #12
 8004278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 800427c:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8004280:	f040 80b2 	bne.w	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004284:	483b      	ldr	r0, [pc, #236]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004286:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800428a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800428e:	430a      	orrs	r2, r1
 8004290:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004294:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004296:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800429a:	f53f aeeb 	bmi.w	8004074 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 800429e:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a0:	0399      	lsls	r1, r3, #14
 80042a2:	f57f af0b 	bpl.w	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042a6:	4b33      	ldr	r3, [pc, #204]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042aa:	00d2      	lsls	r2, r2, #3
 80042ac:	d566      	bpl.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x34c>
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b2:	4d31      	ldr	r5, [pc, #196]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ba:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80042bc:	f7fd fdfa 	bl	8001eb4 <HAL_GetTick>
 80042c0:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042c2:	e005      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c4:	f7fd fdf6 	bl	8001eb4 <HAL_GetTick>
 80042c8:	eba0 0309 	sub.w	r3, r0, r9
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d861      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	05db      	lsls	r3, r3, #23
 80042d4:	d5f6      	bpl.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 80042d6:	2f00      	cmp	r7, #0
 80042d8:	f040 80cc 	bne.w	8004474 <HAL_RCCEx_PeriphCLKConfig+0x444>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042dc:	4d25      	ldr	r5, [pc, #148]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042de:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042e2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042e6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80042ea:	d026      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d024      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042f0:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80042f4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004300:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004308:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800430c:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800430e:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8004312:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004316:	d510      	bpl.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tickstart = HAL_GetTick();
 8004318:	f7fd fdcc 	bl	8001eb4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004320:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004322:	e004      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004324:	f7fd fdc6 	bl	8001eb4 <HAL_GetTick>
 8004328:	1bc0      	subs	r0, r0, r7
 800432a:	4548      	cmp	r0, r9
 800432c:	d832      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x364>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800432e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004332:	0799      	lsls	r1, r3, #30
 8004334:	d5f6      	bpl.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004336:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800433a:	490e      	ldr	r1, [pc, #56]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800433c:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8004340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800434a:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800434c:	f1b8 0f00 	cmp.w	r8, #0
 8004350:	f43f aeb4 	beq.w	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004354:	4907      	ldr	r1, [pc, #28]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004356:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004358:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800435c:	658a      	str	r2, [r1, #88]	@ 0x58
 800435e:	e6ad      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004360:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004364:	d142      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004366:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8004368:	2f00      	cmp	r7, #0
 800436a:	f43f ae9b 	beq.w	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800436e:	463e      	mov	r6, r7
 8004370:	e796      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000
 8004378:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800437e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004382:	659a      	str	r2, [r3, #88]	@ 0x58
 8004384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800438e:	f04f 0801 	mov.w	r8, #1
 8004392:	e78e      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        ret = HAL_TIMEOUT;
 8004394:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004396:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8004398:	f1b8 0f00 	cmp.w	r8, #0
 800439c:	f43f ae8e 	beq.w	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4935      	ldr	r1, [pc, #212]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80043a2:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80043a4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80043a8:	658a      	str	r2, [r1, #88]	@ 0x58
 80043aa:	e687      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ac:	3004      	adds	r0, #4
 80043ae:	f7ff fd31 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 80043b2:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043b4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80043b6:	2e00      	cmp	r6, #0
 80043b8:	f47f ae59 	bne.w	800406e <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80043bc:	e02f      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043be:	1d20      	adds	r0, r4, #4
 80043c0:	f7ff fd28 	bl	8003e14 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043c6:	4607      	mov	r7, r0
      break;
 80043c8:	e669      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ca:	68ca      	ldr	r2, [r1, #12]
 80043cc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80043d0:	60ca      	str	r2, [r1, #12]
 80043d2:	e725      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d4:	68ca      	ldr	r2, [r1, #12]
 80043d6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80043da:	60ca      	str	r2, [r1, #12]
 80043dc:	e6fa      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043de:	68ca      	ldr	r2, [r1, #12]
 80043e0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80043e4:	60ca      	str	r2, [r1, #12]
 80043e6:	e708      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai1ClockSelection)
 80043e8:	2601      	movs	r6, #1
 80043ea:	e640      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80043ec:	2601      	movs	r6, #1
 80043ee:	e756      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x26e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f0:	2102      	movs	r1, #2
 80043f2:	1d20      	adds	r0, r4, #4
 80043f4:	f7ff fd0e 	bl	8003e14 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043f8:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80043fa:	2800      	cmp	r0, #0
 80043fc:	f43f af23 	beq.w	8004246 <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004400:	4606      	mov	r6, r0
 8004402:	e720      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004404:	481c      	ldr	r0, [pc, #112]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004406:	68c2      	ldr	r2, [r0, #12]
 8004408:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800440c:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 800440e:	e739      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x254>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004410:	4919      	ldr	r1, [pc, #100]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004412:	68ca      	ldr	r2, [r1, #12]
 8004414:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004418:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 800441a:	4637      	mov	r7, r6
 800441c:	e7a4      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800441e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004420:	e730      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004422:	2102      	movs	r1, #2
 8004424:	f104 0020 	add.w	r0, r4, #32
 8004428:	f7ff fd82 	bl	8003f30 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800442c:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800442e:	2800      	cmp	r0, #0
 8004430:	f43f af09 	beq.w	8004246 <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004434:	4606      	mov	r6, r0
 8004436:	e706      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x216>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004438:	2101      	movs	r1, #1
 800443a:	1d20      	adds	r0, r4, #4
 800443c:	f7ff fcea 	bl	8003e14 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004440:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8004442:	2800      	cmp	r0, #0
 8004444:	f43f aec6 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004448:	4606      	mov	r6, r0
 800444a:	e6c3      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800444c:	2101      	movs	r1, #1
 800444e:	1d20      	adds	r0, r4, #4
 8004450:	f7ff fce0 	bl	8003e14 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004454:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004456:	2800      	cmp	r0, #0
 8004458:	f43f aecf 	beq.w	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800445c:	4606      	mov	r6, r0
 800445e:	e6cc      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004460:	2101      	movs	r1, #1
 8004462:	1d20      	adds	r0, r4, #4
 8004464:	f7ff fcd6 	bl	8003e14 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004468:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800446a:	2800      	cmp	r0, #0
 800446c:	f43f aed8 	beq.w	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004470:	4606      	mov	r6, r0
 8004472:	e6d5      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004474:	463e      	mov	r6, r7
 8004476:	e78e      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8004478:	40021000 	.word	0x40021000

0800447c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004480:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004482:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8004484:	2820      	cmp	r0, #32
 8004486:	d14f      	bne.n	8004528 <HAL_UART_Transmit+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004488:	4688      	mov	r8, r1
 800448a:	b109      	cbz	r1, 8004490 <HAL_UART_Transmit+0x14>
 800448c:	4617      	mov	r7, r2
 800448e:	b912      	cbnz	r2, 8004496 <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8004490:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004496:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800449c:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449e:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a2:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80044a4:	f7fd fd06 	bl	8001eb4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a8:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80044aa:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80044b2:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 80044b6:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b8:	d045      	beq.n	8004546 <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 80044ba:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044be:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 80044c0:	b292      	uxth	r2, r2
 80044c2:	b1aa      	cbz	r2, 80044f0 <HAL_UART_Transmit+0x74>
 80044c4:	1c68      	adds	r0, r5, #1
 80044c6:	d124      	bne.n	8004512 <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c8:	69da      	ldr	r2, [r3, #28]
 80044ca:	0612      	lsls	r2, r2, #24
 80044cc:	d5fc      	bpl.n	80044c8 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 80044ce:	f1b8 0f00 	cmp.w	r8, #0
 80044d2:	d024      	beq.n	800451e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d4:	f818 2b01 	ldrb.w	r2, [r8], #1
 80044d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 80044da:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80044de:	3a01      	subs	r2, #1
 80044e0:	b292      	uxth	r2, r2
 80044e2:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044e6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80044ea:	b292      	uxth	r2, r2
 80044ec:	2a00      	cmp	r2, #0
 80044ee:	d1e9      	bne.n	80044c4 <HAL_UART_Transmit+0x48>
 80044f0:	1c69      	adds	r1, r5, #1
 80044f2:	d124      	bne.n	800453e <HAL_UART_Transmit+0xc2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	0652      	lsls	r2, r2, #25
 80044f8:	d5fc      	bpl.n	80044f4 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 80044fa:	2320      	movs	r3, #32
 80044fc:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80044fe:	2000      	movs	r0, #0
 8004500:	e7c7      	b.n	8004492 <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fd fcd7 	bl	8001eb4 <HAL_GetTick>
 8004506:	1b80      	subs	r0, r0, r6
 8004508:	4285      	cmp	r5, r0
 800450a:	d322      	bcc.n	8004552 <HAL_UART_Transmit+0xd6>
 800450c:	b30d      	cbz	r5, 8004552 <HAL_UART_Transmit+0xd6>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	0617      	lsls	r7, r2, #24
 8004516:	d5f4      	bpl.n	8004502 <HAL_UART_Transmit+0x86>
      if (pdata8bits == NULL)
 8004518:	f1b8 0f00 	cmp.w	r8, #0
 800451c:	d1da      	bne.n	80044d4 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800451e:	f839 2b02 	ldrh.w	r2, [r9], #2
 8004522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004526:	e7d7      	b.n	80044d8 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8004528:	2002      	movs	r0, #2
}
 800452a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452e:	f7fd fcc1 	bl	8001eb4 <HAL_GetTick>
 8004532:	1b83      	subs	r3, r0, r6
 8004534:	429d      	cmp	r5, r3
 8004536:	d30c      	bcc.n	8004552 <HAL_UART_Transmit+0xd6>
 8004538:	b15d      	cbz	r5, 8004552 <HAL_UART_Transmit+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	065b      	lsls	r3, r3, #25
 8004542:	d5f4      	bpl.n	800452e <HAL_UART_Transmit+0xb2>
 8004544:	e7d9      	b.n	80044fa <HAL_UART_Transmit+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1b6      	bne.n	80044ba <HAL_UART_Transmit+0x3e>
 800454c:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800454e:	4698      	mov	r8, r3
 8004550:	e7b3      	b.n	80044ba <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8004552:	2320      	movs	r3, #32
 8004554:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8004556:	2003      	movs	r0, #3
}
 8004558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800455c <UART_SetConfig>:
{
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004560:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004562:	6882      	ldr	r2, [r0, #8]
 8004564:	6900      	ldr	r0, [r0, #16]
 8004566:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004568:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800456a:	4302      	orrs	r2, r0
 800456c:	430a      	orrs	r2, r1
 800456e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004570:	4981      	ldr	r1, [pc, #516]	@ (8004778 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004572:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004574:	4029      	ands	r1, r5
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	68e1      	ldr	r1, [r4, #12]
 800457e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004582:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004584:	497d      	ldr	r1, [pc, #500]	@ (800477c <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004586:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004588:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800458a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800458c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800458e:	d03f      	beq.n	8004610 <UART_SetConfig+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 8004590:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004592:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8004596:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004598:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459a:	4979      	ldr	r1, [pc, #484]	@ (8004780 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800459c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459e:	428b      	cmp	r3, r1
 80045a0:	d115      	bne.n	80045ce <UART_SetConfig+0x72>
 80045a2:	4b78      	ldr	r3, [pc, #480]	@ (8004784 <UART_SetConfig+0x228>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	f000 808d 	beq.w	80046cc <UART_SetConfig+0x170>
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d077      	beq.n	80046a6 <UART_SetConfig+0x14a>
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d06d      	beq.n	8004696 <UART_SetConfig+0x13a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ba:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80045be:	f000 80cf 	beq.w	8004760 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c2:	f7ff fc15 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d172      	bne.n	80046b0 <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 80045ca:	2000      	movs	r0, #0
 80045cc:	e01c      	b.n	8004608 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004788 <UART_SetConfig+0x22c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10f      	bne.n	80045f4 <UART_SetConfig+0x98>
 80045d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004784 <UART_SetConfig+0x228>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b0c      	cmp	r3, #12
 80045e0:	d811      	bhi.n	8004606 <UART_SetConfig+0xaa>
 80045e2:	e8df f003 	tbb	[pc, r3]
 80045e6:	1082      	.short	0x1082
 80045e8:	10581010 	.word	0x10581010
 80045ec:	10731010 	.word	0x10731010
 80045f0:	1010      	.short	0x1010
 80045f2:	60          	.byte	0x60
 80045f3:	00          	.byte	0x00
 80045f4:	4a65      	ldr	r2, [pc, #404]	@ (800478c <UART_SetConfig+0x230>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d07d      	beq.n	80046f6 <UART_SetConfig+0x19a>
 80045fa:	4a65      	ldr	r2, [pc, #404]	@ (8004790 <UART_SetConfig+0x234>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d03f      	beq.n	8004680 <UART_SetConfig+0x124>
 8004600:	4a64      	ldr	r2, [pc, #400]	@ (8004794 <UART_SetConfig+0x238>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d067      	beq.n	80046d6 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 8004606:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 800460e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004610:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004614:	485b      	ldr	r0, [pc, #364]	@ (8004784 <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800461a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800461e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004626:	d07e      	beq.n	8004726 <UART_SetConfig+0x1ca>
 8004628:	d807      	bhi.n	800463a <UART_SetConfig+0xde>
 800462a:	b323      	cbz	r3, 8004676 <UART_SetConfig+0x11a>
 800462c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004630:	d1e9      	bne.n	8004606 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fe ffdb 	bl	80035ec <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004636:	b928      	cbnz	r0, 8004644 <UART_SetConfig+0xe8>
 8004638:	e7c7      	b.n	80045ca <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800463a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800463e:	d1e2      	bne.n	8004606 <UART_SetConfig+0xaa>
        pclk = (uint32_t) LSE_VALUE;
 8004640:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004644:	6862      	ldr	r2, [r4, #4]
 8004646:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800464a:	4283      	cmp	r3, r0
 800464c:	d8db      	bhi.n	8004606 <UART_SetConfig+0xaa>
 800464e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004652:	d8d8      	bhi.n	8004606 <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004654:	0851      	lsrs	r1, r2, #1
 8004656:	2300      	movs	r3, #0
 8004658:	468c      	mov	ip, r1
 800465a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800465e:	4619      	mov	r1, r3
 8004660:	fbe0 c105 	umlal	ip, r1, r0, r5
 8004664:	4660      	mov	r0, ip
 8004666:	f7fc f9f9 	bl	8000a5c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800466a:	4b4b      	ldr	r3, [pc, #300]	@ (8004798 <UART_SetConfig+0x23c>)
 800466c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8004670:	429a      	cmp	r2, r3
 8004672:	d8c8      	bhi.n	8004606 <UART_SetConfig+0xaa>
 8004674:	e027      	b.n	80046c6 <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004676:	f7ff fba9 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800467a:	2800      	cmp	r0, #0
 800467c:	d1e2      	bne.n	8004644 <UART_SetConfig+0xe8>
 800467e:	e7a4      	b.n	80045ca <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004680:	4b40      	ldr	r3, [pc, #256]	@ (8004784 <UART_SetConfig+0x228>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800468a:	2b80      	cmp	r3, #128	@ 0x80
 800468c:	d01e      	beq.n	80046cc <UART_SetConfig+0x170>
 800468e:	d83f      	bhi.n	8004710 <UART_SetConfig+0x1b4>
 8004690:	b35b      	cbz	r3, 80046ea <UART_SetConfig+0x18e>
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d1b7      	bne.n	8004606 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004696:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800469a:	d069      	beq.n	8004770 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 800469c:	f7fe ffa6 	bl	80035ec <HAL_RCC_GetSysClockFreq>
        break;
 80046a0:	e791      	b.n	80045c6 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046a2:	2b30      	cmp	r3, #48	@ 0x30
 80046a4:	d1af      	bne.n	8004606 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80046aa:	d05e      	beq.n	800476a <UART_SetConfig+0x20e>
        pclk = (uint32_t) LSE_VALUE;
 80046ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b0:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80046ba:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046be:	f1a0 0310 	sub.w	r3, r0, #16
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d89f      	bhi.n	8004606 <UART_SetConfig+0xaa>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	60d8      	str	r0, [r3, #12]
 80046ca:	e77e      	b.n	80045ca <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046cc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80046d0:	d049      	beq.n	8004766 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 80046d2:	4832      	ldr	r0, [pc, #200]	@ (800479c <UART_SetConfig+0x240>)
 80046d4:	e7ec      	b.n	80046b0 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004784 <UART_SetConfig+0x228>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d0f2      	beq.n	80046cc <UART_SetConfig+0x170>
 80046e6:	d81a      	bhi.n	800471e <UART_SetConfig+0x1c2>
 80046e8:	b9ab      	cbnz	r3, 8004716 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80046ee:	d01c      	beq.n	800472a <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7ff fb6c 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
        break;
 80046f4:	e767      	b.n	80045c6 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f6:	4b23      	ldr	r3, [pc, #140]	@ (8004784 <UART_SetConfig+0x228>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004700:	2b20      	cmp	r3, #32
 8004702:	d0e3      	beq.n	80046cc <UART_SetConfig+0x170>
 8004704:	d8cd      	bhi.n	80046a2 <UART_SetConfig+0x146>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ef      	beq.n	80046ea <UART_SetConfig+0x18e>
 800470a:	2b10      	cmp	r3, #16
 800470c:	d0c3      	beq.n	8004696 <UART_SetConfig+0x13a>
 800470e:	e77a      	b.n	8004606 <UART_SetConfig+0xaa>
 8004710:	2bc0      	cmp	r3, #192	@ 0xc0
 8004712:	d0c8      	beq.n	80046a6 <UART_SetConfig+0x14a>
 8004714:	e777      	b.n	8004606 <UART_SetConfig+0xaa>
 8004716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800471a:	d0bc      	beq.n	8004696 <UART_SetConfig+0x13a>
 800471c:	e773      	b.n	8004606 <UART_SetConfig+0xaa>
 800471e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004722:	d0c0      	beq.n	80046a6 <UART_SetConfig+0x14a>
 8004724:	e76f      	b.n	8004606 <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 8004726:	481d      	ldr	r0, [pc, #116]	@ (800479c <UART_SetConfig+0x240>)
 8004728:	e78c      	b.n	8004644 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800472a:	f7ff fb4f 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800472e:	2800      	cmp	r0, #0
 8004730:	f43f af4b 	beq.w	80045ca <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004734:	0040      	lsls	r0, r0, #1
 8004736:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004738:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800473c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004740:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004744:	f1a3 0110 	sub.w	r1, r3, #16
 8004748:	4291      	cmp	r1, r2
 800474a:	f63f af5c 	bhi.w	8004606 <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800474e:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8004752:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004754:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004756:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800475a:	4313      	orrs	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
 800475e:	e734      	b.n	80045ca <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7ff fb46 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
        break;
 8004764:	e7e3      	b.n	800472e <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004766:	480e      	ldr	r0, [pc, #56]	@ (80047a0 <UART_SetConfig+0x244>)
 8004768:	e7e5      	b.n	8004736 <UART_SetConfig+0x1da>
 800476a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800476e:	e7e2      	b.n	8004736 <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 8004770:	f7fe ff3c 	bl	80035ec <HAL_RCC_GetSysClockFreq>
        break;
 8004774:	e7db      	b.n	800472e <UART_SetConfig+0x1d2>
 8004776:	bf00      	nop
 8004778:	efff69f3 	.word	0xefff69f3
 800477c:	40008000 	.word	0x40008000
 8004780:	40013800 	.word	0x40013800
 8004784:	40021000 	.word	0x40021000
 8004788:	40004400 	.word	0x40004400
 800478c:	40004800 	.word	0x40004800
 8004790:	40004c00 	.word	0x40004c00
 8004794:	40005000 	.word	0x40005000
 8004798:	000ffcff 	.word	0x000ffcff
 800479c:	00f42400 	.word	0x00f42400
 80047a0:	01e84800 	.word	0x01e84800

080047a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047a4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80047a6:	071a      	lsls	r2, r3, #28
{
 80047a8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047aa:	d506      	bpl.n	80047ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ac:	6801      	ldr	r1, [r0, #0]
 80047ae:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80047b0:	684a      	ldr	r2, [r1, #4]
 80047b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047b6:	4322      	orrs	r2, r4
 80047b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ba:	07dc      	lsls	r4, r3, #31
 80047bc:	d506      	bpl.n	80047cc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047be:	6801      	ldr	r1, [r0, #0]
 80047c0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80047c2:	684a      	ldr	r2, [r1, #4]
 80047c4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80047c8:	4322      	orrs	r2, r4
 80047ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047cc:	0799      	lsls	r1, r3, #30
 80047ce:	d506      	bpl.n	80047de <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d0:	6801      	ldr	r1, [r0, #0]
 80047d2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80047d4:	684a      	ldr	r2, [r1, #4]
 80047d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80047da:	4322      	orrs	r2, r4
 80047dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047de:	075a      	lsls	r2, r3, #29
 80047e0:	d506      	bpl.n	80047f0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047e2:	6801      	ldr	r1, [r0, #0]
 80047e4:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80047e6:	684a      	ldr	r2, [r1, #4]
 80047e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047ec:	4322      	orrs	r2, r4
 80047ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f0:	06dc      	lsls	r4, r3, #27
 80047f2:	d506      	bpl.n	8004802 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f4:	6801      	ldr	r1, [r0, #0]
 80047f6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80047f8:	688a      	ldr	r2, [r1, #8]
 80047fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047fe:	4322      	orrs	r2, r4
 8004800:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004802:	0699      	lsls	r1, r3, #26
 8004804:	d506      	bpl.n	8004814 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004806:	6801      	ldr	r1, [r0, #0]
 8004808:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800480a:	688a      	ldr	r2, [r1, #8]
 800480c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004810:	4322      	orrs	r2, r4
 8004812:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004814:	065a      	lsls	r2, r3, #25
 8004816:	d509      	bpl.n	800482c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004818:	6801      	ldr	r1, [r0, #0]
 800481a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800481c:	684a      	ldr	r2, [r1, #4]
 800481e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004822:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004824:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004828:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482a:	d00b      	beq.n	8004844 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	d506      	bpl.n	800483e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004830:	6802      	ldr	r2, [r0, #0]
 8004832:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004834:	6853      	ldr	r3, [r2, #4]
 8004836:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800483a:	430b      	orrs	r3, r1
 800483c:	6053      	str	r3, [r2, #4]
}
 800483e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004842:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004844:	684a      	ldr	r2, [r1, #4]
 8004846:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004848:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800484c:	4322      	orrs	r2, r4
 800484e:	604a      	str	r2, [r1, #4]
 8004850:	e7ec      	b.n	800482c <UART_AdvFeatureConfig+0x88>
 8004852:	bf00      	nop

08004854 <UART_CheckIdleState>:
{
 8004854:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004856:	2300      	movs	r3, #0
{
 8004858:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800485e:	f7fd fb29 	bl	8001eb4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6813      	ldr	r3, [r2, #0]
 8004866:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8004868:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800486a:	d40e      	bmi.n	800488a <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800486c:	6813      	ldr	r3, [r2, #0]
 800486e:	0759      	lsls	r1, r3, #29
 8004870:	d42f      	bmi.n	80048d2 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004874:	2220      	movs	r2, #32
 8004876:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8004878:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800487a:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487e:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004880:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8004882:	2300      	movs	r3, #0
 8004884:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8004888:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	69d3      	ldr	r3, [r2, #28]
 800488c:	0298      	lsls	r0, r3, #10
 800488e:	d4ed      	bmi.n	800486c <UART_CheckIdleState+0x18>
 8004890:	e00c      	b.n	80048ac <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	0749      	lsls	r1, r1, #29
 8004896:	461a      	mov	r2, r3
 8004898:	d505      	bpl.n	80048a6 <UART_CheckIdleState+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800489a:	69d9      	ldr	r1, [r3, #28]
 800489c:	0708      	lsls	r0, r1, #28
 800489e:	d449      	bmi.n	8004934 <UART_CheckIdleState+0xe0>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a0:	69d9      	ldr	r1, [r3, #28]
 80048a2:	0509      	lsls	r1, r1, #20
 80048a4:	d474      	bmi.n	8004990 <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	0298      	lsls	r0, r3, #10
 80048aa:	d4df      	bmi.n	800486c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fd fb02 	bl	8001eb4 <HAL_GetTick>
 80048b0:	1b43      	subs	r3, r0, r5
 80048b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048b6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b8:	d3eb      	bcc.n	8004892 <UART_CheckIdleState+0x3e>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	e843 2100 	strex	r1, r2, [r3]
 80048c6:	2900      	cmp	r1, #0
 80048c8:	d1f7      	bne.n	80048ba <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80048ca:	2320      	movs	r3, #32
 80048cc:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80048ce:	2003      	movs	r0, #3
 80048d0:	e7d7      	b.n	8004882 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d2:	69d3      	ldr	r3, [r2, #28]
 80048d4:	025b      	lsls	r3, r3, #9
 80048d6:	d4cc      	bmi.n	8004872 <UART_CheckIdleState+0x1e>
 80048d8:	e00d      	b.n	80048f6 <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	0750      	lsls	r0, r2, #29
 80048de:	d507      	bpl.n	80048f0 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	0711      	lsls	r1, r2, #28
 80048e4:	f100 8082 	bmi.w	80049ec <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	0512      	lsls	r2, r2, #20
 80048ec:	f100 80ac 	bmi.w	8004a48 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	d4bd      	bmi.n	8004872 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7fd fadd 	bl	8001eb4 <HAL_GetTick>
 80048fa:	1b43      	subs	r3, r0, r5
 80048fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	d3ea      	bcc.n	80048da <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004908:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	e843 2100 	strex	r1, r2, [r3]
 8004910:	2900      	cmp	r1, #0
 8004912:	d1f7      	bne.n	8004904 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	f103 0208 	add.w	r2, r3, #8
 8004918:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	f103 0008 	add.w	r0, r3, #8
 8004924:	e840 2100 	strex	r1, r2, [r0]
 8004928:	2900      	cmp	r1, #0
 800492a:	d1f3      	bne.n	8004914 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 800492c:	2320      	movs	r3, #32
 800492e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8004932:	e7cc      	b.n	80048ce <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004934:	2208      	movs	r2, #8
 8004936:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	e853 2f00 	ldrex	r2, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	e843 2100 	strex	r1, r2, [r3]
 8004944:	2900      	cmp	r1, #0
 8004946:	d1f7      	bne.n	8004938 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	f103 0208 	add.w	r2, r3, #8
 800494c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	f103 0008 	add.w	r0, r3, #8
 8004958:	e840 2100 	strex	r1, r2, [r0]
 800495c:	2900      	cmp	r1, #0
 800495e:	d1f3      	bne.n	8004948 <UART_CheckIdleState+0xf4>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004962:	2a01      	cmp	r2, #1
 8004964:	d00b      	beq.n	800497e <UART_CheckIdleState+0x12a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004968:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800496a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800496c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004970:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004974:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004978:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 800497c:	e79d      	b.n	80048ba <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004982:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	e843 2100 	strex	r1, r2, [r3]
 800498a:	2900      	cmp	r1, #0
 800498c:	d1f7      	bne.n	800497e <UART_CheckIdleState+0x12a>
 800498e:	e7ea      	b.n	8004966 <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004990:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004994:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	e843 2100 	strex	r1, r2, [r3]
 80049a2:	2900      	cmp	r1, #0
 80049a4:	d1f7      	bne.n	8004996 <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	f103 0208 	add.w	r2, r3, #8
 80049aa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	f103 0008 	add.w	r0, r3, #8
 80049b6:	e840 2100 	strex	r1, r2, [r0]
 80049ba:	2900      	cmp	r1, #0
 80049bc:	d1f3      	bne.n	80049a6 <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049be:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80049c0:	2a01      	cmp	r2, #1
 80049c2:	d00a      	beq.n	80049da <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80049c6:	2120      	movs	r1, #32
 80049c8:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80049cc:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ce:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80049d0:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80049d8:	e76f      	b.n	80048ba <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049de:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	e843 2100 	strex	r1, r2, [r3]
 80049e6:	2900      	cmp	r1, #0
 80049e8:	d1f7      	bne.n	80049da <UART_CheckIdleState+0x186>
 80049ea:	e7eb      	b.n	80049c4 <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ec:	2208      	movs	r2, #8
 80049ee:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	e843 2100 	strex	r1, r2, [r3]
 80049fc:	2900      	cmp	r1, #0
 80049fe:	d1f7      	bne.n	80049f0 <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	f103 0208 	add.w	r2, r3, #8
 8004a04:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	f103 0008 	add.w	r0, r3, #8
 8004a10:	e840 2100 	strex	r1, r2, [r0]
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d1f3      	bne.n	8004a00 <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a1a:	2a01      	cmp	r2, #1
 8004a1c:	d00b      	beq.n	8004a36 <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004a20:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a22:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004a24:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004a28:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004a2c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a30:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004a34:	e766      	b.n	8004904 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	e843 2100 	strex	r1, r2, [r3]
 8004a42:	2900      	cmp	r1, #0
 8004a44:	d1f7      	bne.n	8004a36 <UART_CheckIdleState+0x1e2>
 8004a46:	e7ea      	b.n	8004a1e <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a4c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a52:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	e843 2100 	strex	r1, r2, [r3]
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	d1f7      	bne.n	8004a4e <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	f103 0208 	add.w	r2, r3, #8
 8004a62:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	f103 0008 	add.w	r0, r3, #8
 8004a6e:	e840 2100 	strex	r1, r2, [r0]
 8004a72:	2900      	cmp	r1, #0
 8004a74:	d1f3      	bne.n	8004a5e <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a76:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a78:	2a01      	cmp	r2, #1
 8004a7a:	d00a      	beq.n	8004a92 <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	2120      	movs	r1, #32
 8004a80:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004a84:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a86:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004a88:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a8c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004a90:	e738      	b.n	8004904 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a96:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	e843 2100 	strex	r1, r2, [r3]
 8004a9e:	2900      	cmp	r1, #0
 8004aa0:	d1f7      	bne.n	8004a92 <UART_CheckIdleState+0x23e>
 8004aa2:	e7eb      	b.n	8004a7c <UART_CheckIdleState+0x228>

08004aa4 <HAL_UART_Init>:
  if (huart == NULL)
 8004aa4:	b370      	cbz	r0, 8004b04 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004aac:	b32b      	cbz	r3, 8004afa <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8004aae:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ab0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8004ab2:	2324      	movs	r3, #36	@ 0x24
 8004ab4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8004ab6:	6813      	ldr	r3, [r2, #0]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004abe:	b9c1      	cbnz	r1, 8004af2 <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f7ff fd4b 	bl	800455c <UART_SetConfig>
 8004ac6:	2801      	cmp	r0, #1
 8004ac8:	d011      	beq.n	8004aee <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ada:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004ae2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004ae4:	601a      	str	r2, [r3, #0]
}
 8004ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004aea:	f7ff beb3 	b.w	8004854 <UART_CheckIdleState>
}
 8004aee:	2001      	movs	r0, #1
 8004af0:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8004af2:	4620      	mov	r0, r4
 8004af4:	f7ff fe56 	bl	80047a4 <UART_AdvFeatureConfig>
 8004af8:	e7e2      	b.n	8004ac0 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8004afa:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8004afe:	f7fd f8a3 	bl	8001c48 <HAL_UART_MspInit>
 8004b02:	e7d4      	b.n	8004aae <HAL_UART_Init+0xa>
}
 8004b04:	2001      	movs	r0, #1
 8004b06:	4770      	bx	lr

08004b08 <atoi>:
 8004b08:	220a      	movs	r2, #10
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	f000 b928 	b.w	8004d60 <strtol>

08004b10 <sbrk_aligned>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	4e0f      	ldr	r6, [pc, #60]	@ (8004b50 <sbrk_aligned+0x40>)
 8004b14:	460c      	mov	r4, r1
 8004b16:	6831      	ldr	r1, [r6, #0]
 8004b18:	4605      	mov	r5, r0
 8004b1a:	b911      	cbnz	r1, 8004b22 <sbrk_aligned+0x12>
 8004b1c:	f000 f96c 	bl	8004df8 <_sbrk_r>
 8004b20:	6030      	str	r0, [r6, #0]
 8004b22:	4621      	mov	r1, r4
 8004b24:	4628      	mov	r0, r5
 8004b26:	f000 f967 	bl	8004df8 <_sbrk_r>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	d103      	bne.n	8004b36 <sbrk_aligned+0x26>
 8004b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8004b32:	4620      	mov	r0, r4
 8004b34:	bd70      	pop	{r4, r5, r6, pc}
 8004b36:	1cc4      	adds	r4, r0, #3
 8004b38:	f024 0403 	bic.w	r4, r4, #3
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d0f8      	beq.n	8004b32 <sbrk_aligned+0x22>
 8004b40:	1a21      	subs	r1, r4, r0
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f958 	bl	8004df8 <_sbrk_r>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d1f2      	bne.n	8004b32 <sbrk_aligned+0x22>
 8004b4c:	e7ef      	b.n	8004b2e <sbrk_aligned+0x1e>
 8004b4e:	bf00      	nop
 8004b50:	20000654 	.word	0x20000654

08004b54 <_malloc_r>:
 8004b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b58:	1ccd      	adds	r5, r1, #3
 8004b5a:	f025 0503 	bic.w	r5, r5, #3
 8004b5e:	3508      	adds	r5, #8
 8004b60:	2d0c      	cmp	r5, #12
 8004b62:	bf38      	it	cc
 8004b64:	250c      	movcc	r5, #12
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	4606      	mov	r6, r0
 8004b6a:	db01      	blt.n	8004b70 <_malloc_r+0x1c>
 8004b6c:	42a9      	cmp	r1, r5
 8004b6e:	d904      	bls.n	8004b7a <_malloc_r+0x26>
 8004b70:	230c      	movs	r3, #12
 8004b72:	6033      	str	r3, [r6, #0]
 8004b74:	2000      	movs	r0, #0
 8004b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c50 <_malloc_r+0xfc>
 8004b7e:	f000 f869 	bl	8004c54 <__malloc_lock>
 8004b82:	f8d8 3000 	ldr.w	r3, [r8]
 8004b86:	461c      	mov	r4, r3
 8004b88:	bb44      	cbnz	r4, 8004bdc <_malloc_r+0x88>
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f7ff ffbf 	bl	8004b10 <sbrk_aligned>
 8004b92:	1c43      	adds	r3, r0, #1
 8004b94:	4604      	mov	r4, r0
 8004b96:	d158      	bne.n	8004c4a <_malloc_r+0xf6>
 8004b98:	f8d8 4000 	ldr.w	r4, [r8]
 8004b9c:	4627      	mov	r7, r4
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	d143      	bne.n	8004c2a <_malloc_r+0xd6>
 8004ba2:	2c00      	cmp	r4, #0
 8004ba4:	d04b      	beq.n	8004c3e <_malloc_r+0xea>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	4639      	mov	r1, r7
 8004baa:	4630      	mov	r0, r6
 8004bac:	eb04 0903 	add.w	r9, r4, r3
 8004bb0:	f000 f922 	bl	8004df8 <_sbrk_r>
 8004bb4:	4581      	cmp	r9, r0
 8004bb6:	d142      	bne.n	8004c3e <_malloc_r+0xea>
 8004bb8:	6821      	ldr	r1, [r4, #0]
 8004bba:	1a6d      	subs	r5, r5, r1
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7ff ffa6 	bl	8004b10 <sbrk_aligned>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d03a      	beq.n	8004c3e <_malloc_r+0xea>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	442b      	add	r3, r5
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	bb62      	cbnz	r2, 8004c30 <_malloc_r+0xdc>
 8004bd6:	f8c8 7000 	str.w	r7, [r8]
 8004bda:	e00f      	b.n	8004bfc <_malloc_r+0xa8>
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	1b52      	subs	r2, r2, r5
 8004be0:	d420      	bmi.n	8004c24 <_malloc_r+0xd0>
 8004be2:	2a0b      	cmp	r2, #11
 8004be4:	d917      	bls.n	8004c16 <_malloc_r+0xc2>
 8004be6:	1961      	adds	r1, r4, r5
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	6025      	str	r5, [r4, #0]
 8004bec:	bf18      	it	ne
 8004bee:	6059      	strne	r1, [r3, #4]
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	bf08      	it	eq
 8004bf4:	f8c8 1000 	streq.w	r1, [r8]
 8004bf8:	5162      	str	r2, [r4, r5]
 8004bfa:	604b      	str	r3, [r1, #4]
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f000 f82f 	bl	8004c60 <__malloc_unlock>
 8004c02:	f104 000b 	add.w	r0, r4, #11
 8004c06:	1d23      	adds	r3, r4, #4
 8004c08:	f020 0007 	bic.w	r0, r0, #7
 8004c0c:	1ac2      	subs	r2, r0, r3
 8004c0e:	bf1c      	itt	ne
 8004c10:	1a1b      	subne	r3, r3, r0
 8004c12:	50a3      	strne	r3, [r4, r2]
 8004c14:	e7af      	b.n	8004b76 <_malloc_r+0x22>
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	bf0c      	ite	eq
 8004c1c:	f8c8 2000 	streq.w	r2, [r8]
 8004c20:	605a      	strne	r2, [r3, #4]
 8004c22:	e7eb      	b.n	8004bfc <_malloc_r+0xa8>
 8004c24:	4623      	mov	r3, r4
 8004c26:	6864      	ldr	r4, [r4, #4]
 8004c28:	e7ae      	b.n	8004b88 <_malloc_r+0x34>
 8004c2a:	463c      	mov	r4, r7
 8004c2c:	687f      	ldr	r7, [r7, #4]
 8004c2e:	e7b6      	b.n	8004b9e <_malloc_r+0x4a>
 8004c30:	461a      	mov	r2, r3
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	d1fb      	bne.n	8004c30 <_malloc_r+0xdc>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6053      	str	r3, [r2, #4]
 8004c3c:	e7de      	b.n	8004bfc <_malloc_r+0xa8>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	4630      	mov	r0, r6
 8004c44:	f000 f80c 	bl	8004c60 <__malloc_unlock>
 8004c48:	e794      	b.n	8004b74 <_malloc_r+0x20>
 8004c4a:	6005      	str	r5, [r0, #0]
 8004c4c:	e7d6      	b.n	8004bfc <_malloc_r+0xa8>
 8004c4e:	bf00      	nop
 8004c50:	20000658 	.word	0x20000658

08004c54 <__malloc_lock>:
 8004c54:	4801      	ldr	r0, [pc, #4]	@ (8004c5c <__malloc_lock+0x8>)
 8004c56:	f000 b909 	b.w	8004e6c <__retarget_lock_acquire_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20000798 	.word	0x20000798

08004c60 <__malloc_unlock>:
 8004c60:	4801      	ldr	r0, [pc, #4]	@ (8004c68 <__malloc_unlock+0x8>)
 8004c62:	f000 b904 	b.w	8004e6e <__retarget_lock_release_recursive>
 8004c66:	bf00      	nop
 8004c68:	20000798 	.word	0x20000798

08004c6c <_strtol_l.constprop.0>:
 8004c6c:	2b24      	cmp	r3, #36	@ 0x24
 8004c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c72:	4686      	mov	lr, r0
 8004c74:	4690      	mov	r8, r2
 8004c76:	d801      	bhi.n	8004c7c <_strtol_l.constprop.0+0x10>
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d106      	bne.n	8004c8a <_strtol_l.constprop.0+0x1e>
 8004c7c:	f000 f8cc 	bl	8004e18 <__errno>
 8004c80:	2316      	movs	r3, #22
 8004c82:	6003      	str	r3, [r0, #0]
 8004c84:	2000      	movs	r0, #0
 8004c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8a:	4834      	ldr	r0, [pc, #208]	@ (8004d5c <_strtol_l.constprop.0+0xf0>)
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	462a      	mov	r2, r5
 8004c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c94:	5d06      	ldrb	r6, [r0, r4]
 8004c96:	f016 0608 	ands.w	r6, r6, #8
 8004c9a:	d1f8      	bne.n	8004c8e <_strtol_l.constprop.0+0x22>
 8004c9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8004c9e:	d12d      	bne.n	8004cfc <_strtol_l.constprop.0+0x90>
 8004ca0:	782c      	ldrb	r4, [r5, #0]
 8004ca2:	2601      	movs	r6, #1
 8004ca4:	1c95      	adds	r5, r2, #2
 8004ca6:	f033 0210 	bics.w	r2, r3, #16
 8004caa:	d109      	bne.n	8004cc0 <_strtol_l.constprop.0+0x54>
 8004cac:	2c30      	cmp	r4, #48	@ 0x30
 8004cae:	d12a      	bne.n	8004d06 <_strtol_l.constprop.0+0x9a>
 8004cb0:	782a      	ldrb	r2, [r5, #0]
 8004cb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004cb6:	2a58      	cmp	r2, #88	@ 0x58
 8004cb8:	d125      	bne.n	8004d06 <_strtol_l.constprop.0+0x9a>
 8004cba:	786c      	ldrb	r4, [r5, #1]
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	3502      	adds	r5, #2
 8004cc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004cc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004cc8:	2200      	movs	r2, #0
 8004cca:	fbbc f9f3 	udiv	r9, ip, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8004cd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004cd8:	2f09      	cmp	r7, #9
 8004cda:	d81b      	bhi.n	8004d14 <_strtol_l.constprop.0+0xa8>
 8004cdc:	463c      	mov	r4, r7
 8004cde:	42a3      	cmp	r3, r4
 8004ce0:	dd27      	ble.n	8004d32 <_strtol_l.constprop.0+0xc6>
 8004ce2:	1c57      	adds	r7, r2, #1
 8004ce4:	d007      	beq.n	8004cf6 <_strtol_l.constprop.0+0x8a>
 8004ce6:	4581      	cmp	r9, r0
 8004ce8:	d320      	bcc.n	8004d2c <_strtol_l.constprop.0+0xc0>
 8004cea:	d101      	bne.n	8004cf0 <_strtol_l.constprop.0+0x84>
 8004cec:	45a2      	cmp	sl, r4
 8004cee:	db1d      	blt.n	8004d2c <_strtol_l.constprop.0+0xc0>
 8004cf0:	fb00 4003 	mla	r0, r0, r3, r4
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cfa:	e7eb      	b.n	8004cd4 <_strtol_l.constprop.0+0x68>
 8004cfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8004cfe:	bf04      	itt	eq
 8004d00:	782c      	ldrbeq	r4, [r5, #0]
 8004d02:	1c95      	addeq	r5, r2, #2
 8004d04:	e7cf      	b.n	8004ca6 <_strtol_l.constprop.0+0x3a>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1da      	bne.n	8004cc0 <_strtol_l.constprop.0+0x54>
 8004d0a:	2c30      	cmp	r4, #48	@ 0x30
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2308      	moveq	r3, #8
 8004d10:	230a      	movne	r3, #10
 8004d12:	e7d5      	b.n	8004cc0 <_strtol_l.constprop.0+0x54>
 8004d14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004d18:	2f19      	cmp	r7, #25
 8004d1a:	d801      	bhi.n	8004d20 <_strtol_l.constprop.0+0xb4>
 8004d1c:	3c37      	subs	r4, #55	@ 0x37
 8004d1e:	e7de      	b.n	8004cde <_strtol_l.constprop.0+0x72>
 8004d20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004d24:	2f19      	cmp	r7, #25
 8004d26:	d804      	bhi.n	8004d32 <_strtol_l.constprop.0+0xc6>
 8004d28:	3c57      	subs	r4, #87	@ 0x57
 8004d2a:	e7d8      	b.n	8004cde <_strtol_l.constprop.0+0x72>
 8004d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d30:	e7e1      	b.n	8004cf6 <_strtol_l.constprop.0+0x8a>
 8004d32:	1c53      	adds	r3, r2, #1
 8004d34:	d108      	bne.n	8004d48 <_strtol_l.constprop.0+0xdc>
 8004d36:	2322      	movs	r3, #34	@ 0x22
 8004d38:	f8ce 3000 	str.w	r3, [lr]
 8004d3c:	4660      	mov	r0, ip
 8004d3e:	f1b8 0f00 	cmp.w	r8, #0
 8004d42:	d0a0      	beq.n	8004c86 <_strtol_l.constprop.0+0x1a>
 8004d44:	1e69      	subs	r1, r5, #1
 8004d46:	e006      	b.n	8004d56 <_strtol_l.constprop.0+0xea>
 8004d48:	b106      	cbz	r6, 8004d4c <_strtol_l.constprop.0+0xe0>
 8004d4a:	4240      	negs	r0, r0
 8004d4c:	f1b8 0f00 	cmp.w	r8, #0
 8004d50:	d099      	beq.n	8004c86 <_strtol_l.constprop.0+0x1a>
 8004d52:	2a00      	cmp	r2, #0
 8004d54:	d1f6      	bne.n	8004d44 <_strtol_l.constprop.0+0xd8>
 8004d56:	f8c8 1000 	str.w	r1, [r8]
 8004d5a:	e794      	b.n	8004c86 <_strtol_l.constprop.0+0x1a>
 8004d5c:	08006339 	.word	0x08006339

08004d60 <strtol>:
 8004d60:	4613      	mov	r3, r2
 8004d62:	460a      	mov	r2, r1
 8004d64:	4601      	mov	r1, r0
 8004d66:	4802      	ldr	r0, [pc, #8]	@ (8004d70 <strtol+0x10>)
 8004d68:	6800      	ldr	r0, [r0, #0]
 8004d6a:	f7ff bf7f 	b.w	8004c6c <_strtol_l.constprop.0>
 8004d6e:	bf00      	nop
 8004d70:	2000000c 	.word	0x2000000c

08004d74 <siprintf>:
 8004d74:	b40e      	push	{r1, r2, r3}
 8004d76:	b500      	push	{lr}
 8004d78:	b09c      	sub	sp, #112	@ 0x70
 8004d7a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d7c:	9002      	str	r0, [sp, #8]
 8004d7e:	9006      	str	r0, [sp, #24]
 8004d80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d84:	4809      	ldr	r0, [pc, #36]	@ (8004dac <siprintf+0x38>)
 8004d86:	9107      	str	r1, [sp, #28]
 8004d88:	9104      	str	r1, [sp, #16]
 8004d8a:	4909      	ldr	r1, [pc, #36]	@ (8004db0 <siprintf+0x3c>)
 8004d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d90:	9105      	str	r1, [sp, #20]
 8004d92:	6800      	ldr	r0, [r0, #0]
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	a902      	add	r1, sp, #8
 8004d98:	f000 f91e 	bl	8004fd8 <_svfiprintf_r>
 8004d9c:	9b02      	ldr	r3, [sp, #8]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	b01c      	add	sp, #112	@ 0x70
 8004da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da8:	b003      	add	sp, #12
 8004daa:	4770      	bx	lr
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	ffff0208 	.word	0xffff0208

08004db4 <memmove>:
 8004db4:	4288      	cmp	r0, r1
 8004db6:	b510      	push	{r4, lr}
 8004db8:	eb01 0402 	add.w	r4, r1, r2
 8004dbc:	d902      	bls.n	8004dc4 <memmove+0x10>
 8004dbe:	4284      	cmp	r4, r0
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	d807      	bhi.n	8004dd4 <memmove+0x20>
 8004dc4:	1e43      	subs	r3, r0, #1
 8004dc6:	42a1      	cmp	r1, r4
 8004dc8:	d008      	beq.n	8004ddc <memmove+0x28>
 8004dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dd2:	e7f8      	b.n	8004dc6 <memmove+0x12>
 8004dd4:	4402      	add	r2, r0
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	428a      	cmp	r2, r1
 8004dda:	d100      	bne.n	8004dde <memmove+0x2a>
 8004ddc:	bd10      	pop	{r4, pc}
 8004dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004de6:	e7f7      	b.n	8004dd8 <memmove+0x24>

08004de8 <memset>:
 8004de8:	4402      	add	r2, r0
 8004dea:	4603      	mov	r3, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <_sbrk_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4d06      	ldr	r5, [pc, #24]	@ (8004e14 <_sbrk_r+0x1c>)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	f7fc ffb6 	bl	8001d74 <_sbrk>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_sbrk_r+0x1a>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_sbrk_r+0x1a>
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	20000794 	.word	0x20000794

08004e18 <__errno>:
 8004e18:	4b01      	ldr	r3, [pc, #4]	@ (8004e20 <__errno+0x8>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2000000c 	.word	0x2000000c

08004e24 <__libc_init_array>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	4d0d      	ldr	r5, [pc, #52]	@ (8004e5c <__libc_init_array+0x38>)
 8004e28:	4c0d      	ldr	r4, [pc, #52]	@ (8004e60 <__libc_init_array+0x3c>)
 8004e2a:	1b64      	subs	r4, r4, r5
 8004e2c:	10a4      	asrs	r4, r4, #2
 8004e2e:	2600      	movs	r6, #0
 8004e30:	42a6      	cmp	r6, r4
 8004e32:	d109      	bne.n	8004e48 <__libc_init_array+0x24>
 8004e34:	4d0b      	ldr	r5, [pc, #44]	@ (8004e64 <__libc_init_array+0x40>)
 8004e36:	4c0c      	ldr	r4, [pc, #48]	@ (8004e68 <__libc_init_array+0x44>)
 8004e38:	f000 fb8e 	bl	8005558 <_init>
 8004e3c:	1b64      	subs	r4, r4, r5
 8004e3e:	10a4      	asrs	r4, r4, #2
 8004e40:	2600      	movs	r6, #0
 8004e42:	42a6      	cmp	r6, r4
 8004e44:	d105      	bne.n	8004e52 <__libc_init_array+0x2e>
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4c:	4798      	blx	r3
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7ee      	b.n	8004e30 <__libc_init_array+0xc>
 8004e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e56:	4798      	blx	r3
 8004e58:	3601      	adds	r6, #1
 8004e5a:	e7f2      	b.n	8004e42 <__libc_init_array+0x1e>
 8004e5c:	08006474 	.word	0x08006474
 8004e60:	08006474 	.word	0x08006474
 8004e64:	08006474 	.word	0x08006474
 8004e68:	08006478 	.word	0x08006478

08004e6c <__retarget_lock_acquire_recursive>:
 8004e6c:	4770      	bx	lr

08004e6e <__retarget_lock_release_recursive>:
 8004e6e:	4770      	bx	lr

08004e70 <memcpy>:
 8004e70:	440a      	add	r2, r1
 8004e72:	4291      	cmp	r1, r2
 8004e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e78:	d100      	bne.n	8004e7c <memcpy+0xc>
 8004e7a:	4770      	bx	lr
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e86:	4291      	cmp	r1, r2
 8004e88:	d1f9      	bne.n	8004e7e <memcpy+0xe>
 8004e8a:	bd10      	pop	{r4, pc}

08004e8c <_free_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4605      	mov	r5, r0
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d041      	beq.n	8004f18 <_free_r+0x8c>
 8004e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e98:	1f0c      	subs	r4, r1, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bfb8      	it	lt
 8004e9e:	18e4      	addlt	r4, r4, r3
 8004ea0:	f7ff fed8 	bl	8004c54 <__malloc_lock>
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f1c <_free_r+0x90>)
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	b933      	cbnz	r3, 8004eb8 <_free_r+0x2c>
 8004eaa:	6063      	str	r3, [r4, #4]
 8004eac:	6014      	str	r4, [r2, #0]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb4:	f7ff bed4 	b.w	8004c60 <__malloc_unlock>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d908      	bls.n	8004ece <_free_r+0x42>
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	1821      	adds	r1, r4, r0
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	bf01      	itttt	eq
 8004ec4:	6819      	ldreq	r1, [r3, #0]
 8004ec6:	685b      	ldreq	r3, [r3, #4]
 8004ec8:	1809      	addeq	r1, r1, r0
 8004eca:	6021      	streq	r1, [r4, #0]
 8004ecc:	e7ed      	b.n	8004eaa <_free_r+0x1e>
 8004ece:	461a      	mov	r2, r3
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	b10b      	cbz	r3, 8004ed8 <_free_r+0x4c>
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	d9fa      	bls.n	8004ece <_free_r+0x42>
 8004ed8:	6811      	ldr	r1, [r2, #0]
 8004eda:	1850      	adds	r0, r2, r1
 8004edc:	42a0      	cmp	r0, r4
 8004ede:	d10b      	bne.n	8004ef8 <_free_r+0x6c>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	4401      	add	r1, r0
 8004ee4:	1850      	adds	r0, r2, r1
 8004ee6:	4283      	cmp	r3, r0
 8004ee8:	6011      	str	r1, [r2, #0]
 8004eea:	d1e0      	bne.n	8004eae <_free_r+0x22>
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	6053      	str	r3, [r2, #4]
 8004ef2:	4408      	add	r0, r1
 8004ef4:	6010      	str	r0, [r2, #0]
 8004ef6:	e7da      	b.n	8004eae <_free_r+0x22>
 8004ef8:	d902      	bls.n	8004f00 <_free_r+0x74>
 8004efa:	230c      	movs	r3, #12
 8004efc:	602b      	str	r3, [r5, #0]
 8004efe:	e7d6      	b.n	8004eae <_free_r+0x22>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	1821      	adds	r1, r4, r0
 8004f04:	428b      	cmp	r3, r1
 8004f06:	bf04      	itt	eq
 8004f08:	6819      	ldreq	r1, [r3, #0]
 8004f0a:	685b      	ldreq	r3, [r3, #4]
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	bf04      	itt	eq
 8004f10:	1809      	addeq	r1, r1, r0
 8004f12:	6021      	streq	r1, [r4, #0]
 8004f14:	6054      	str	r4, [r2, #4]
 8004f16:	e7ca      	b.n	8004eae <_free_r+0x22>
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000658 	.word	0x20000658

08004f20 <__ssputs_r>:
 8004f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	688e      	ldr	r6, [r1, #8]
 8004f26:	461f      	mov	r7, r3
 8004f28:	42be      	cmp	r6, r7
 8004f2a:	680b      	ldr	r3, [r1, #0]
 8004f2c:	4682      	mov	sl, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4690      	mov	r8, r2
 8004f32:	d82d      	bhi.n	8004f90 <__ssputs_r+0x70>
 8004f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f3c:	d026      	beq.n	8004f8c <__ssputs_r+0x6c>
 8004f3e:	6965      	ldr	r5, [r4, #20]
 8004f40:	6909      	ldr	r1, [r1, #16]
 8004f42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f46:	eba3 0901 	sub.w	r9, r3, r1
 8004f4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f4e:	1c7b      	adds	r3, r7, #1
 8004f50:	444b      	add	r3, r9
 8004f52:	106d      	asrs	r5, r5, #1
 8004f54:	429d      	cmp	r5, r3
 8004f56:	bf38      	it	cc
 8004f58:	461d      	movcc	r5, r3
 8004f5a:	0553      	lsls	r3, r2, #21
 8004f5c:	d527      	bpl.n	8004fae <__ssputs_r+0x8e>
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7ff fdf8 	bl	8004b54 <_malloc_r>
 8004f64:	4606      	mov	r6, r0
 8004f66:	b360      	cbz	r0, 8004fc2 <__ssputs_r+0xa2>
 8004f68:	6921      	ldr	r1, [r4, #16]
 8004f6a:	464a      	mov	r2, r9
 8004f6c:	f7ff ff80 	bl	8004e70 <memcpy>
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f7a:	81a3      	strh	r3, [r4, #12]
 8004f7c:	6126      	str	r6, [r4, #16]
 8004f7e:	6165      	str	r5, [r4, #20]
 8004f80:	444e      	add	r6, r9
 8004f82:	eba5 0509 	sub.w	r5, r5, r9
 8004f86:	6026      	str	r6, [r4, #0]
 8004f88:	60a5      	str	r5, [r4, #8]
 8004f8a:	463e      	mov	r6, r7
 8004f8c:	42be      	cmp	r6, r7
 8004f8e:	d900      	bls.n	8004f92 <__ssputs_r+0x72>
 8004f90:	463e      	mov	r6, r7
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	4632      	mov	r2, r6
 8004f96:	4641      	mov	r1, r8
 8004f98:	f7ff ff0c 	bl	8004db4 <memmove>
 8004f9c:	68a3      	ldr	r3, [r4, #8]
 8004f9e:	1b9b      	subs	r3, r3, r6
 8004fa0:	60a3      	str	r3, [r4, #8]
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	4433      	add	r3, r6
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	2000      	movs	r0, #0
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	462a      	mov	r2, r5
 8004fb0:	f000 fa9c 	bl	80054ec <_realloc_r>
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d1e0      	bne.n	8004f7c <__ssputs_r+0x5c>
 8004fba:	6921      	ldr	r1, [r4, #16]
 8004fbc:	4650      	mov	r0, sl
 8004fbe:	f7ff ff65 	bl	8004e8c <_free_r>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	f8ca 3000 	str.w	r3, [sl]
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	e7e9      	b.n	8004faa <__ssputs_r+0x8a>
	...

08004fd8 <_svfiprintf_r>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	4698      	mov	r8, r3
 8004fde:	898b      	ldrh	r3, [r1, #12]
 8004fe0:	061b      	lsls	r3, r3, #24
 8004fe2:	b09d      	sub	sp, #116	@ 0x74
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	4614      	mov	r4, r2
 8004fea:	d510      	bpl.n	800500e <_svfiprintf_r+0x36>
 8004fec:	690b      	ldr	r3, [r1, #16]
 8004fee:	b973      	cbnz	r3, 800500e <_svfiprintf_r+0x36>
 8004ff0:	2140      	movs	r1, #64	@ 0x40
 8004ff2:	f7ff fdaf 	bl	8004b54 <_malloc_r>
 8004ff6:	6028      	str	r0, [r5, #0]
 8004ff8:	6128      	str	r0, [r5, #16]
 8004ffa:	b930      	cbnz	r0, 800500a <_svfiprintf_r+0x32>
 8004ffc:	230c      	movs	r3, #12
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	f04f 30ff 	mov.w	r0, #4294967295
 8005004:	b01d      	add	sp, #116	@ 0x74
 8005006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500a:	2340      	movs	r3, #64	@ 0x40
 800500c:	616b      	str	r3, [r5, #20]
 800500e:	2300      	movs	r3, #0
 8005010:	9309      	str	r3, [sp, #36]	@ 0x24
 8005012:	2320      	movs	r3, #32
 8005014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005018:	f8cd 800c 	str.w	r8, [sp, #12]
 800501c:	2330      	movs	r3, #48	@ 0x30
 800501e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051bc <_svfiprintf_r+0x1e4>
 8005022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005026:	f04f 0901 	mov.w	r9, #1
 800502a:	4623      	mov	r3, r4
 800502c:	469a      	mov	sl, r3
 800502e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005032:	b10a      	cbz	r2, 8005038 <_svfiprintf_r+0x60>
 8005034:	2a25      	cmp	r2, #37	@ 0x25
 8005036:	d1f9      	bne.n	800502c <_svfiprintf_r+0x54>
 8005038:	ebba 0b04 	subs.w	fp, sl, r4
 800503c:	d00b      	beq.n	8005056 <_svfiprintf_r+0x7e>
 800503e:	465b      	mov	r3, fp
 8005040:	4622      	mov	r2, r4
 8005042:	4629      	mov	r1, r5
 8005044:	4638      	mov	r0, r7
 8005046:	f7ff ff6b 	bl	8004f20 <__ssputs_r>
 800504a:	3001      	adds	r0, #1
 800504c:	f000 80a7 	beq.w	800519e <_svfiprintf_r+0x1c6>
 8005050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005052:	445a      	add	r2, fp
 8005054:	9209      	str	r2, [sp, #36]	@ 0x24
 8005056:	f89a 3000 	ldrb.w	r3, [sl]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 809f 	beq.w	800519e <_svfiprintf_r+0x1c6>
 8005060:	2300      	movs	r3, #0
 8005062:	f04f 32ff 	mov.w	r2, #4294967295
 8005066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800506a:	f10a 0a01 	add.w	sl, sl, #1
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	9307      	str	r3, [sp, #28]
 8005072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005076:	931a      	str	r3, [sp, #104]	@ 0x68
 8005078:	4654      	mov	r4, sl
 800507a:	2205      	movs	r2, #5
 800507c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005080:	484e      	ldr	r0, [pc, #312]	@ (80051bc <_svfiprintf_r+0x1e4>)
 8005082:	f7fb f8ad 	bl	80001e0 <memchr>
 8005086:	9a04      	ldr	r2, [sp, #16]
 8005088:	b9d8      	cbnz	r0, 80050c2 <_svfiprintf_r+0xea>
 800508a:	06d0      	lsls	r0, r2, #27
 800508c:	bf44      	itt	mi
 800508e:	2320      	movmi	r3, #32
 8005090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005094:	0711      	lsls	r1, r2, #28
 8005096:	bf44      	itt	mi
 8005098:	232b      	movmi	r3, #43	@ 0x2b
 800509a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800509e:	f89a 3000 	ldrb.w	r3, [sl]
 80050a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a4:	d015      	beq.n	80050d2 <_svfiprintf_r+0xfa>
 80050a6:	9a07      	ldr	r2, [sp, #28]
 80050a8:	4654      	mov	r4, sl
 80050aa:	2000      	movs	r0, #0
 80050ac:	f04f 0c0a 	mov.w	ip, #10
 80050b0:	4621      	mov	r1, r4
 80050b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b6:	3b30      	subs	r3, #48	@ 0x30
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d94b      	bls.n	8005154 <_svfiprintf_r+0x17c>
 80050bc:	b1b0      	cbz	r0, 80050ec <_svfiprintf_r+0x114>
 80050be:	9207      	str	r2, [sp, #28]
 80050c0:	e014      	b.n	80050ec <_svfiprintf_r+0x114>
 80050c2:	eba0 0308 	sub.w	r3, r0, r8
 80050c6:	fa09 f303 	lsl.w	r3, r9, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	9304      	str	r3, [sp, #16]
 80050ce:	46a2      	mov	sl, r4
 80050d0:	e7d2      	b.n	8005078 <_svfiprintf_r+0xa0>
 80050d2:	9b03      	ldr	r3, [sp, #12]
 80050d4:	1d19      	adds	r1, r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	9103      	str	r1, [sp, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bfbb      	ittet	lt
 80050de:	425b      	neglt	r3, r3
 80050e0:	f042 0202 	orrlt.w	r2, r2, #2
 80050e4:	9307      	strge	r3, [sp, #28]
 80050e6:	9307      	strlt	r3, [sp, #28]
 80050e8:	bfb8      	it	lt
 80050ea:	9204      	strlt	r2, [sp, #16]
 80050ec:	7823      	ldrb	r3, [r4, #0]
 80050ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80050f0:	d10a      	bne.n	8005108 <_svfiprintf_r+0x130>
 80050f2:	7863      	ldrb	r3, [r4, #1]
 80050f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050f6:	d132      	bne.n	800515e <_svfiprintf_r+0x186>
 80050f8:	9b03      	ldr	r3, [sp, #12]
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	9203      	str	r2, [sp, #12]
 8005100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005104:	3402      	adds	r4, #2
 8005106:	9305      	str	r3, [sp, #20]
 8005108:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80051cc <_svfiprintf_r+0x1f4>
 800510c:	7821      	ldrb	r1, [r4, #0]
 800510e:	2203      	movs	r2, #3
 8005110:	4650      	mov	r0, sl
 8005112:	f7fb f865 	bl	80001e0 <memchr>
 8005116:	b138      	cbz	r0, 8005128 <_svfiprintf_r+0x150>
 8005118:	9b04      	ldr	r3, [sp, #16]
 800511a:	eba0 000a 	sub.w	r0, r0, sl
 800511e:	2240      	movs	r2, #64	@ 0x40
 8005120:	4082      	lsls	r2, r0
 8005122:	4313      	orrs	r3, r2
 8005124:	3401      	adds	r4, #1
 8005126:	9304      	str	r3, [sp, #16]
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	4824      	ldr	r0, [pc, #144]	@ (80051c0 <_svfiprintf_r+0x1e8>)
 800512e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005132:	2206      	movs	r2, #6
 8005134:	f7fb f854 	bl	80001e0 <memchr>
 8005138:	2800      	cmp	r0, #0
 800513a:	d036      	beq.n	80051aa <_svfiprintf_r+0x1d2>
 800513c:	4b21      	ldr	r3, [pc, #132]	@ (80051c4 <_svfiprintf_r+0x1ec>)
 800513e:	bb1b      	cbnz	r3, 8005188 <_svfiprintf_r+0x1b0>
 8005140:	9b03      	ldr	r3, [sp, #12]
 8005142:	3307      	adds	r3, #7
 8005144:	f023 0307 	bic.w	r3, r3, #7
 8005148:	3308      	adds	r3, #8
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800514e:	4433      	add	r3, r6
 8005150:	9309      	str	r3, [sp, #36]	@ 0x24
 8005152:	e76a      	b.n	800502a <_svfiprintf_r+0x52>
 8005154:	fb0c 3202 	mla	r2, ip, r2, r3
 8005158:	460c      	mov	r4, r1
 800515a:	2001      	movs	r0, #1
 800515c:	e7a8      	b.n	80050b0 <_svfiprintf_r+0xd8>
 800515e:	2300      	movs	r3, #0
 8005160:	3401      	adds	r4, #1
 8005162:	9305      	str	r3, [sp, #20]
 8005164:	4619      	mov	r1, r3
 8005166:	f04f 0c0a 	mov.w	ip, #10
 800516a:	4620      	mov	r0, r4
 800516c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005170:	3a30      	subs	r2, #48	@ 0x30
 8005172:	2a09      	cmp	r2, #9
 8005174:	d903      	bls.n	800517e <_svfiprintf_r+0x1a6>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0c6      	beq.n	8005108 <_svfiprintf_r+0x130>
 800517a:	9105      	str	r1, [sp, #20]
 800517c:	e7c4      	b.n	8005108 <_svfiprintf_r+0x130>
 800517e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005182:	4604      	mov	r4, r0
 8005184:	2301      	movs	r3, #1
 8005186:	e7f0      	b.n	800516a <_svfiprintf_r+0x192>
 8005188:	ab03      	add	r3, sp, #12
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	462a      	mov	r2, r5
 800518e:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <_svfiprintf_r+0x1f0>)
 8005190:	a904      	add	r1, sp, #16
 8005192:	4638      	mov	r0, r7
 8005194:	f3af 8000 	nop.w
 8005198:	1c42      	adds	r2, r0, #1
 800519a:	4606      	mov	r6, r0
 800519c:	d1d6      	bne.n	800514c <_svfiprintf_r+0x174>
 800519e:	89ab      	ldrh	r3, [r5, #12]
 80051a0:	065b      	lsls	r3, r3, #25
 80051a2:	f53f af2d 	bmi.w	8005000 <_svfiprintf_r+0x28>
 80051a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051a8:	e72c      	b.n	8005004 <_svfiprintf_r+0x2c>
 80051aa:	ab03      	add	r3, sp, #12
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	462a      	mov	r2, r5
 80051b0:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <_svfiprintf_r+0x1f0>)
 80051b2:	a904      	add	r1, sp, #16
 80051b4:	4638      	mov	r0, r7
 80051b6:	f000 f879 	bl	80052ac <_printf_i>
 80051ba:	e7ed      	b.n	8005198 <_svfiprintf_r+0x1c0>
 80051bc:	08006439 	.word	0x08006439
 80051c0:	08006443 	.word	0x08006443
 80051c4:	00000000 	.word	0x00000000
 80051c8:	08004f21 	.word	0x08004f21
 80051cc:	0800643f 	.word	0x0800643f

080051d0 <_printf_common>:
 80051d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	4616      	mov	r6, r2
 80051d6:	4698      	mov	r8, r3
 80051d8:	688a      	ldr	r2, [r1, #8]
 80051da:	690b      	ldr	r3, [r1, #16]
 80051dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051e0:	4293      	cmp	r3, r2
 80051e2:	bfb8      	it	lt
 80051e4:	4613      	movlt	r3, r2
 80051e6:	6033      	str	r3, [r6, #0]
 80051e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051ec:	4607      	mov	r7, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	b10a      	cbz	r2, 80051f6 <_printf_common+0x26>
 80051f2:	3301      	adds	r3, #1
 80051f4:	6033      	str	r3, [r6, #0]
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	0699      	lsls	r1, r3, #26
 80051fa:	bf42      	ittt	mi
 80051fc:	6833      	ldrmi	r3, [r6, #0]
 80051fe:	3302      	addmi	r3, #2
 8005200:	6033      	strmi	r3, [r6, #0]
 8005202:	6825      	ldr	r5, [r4, #0]
 8005204:	f015 0506 	ands.w	r5, r5, #6
 8005208:	d106      	bne.n	8005218 <_printf_common+0x48>
 800520a:	f104 0a19 	add.w	sl, r4, #25
 800520e:	68e3      	ldr	r3, [r4, #12]
 8005210:	6832      	ldr	r2, [r6, #0]
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	42ab      	cmp	r3, r5
 8005216:	dc26      	bgt.n	8005266 <_printf_common+0x96>
 8005218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800521c:	6822      	ldr	r2, [r4, #0]
 800521e:	3b00      	subs	r3, #0
 8005220:	bf18      	it	ne
 8005222:	2301      	movne	r3, #1
 8005224:	0692      	lsls	r2, r2, #26
 8005226:	d42b      	bmi.n	8005280 <_printf_common+0xb0>
 8005228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800522c:	4641      	mov	r1, r8
 800522e:	4638      	mov	r0, r7
 8005230:	47c8      	blx	r9
 8005232:	3001      	adds	r0, #1
 8005234:	d01e      	beq.n	8005274 <_printf_common+0xa4>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	6922      	ldr	r2, [r4, #16]
 800523a:	f003 0306 	and.w	r3, r3, #6
 800523e:	2b04      	cmp	r3, #4
 8005240:	bf02      	ittt	eq
 8005242:	68e5      	ldreq	r5, [r4, #12]
 8005244:	6833      	ldreq	r3, [r6, #0]
 8005246:	1aed      	subeq	r5, r5, r3
 8005248:	68a3      	ldr	r3, [r4, #8]
 800524a:	bf0c      	ite	eq
 800524c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005250:	2500      	movne	r5, #0
 8005252:	4293      	cmp	r3, r2
 8005254:	bfc4      	itt	gt
 8005256:	1a9b      	subgt	r3, r3, r2
 8005258:	18ed      	addgt	r5, r5, r3
 800525a:	2600      	movs	r6, #0
 800525c:	341a      	adds	r4, #26
 800525e:	42b5      	cmp	r5, r6
 8005260:	d11a      	bne.n	8005298 <_printf_common+0xc8>
 8005262:	2000      	movs	r0, #0
 8005264:	e008      	b.n	8005278 <_printf_common+0xa8>
 8005266:	2301      	movs	r3, #1
 8005268:	4652      	mov	r2, sl
 800526a:	4641      	mov	r1, r8
 800526c:	4638      	mov	r0, r7
 800526e:	47c8      	blx	r9
 8005270:	3001      	adds	r0, #1
 8005272:	d103      	bne.n	800527c <_printf_common+0xac>
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527c:	3501      	adds	r5, #1
 800527e:	e7c6      	b.n	800520e <_printf_common+0x3e>
 8005280:	18e1      	adds	r1, r4, r3
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	2030      	movs	r0, #48	@ 0x30
 8005286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800528a:	4422      	add	r2, r4
 800528c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005294:	3302      	adds	r3, #2
 8005296:	e7c7      	b.n	8005228 <_printf_common+0x58>
 8005298:	2301      	movs	r3, #1
 800529a:	4622      	mov	r2, r4
 800529c:	4641      	mov	r1, r8
 800529e:	4638      	mov	r0, r7
 80052a0:	47c8      	blx	r9
 80052a2:	3001      	adds	r0, #1
 80052a4:	d0e6      	beq.n	8005274 <_printf_common+0xa4>
 80052a6:	3601      	adds	r6, #1
 80052a8:	e7d9      	b.n	800525e <_printf_common+0x8e>
	...

080052ac <_printf_i>:
 80052ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	7e0f      	ldrb	r7, [r1, #24]
 80052b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052b4:	2f78      	cmp	r7, #120	@ 0x78
 80052b6:	4691      	mov	r9, r2
 80052b8:	4680      	mov	r8, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	469a      	mov	sl, r3
 80052be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052c2:	d807      	bhi.n	80052d4 <_printf_i+0x28>
 80052c4:	2f62      	cmp	r7, #98	@ 0x62
 80052c6:	d80a      	bhi.n	80052de <_printf_i+0x32>
 80052c8:	2f00      	cmp	r7, #0
 80052ca:	f000 80d2 	beq.w	8005472 <_printf_i+0x1c6>
 80052ce:	2f58      	cmp	r7, #88	@ 0x58
 80052d0:	f000 80b9 	beq.w	8005446 <_printf_i+0x19a>
 80052d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052dc:	e03a      	b.n	8005354 <_printf_i+0xa8>
 80052de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052e2:	2b15      	cmp	r3, #21
 80052e4:	d8f6      	bhi.n	80052d4 <_printf_i+0x28>
 80052e6:	a101      	add	r1, pc, #4	@ (adr r1, 80052ec <_printf_i+0x40>)
 80052e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052ec:	08005345 	.word	0x08005345
 80052f0:	08005359 	.word	0x08005359
 80052f4:	080052d5 	.word	0x080052d5
 80052f8:	080052d5 	.word	0x080052d5
 80052fc:	080052d5 	.word	0x080052d5
 8005300:	080052d5 	.word	0x080052d5
 8005304:	08005359 	.word	0x08005359
 8005308:	080052d5 	.word	0x080052d5
 800530c:	080052d5 	.word	0x080052d5
 8005310:	080052d5 	.word	0x080052d5
 8005314:	080052d5 	.word	0x080052d5
 8005318:	08005459 	.word	0x08005459
 800531c:	08005383 	.word	0x08005383
 8005320:	08005413 	.word	0x08005413
 8005324:	080052d5 	.word	0x080052d5
 8005328:	080052d5 	.word	0x080052d5
 800532c:	0800547b 	.word	0x0800547b
 8005330:	080052d5 	.word	0x080052d5
 8005334:	08005383 	.word	0x08005383
 8005338:	080052d5 	.word	0x080052d5
 800533c:	080052d5 	.word	0x080052d5
 8005340:	0800541b 	.word	0x0800541b
 8005344:	6833      	ldr	r3, [r6, #0]
 8005346:	1d1a      	adds	r2, r3, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6032      	str	r2, [r6, #0]
 800534c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005354:	2301      	movs	r3, #1
 8005356:	e09d      	b.n	8005494 <_printf_i+0x1e8>
 8005358:	6833      	ldr	r3, [r6, #0]
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	1d19      	adds	r1, r3, #4
 800535e:	6031      	str	r1, [r6, #0]
 8005360:	0606      	lsls	r6, r0, #24
 8005362:	d501      	bpl.n	8005368 <_printf_i+0xbc>
 8005364:	681d      	ldr	r5, [r3, #0]
 8005366:	e003      	b.n	8005370 <_printf_i+0xc4>
 8005368:	0645      	lsls	r5, r0, #25
 800536a:	d5fb      	bpl.n	8005364 <_printf_i+0xb8>
 800536c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005370:	2d00      	cmp	r5, #0
 8005372:	da03      	bge.n	800537c <_printf_i+0xd0>
 8005374:	232d      	movs	r3, #45	@ 0x2d
 8005376:	426d      	negs	r5, r5
 8005378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800537c:	4859      	ldr	r0, [pc, #356]	@ (80054e4 <_printf_i+0x238>)
 800537e:	230a      	movs	r3, #10
 8005380:	e011      	b.n	80053a6 <_printf_i+0xfa>
 8005382:	6821      	ldr	r1, [r4, #0]
 8005384:	6833      	ldr	r3, [r6, #0]
 8005386:	0608      	lsls	r0, r1, #24
 8005388:	f853 5b04 	ldr.w	r5, [r3], #4
 800538c:	d402      	bmi.n	8005394 <_printf_i+0xe8>
 800538e:	0649      	lsls	r1, r1, #25
 8005390:	bf48      	it	mi
 8005392:	b2ad      	uxthmi	r5, r5
 8005394:	2f6f      	cmp	r7, #111	@ 0x6f
 8005396:	4853      	ldr	r0, [pc, #332]	@ (80054e4 <_printf_i+0x238>)
 8005398:	6033      	str	r3, [r6, #0]
 800539a:	bf14      	ite	ne
 800539c:	230a      	movne	r3, #10
 800539e:	2308      	moveq	r3, #8
 80053a0:	2100      	movs	r1, #0
 80053a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053a6:	6866      	ldr	r6, [r4, #4]
 80053a8:	60a6      	str	r6, [r4, #8]
 80053aa:	2e00      	cmp	r6, #0
 80053ac:	bfa2      	ittt	ge
 80053ae:	6821      	ldrge	r1, [r4, #0]
 80053b0:	f021 0104 	bicge.w	r1, r1, #4
 80053b4:	6021      	strge	r1, [r4, #0]
 80053b6:	b90d      	cbnz	r5, 80053bc <_printf_i+0x110>
 80053b8:	2e00      	cmp	r6, #0
 80053ba:	d04b      	beq.n	8005454 <_printf_i+0x1a8>
 80053bc:	4616      	mov	r6, r2
 80053be:	fbb5 f1f3 	udiv	r1, r5, r3
 80053c2:	fb03 5711 	mls	r7, r3, r1, r5
 80053c6:	5dc7      	ldrb	r7, [r0, r7]
 80053c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053cc:	462f      	mov	r7, r5
 80053ce:	42bb      	cmp	r3, r7
 80053d0:	460d      	mov	r5, r1
 80053d2:	d9f4      	bls.n	80053be <_printf_i+0x112>
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d10b      	bne.n	80053f0 <_printf_i+0x144>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	07df      	lsls	r7, r3, #31
 80053dc:	d508      	bpl.n	80053f0 <_printf_i+0x144>
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	6861      	ldr	r1, [r4, #4]
 80053e2:	4299      	cmp	r1, r3
 80053e4:	bfde      	ittt	le
 80053e6:	2330      	movle	r3, #48	@ 0x30
 80053e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053f0:	1b92      	subs	r2, r2, r6
 80053f2:	6122      	str	r2, [r4, #16]
 80053f4:	f8cd a000 	str.w	sl, [sp]
 80053f8:	464b      	mov	r3, r9
 80053fa:	aa03      	add	r2, sp, #12
 80053fc:	4621      	mov	r1, r4
 80053fe:	4640      	mov	r0, r8
 8005400:	f7ff fee6 	bl	80051d0 <_printf_common>
 8005404:	3001      	adds	r0, #1
 8005406:	d14a      	bne.n	800549e <_printf_i+0x1f2>
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	b004      	add	sp, #16
 800540e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	f043 0320 	orr.w	r3, r3, #32
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	4833      	ldr	r0, [pc, #204]	@ (80054e8 <_printf_i+0x23c>)
 800541c:	2778      	movs	r7, #120	@ 0x78
 800541e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	6831      	ldr	r1, [r6, #0]
 8005426:	061f      	lsls	r7, r3, #24
 8005428:	f851 5b04 	ldr.w	r5, [r1], #4
 800542c:	d402      	bmi.n	8005434 <_printf_i+0x188>
 800542e:	065f      	lsls	r7, r3, #25
 8005430:	bf48      	it	mi
 8005432:	b2ad      	uxthmi	r5, r5
 8005434:	6031      	str	r1, [r6, #0]
 8005436:	07d9      	lsls	r1, r3, #31
 8005438:	bf44      	itt	mi
 800543a:	f043 0320 	orrmi.w	r3, r3, #32
 800543e:	6023      	strmi	r3, [r4, #0]
 8005440:	b11d      	cbz	r5, 800544a <_printf_i+0x19e>
 8005442:	2310      	movs	r3, #16
 8005444:	e7ac      	b.n	80053a0 <_printf_i+0xf4>
 8005446:	4827      	ldr	r0, [pc, #156]	@ (80054e4 <_printf_i+0x238>)
 8005448:	e7e9      	b.n	800541e <_printf_i+0x172>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	f023 0320 	bic.w	r3, r3, #32
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	e7f6      	b.n	8005442 <_printf_i+0x196>
 8005454:	4616      	mov	r6, r2
 8005456:	e7bd      	b.n	80053d4 <_printf_i+0x128>
 8005458:	6833      	ldr	r3, [r6, #0]
 800545a:	6825      	ldr	r5, [r4, #0]
 800545c:	6961      	ldr	r1, [r4, #20]
 800545e:	1d18      	adds	r0, r3, #4
 8005460:	6030      	str	r0, [r6, #0]
 8005462:	062e      	lsls	r6, r5, #24
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	d501      	bpl.n	800546c <_printf_i+0x1c0>
 8005468:	6019      	str	r1, [r3, #0]
 800546a:	e002      	b.n	8005472 <_printf_i+0x1c6>
 800546c:	0668      	lsls	r0, r5, #25
 800546e:	d5fb      	bpl.n	8005468 <_printf_i+0x1bc>
 8005470:	8019      	strh	r1, [r3, #0]
 8005472:	2300      	movs	r3, #0
 8005474:	6123      	str	r3, [r4, #16]
 8005476:	4616      	mov	r6, r2
 8005478:	e7bc      	b.n	80053f4 <_printf_i+0x148>
 800547a:	6833      	ldr	r3, [r6, #0]
 800547c:	1d1a      	adds	r2, r3, #4
 800547e:	6032      	str	r2, [r6, #0]
 8005480:	681e      	ldr	r6, [r3, #0]
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	2100      	movs	r1, #0
 8005486:	4630      	mov	r0, r6
 8005488:	f7fa feaa 	bl	80001e0 <memchr>
 800548c:	b108      	cbz	r0, 8005492 <_printf_i+0x1e6>
 800548e:	1b80      	subs	r0, r0, r6
 8005490:	6060      	str	r0, [r4, #4]
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	2300      	movs	r3, #0
 8005498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800549c:	e7aa      	b.n	80053f4 <_printf_i+0x148>
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	4632      	mov	r2, r6
 80054a2:	4649      	mov	r1, r9
 80054a4:	4640      	mov	r0, r8
 80054a6:	47d0      	blx	sl
 80054a8:	3001      	adds	r0, #1
 80054aa:	d0ad      	beq.n	8005408 <_printf_i+0x15c>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	079b      	lsls	r3, r3, #30
 80054b0:	d413      	bmi.n	80054da <_printf_i+0x22e>
 80054b2:	68e0      	ldr	r0, [r4, #12]
 80054b4:	9b03      	ldr	r3, [sp, #12]
 80054b6:	4298      	cmp	r0, r3
 80054b8:	bfb8      	it	lt
 80054ba:	4618      	movlt	r0, r3
 80054bc:	e7a6      	b.n	800540c <_printf_i+0x160>
 80054be:	2301      	movs	r3, #1
 80054c0:	4632      	mov	r2, r6
 80054c2:	4649      	mov	r1, r9
 80054c4:	4640      	mov	r0, r8
 80054c6:	47d0      	blx	sl
 80054c8:	3001      	adds	r0, #1
 80054ca:	d09d      	beq.n	8005408 <_printf_i+0x15c>
 80054cc:	3501      	adds	r5, #1
 80054ce:	68e3      	ldr	r3, [r4, #12]
 80054d0:	9903      	ldr	r1, [sp, #12]
 80054d2:	1a5b      	subs	r3, r3, r1
 80054d4:	42ab      	cmp	r3, r5
 80054d6:	dcf2      	bgt.n	80054be <_printf_i+0x212>
 80054d8:	e7eb      	b.n	80054b2 <_printf_i+0x206>
 80054da:	2500      	movs	r5, #0
 80054dc:	f104 0619 	add.w	r6, r4, #25
 80054e0:	e7f5      	b.n	80054ce <_printf_i+0x222>
 80054e2:	bf00      	nop
 80054e4:	0800644a 	.word	0x0800644a
 80054e8:	0800645b 	.word	0x0800645b

080054ec <_realloc_r>:
 80054ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f0:	4680      	mov	r8, r0
 80054f2:	4615      	mov	r5, r2
 80054f4:	460c      	mov	r4, r1
 80054f6:	b921      	cbnz	r1, 8005502 <_realloc_r+0x16>
 80054f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fc:	4611      	mov	r1, r2
 80054fe:	f7ff bb29 	b.w	8004b54 <_malloc_r>
 8005502:	b92a      	cbnz	r2, 8005510 <_realloc_r+0x24>
 8005504:	f7ff fcc2 	bl	8004e8c <_free_r>
 8005508:	2400      	movs	r4, #0
 800550a:	4620      	mov	r0, r4
 800550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005510:	f000 f81a 	bl	8005548 <_malloc_usable_size_r>
 8005514:	4285      	cmp	r5, r0
 8005516:	4606      	mov	r6, r0
 8005518:	d802      	bhi.n	8005520 <_realloc_r+0x34>
 800551a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800551e:	d8f4      	bhi.n	800550a <_realloc_r+0x1e>
 8005520:	4629      	mov	r1, r5
 8005522:	4640      	mov	r0, r8
 8005524:	f7ff fb16 	bl	8004b54 <_malloc_r>
 8005528:	4607      	mov	r7, r0
 800552a:	2800      	cmp	r0, #0
 800552c:	d0ec      	beq.n	8005508 <_realloc_r+0x1c>
 800552e:	42b5      	cmp	r5, r6
 8005530:	462a      	mov	r2, r5
 8005532:	4621      	mov	r1, r4
 8005534:	bf28      	it	cs
 8005536:	4632      	movcs	r2, r6
 8005538:	f7ff fc9a 	bl	8004e70 <memcpy>
 800553c:	4621      	mov	r1, r4
 800553e:	4640      	mov	r0, r8
 8005540:	f7ff fca4 	bl	8004e8c <_free_r>
 8005544:	463c      	mov	r4, r7
 8005546:	e7e0      	b.n	800550a <_realloc_r+0x1e>

08005548 <_malloc_usable_size_r>:
 8005548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800554c:	1f18      	subs	r0, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfbc      	itt	lt
 8005552:	580b      	ldrlt	r3, [r1, r0]
 8005554:	18c0      	addlt	r0, r0, r3
 8005556:	4770      	bx	lr

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
